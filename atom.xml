<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇迹师ori</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://planeswalker1205.github.io/"/>
  <updated>2021-08-20T15:51:03.091Z</updated>
  <id>https://planeswalker1205.github.io/</id>
  
  <author>
    <name>John miracle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02-css-Less</title>
    <link href="https://planeswalker1205.github.io/2021/08/18/02-css-Less/"/>
    <id>https://planeswalker1205.github.io/2021/08/18/02-css-Less/</id>
    <published>2021-08-18T15:35:56.000Z</published>
    <updated>2021-08-20T15:51:03.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Less是一门css的预处理语言。是一个css的增强版。通过Less编写更少的代码，实现更强大的样式</strong> </p><h3 id="css变量"><a href="#css变量" class="headerlink" title="css变量 ##"></a>css变量 ##</h3><p><strong>1. css原生也支持变量的设置，但是兼容性较差</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">--变量名:值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.box1&#123;</span><br><span class="line">background-color:var(--变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. calc()计算函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">width:calc(20px&#x2F;2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Less是一门css的预处理语言。是一个css的增强版。通过Less编写更少的代码，实现更强大的样式&lt;/strong&gt; &lt;/
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
      <category term="Less" scheme="https://planeswalker1205.github.io/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>01_css_Animation</title>
    <link href="https://planeswalker1205.github.io/2021/08/08/01-css-Animation/"/>
    <id>https://planeswalker1205.github.io/2021/08/08/01-css-Animation/</id>
    <published>2021-08-08T10:04:00.000Z</published>
    <updated>2021-08-18T15:34:39.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p><strong>transition</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"><span class="attribute">transition</span>:all/height/background-position <span class="number">0.2s</span> <span class="built_in">steps</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>第一个值为要过渡得属性</p></li><li><p>第二个值为过渡的时间</p></li><li><p>第三个值为过渡的步骤(分为几步走)</p></li></ol><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="动画和过渡类似，都是可以实现一些动态的效果。不同的是，动画可以自动触发动态效果"><a href="#动画和过渡类似，都是可以实现一些动态的效果。不同的是，动画可以自动触发动态效果" class="headerlink" title="动画和过渡类似，都是可以实现一些动态的效果。不同的是，动画可以自动触发动态效果"></a>动画和过渡类似，都是可以实现一些动态的效果。不同的是，动画可以自动触发动态效果</h2><h3 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h3><p>设置动画效果，必须先设置一个关键帧，关键帧设置了动画执行的每一个步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;@identifier,关键帧的名字</span><br><span class="line">@keyframes identifier&#123;</span><br><span class="line">&#x2F;&#x2F;表示动画的开始位置，也可以使用0%表示</span><br><span class="line">from&#x2F;0%&#123;</span><br><span class="line">margin-left:0px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;动画的结束位置</span><br><span class="line">to&#123;</span><br><span class="line">marign-left:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置动画的关键位置。其中可以有0%；30%；55%等</p></blockquote><p>调用关键帧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cls</span>&#123;</span><br><span class="line">//指定关键帧的名字</span><br><span class="line"><span class="selector-tag">animation-name</span><span class="selector-pseudo">:identifier</span>;</span><br><span class="line">//指定动画的执行时间</span><br><span class="line"><span class="selector-tag">animation-duration</span><span class="selector-pseudo">:2s</span>;</span><br><span class="line">//设置动画的延时</span><br><span class="line"><span class="selector-tag">animation-delay</span><span class="selector-pseudo">:2s</span>;</span><br><span class="line">//设置速度的方式(匀速/先加速后减速)</span><br><span class="line"><span class="selector-tag">animation-timing-function</span><span class="selector-pseudo">:ease-in-out</span>;</span><br><span class="line">//动画执行的次数</span><br><span class="line">animation-iteration-count:infinite;//无限执行</span><br><span class="line">//动画执行的方向</span><br><span class="line"><span class="selector-tag">animation-direction</span><span class="selector-pseudo">:normal</span>;</span><br><span class="line">//设置动画的执行状态</span><br><span class="line"><span class="selector-tag">animation-play-state</span><span class="selector-pseudo">:running</span>;</span><br><span class="line">//动画的填充模式</span><br><span class="line"><span class="selector-tag">animation-fill-mode</span><span class="selector-pseudo">:none</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nimation-fill-mode</strong></p><p>可选值：</p><p>none：动画执行完后回到元素原来的位置</p><p>forwards：动画执行完毕，元素会停止在动画结束的位置</p><p>backwards：动画延时等待时元素就会处于开始from的位置</p><p>both：结合了forwards和backwards。</p><p><strong><font color="red">使用animation属性要为animation设置执行时间，不能与transition联合使用。</font></strong></p><h1 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h1><p>指通过CSS改变元素的形状和位置</p><p>   <strong>-</strong> 不会影响到页面的布局</p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p><strong>用来设置元素的变形效果</strong></p><h3 id="1-平移"><a href="#1-平移" class="headerlink" title="1. 平移"></a>1. 平移</h3><p>translateX()    沿着X轴平移</p><p>translateY()    沿着Y轴平移</p><p>translateZ()    沿着Z轴平移</p><p>当元素没有设置宽度时如何居中。可使用X轴平移</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">//往右平移自身宽度的50%</span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateX(-50</span>%) <span class="selector-tag">translateY</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class = "test"&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aaa</span></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>一个元素只能设置一个transform属性，同一个元素后设置的会完全覆盖掉前面的</strong></p><h4 id="2-Z轴平移"><a href="#2-Z轴平移" class="headerlink" title="2. Z轴平移"></a>2. Z轴平移</h4><p>调整元素在Z轴的位置。距离越大 离人眼越近</p><p><strong>Z轴平移属于立体效果，默认情况下网页不支持透视。如果需要看到效果，必须设置网页的视距</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">//设置当前网页的视距为800px，。人眼距离网页的距离</span><br><span class="line"><span class="selector-tag">perspective</span><span class="selector-pseudo">:800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p><strong>rotateX();</strong></p><p><strong>rotateY();</strong></p><p><strong>rotateZ();</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;沿X轴90°旋转</span><br><span class="line">transform:rotateX(90deg);</span><br></pre></td></tr></table></figure><p>旋转后对应轴的方向也会改变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotateY(180deg)</span> <span class="selector-tag">translateZ</span>(400<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateZ(400px)</span> <span class="selector-tag">rotateY</span>(180<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p>前者会沿着Y轴旋转时逐渐变小</p><p>后者会逐渐变大沿着Y轴旋转</p><p><strong>backface-visibility:是否显示元素的背面</strong></p><p><strong><font color="red">注：默认transform变形是2D的效果。</font></strong></p><p><strong>transform-style: preserve-3d;</strong>属性可以将transform的变形改为3d的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.rotate</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.rotate</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">rotateZ</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img1</span>,</span><br><span class="line">    <span class="selector-class">.img2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.img2</span> &#123;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">640px</span> <span class="number">360px</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(./img/<span class="number">202188215150</span>.png);</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">vertical-align</span>: top;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.img1</span> &#123;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">640px</span> <span class="number">360px</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(./img/<span class="number">2021731202556</span>.png);</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">vertical-align</span>: top;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此效果为180°旋转后变为另一张图片。</p><h1 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h1><p><strong>transform属性：</strong></p><p>对元素进行缩放。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">scale</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">scaleX</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">scaleY</span>();</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><p>scaleX(2):X轴放大二倍。</p><p>scaleX(.2);X轴缩小</p><h1 id="变形原点"><a href="#变形原点" class="headerlink" title="变形原点"></a>变形原点</h1><p><strong>transform-origin:center;</strong></p><p>指定变形的原点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform-origin:0 0;</span><br></pre></td></tr></table></figure><p>左上角为原点变形</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;过渡&quot;&gt;&lt;a href=&quot;#过渡&quot; class=&quot;headerlink&quot; title=&quot;过渡&quot;&gt;&lt;/a&gt;过渡&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;transition&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
      <category term="Animation" scheme="https://planeswalker1205.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>04-css</title>
    <link href="https://planeswalker1205.github.io/2021/06/02/04-css/"/>
    <id>https://planeswalker1205.github.io/2021/06/02/04-css/</id>
    <published>2021-06-02T14:50:24.000Z</published>
    <updated>2021-08-08T12:20:33.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-小米官网首页练习"><a href="#1-小米官网首页练习" class="headerlink" title="1. 小米官网首页练习"></a>1. 小米官网首页练习</h2><h3 id="1-公共类"><a href="#1-公共类" class="headerlink" title="1. 公共类"></a>1. 公共类</h3><p><strong>解决塌陷</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置网页body的最小宽度</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">min-width</span><span class="selector-pseudo">:1226px</span>;</span><br></pre></td></tr></table></figure><blockquote><p>当手动缩小页面宽度时，网页的body内容最小只会到达1226px。</p></blockquote><p><strong>line-height不会撑开a的高度</strong></p><h3 id="2-相关属性"><a href="#2-相关属性" class="headerlink" title="2. 相关属性"></a>2. 相关属性</h3><p><strong>transition</strong></p><p>过渡效果，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span><br><span class="line"><span class="selector-tag">transition</span><span class="selector-pseudo">:height</span> 3<span class="selector-tag">s</span>;</span><br><span class="line">//在元素的高度发生变化时会有3s的过渡效果。</span><br></pre></td></tr></table></figure><p>设置transition属性时要给元素一个初始的值，如果是auto的话浏览器无法计算过渡的值。</p><p><strong>title</strong></p><p>当为元素设置title属性时，鼠标移入会显示出title的值</p><p><strong>text-indent</strong></p><p>首行缩进</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//隐藏logo中的文字</span><br><span class="line"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:-999px</span>;</span><br><span class="line">//字体到了界面外面，但是搜索引擎还是可以看到。可以用于爬取页面又不想显示出字体时设置此值。</span><br></pre></td></tr></table></figure><p><strong>定位背景图像</strong></p><p><strong>写法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-icon</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.miIcon</span></span><br></pre></td></tr></table></figure><p>此种写法重点在与miIcon是left-icon的子元素</p><p><strong>一个三角的效果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">     .test&#123;</span><br><span class="line">         width:0;</span><br><span class="line">         height: 0;</span><br><span class="line">         border:5px red solid;</span><br><span class="line">         border-top:none;</span><br><span class="line">         border-color: transparent transparent black transparent;</span><br><span class="line">     &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;div class&#x3D;&quot;out&quot;&gt;</span><br><span class="line">   </span><br><span class="line">       &lt;div class&#x3D;&quot;test&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>如：</p><div style="width:0;height: 0;border:5px red solid;border-top:none; border-color: transparent transparent black transparent;"></div><p><strong>据我所知，CSS里样式名称定为的越精确，执行的优先级就越高。比如</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> <span class="selector-class">.div2</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.testa</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.testa</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时无论两者顺序如何，优先执行第一个样式</p><p><strong>absolute</strong></p><p><strong>设置绝对定位后，元素自动变成块元素。</strong></p><h3 id="3-相关知识点"><a href="#3-相关知识点" class="headerlink" title="3.相关知识点"></a>3.相关知识点</h3><p><strong>01-加入给子元素a设置了width为100%，而position又设置为absolute。那么此时如果没有祖先元素设置包含块(如属性position：relative;)，那么子元素a的width是被自己的内容撑开的，而不是继承于父元素高度的100%。只有为祖先元素设置成子元素a的包含块，width才会是包含块的宽度的100%。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.out</span> &#123;</span></span><br><span class="line">        width: 1000px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/1.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><font size="5" color="red">注意：如果此时包含块的宽度大于图片本身的宽度的话，为图片设置的依照包含块宽度的100%也没有生效。目前不知道为什么</font></strong></p><p><strong>02-在页面固定一个块元素</strong></p><p><img src="/2021/06/02/04-css/position.png" alt></p><p>如上，粉色块固定在黑框块的右边。此时不能单纯的定位fixed，设置right属性完成。因为页面的大小是不固定的。</p><p>此时可以先为粉块设置fixed定位，然后设置right为50%，这样粉块右边框就会处于页面中间。再根据等式</p><p><strong>left+margin-left+width+margin-right+right = 页面宽度</strong></p><p>即</p><p><strong>auto+0+width+0+50% = 页面宽度</strong></p><p>想要left值变大，其他值就需要变小，此时可以设置margin-right的值为 -(黑框的一半宽+粉块的宽)，粉块就会贴合于黑框右边了。</p><p><strong>03-设置网页的图标</strong></p><p>网站图片一般都存储在根目录下，名字一般叫做favicon.ico</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel &#x3D; &quot;icon&quot; href &#x3D; &quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-小米官网首页练习&quot;&gt;&lt;a href=&quot;#1-小米官网首页练习&quot; class=&quot;headerlink&quot; title=&quot;1. 小米官网首页练习&quot;&gt;&lt;/a&gt;1. 小米官网首页练习&lt;/h2&gt;&lt;h3 id=&quot;1-公共类&quot;&gt;&lt;a href=&quot;#1-公共类&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>03-css</title>
    <link href="https://planeswalker1205.github.io/2021/05/02/03-css/"/>
    <id>https://planeswalker1205.github.io/2021/05/02/03-css/</id>
    <published>2021-05-02T14:55:41.000Z</published>
    <updated>2021-08-08T12:21:09.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-定位"><a href="#1-定位" class="headerlink" title="1. 定位"></a>1. 定位</h2><p><strong>1. 定位是一种更加高级的布局手段</strong></p><p><strong>2. 通过定位可以将元素摆放到页面任意位置</strong></p><p><strong>3. 通过position属性来设置定位</strong></p><p><em>要找到定位原点：top:0;left:0;</em></p><p>position可选值：</p><ul><li><p>static： 默认值，元素是静止的，没有开启定位</p></li><li><p>relative：开启元素相对定位</p></li><li><p>absolute：开启元素绝对定位</p></li><li><p>fixed：开启元素固定定位</p></li><li><p>sticky：开启元素的粘滞位</p></li></ul><h3 id="01-relative"><a href="#01-relative" class="headerlink" title="01.relative"></a>01.relative</h3><p><strong><font color="green" size="4">feature：</font></strong></p><ol><li><p>元素开启相对定位以后，如果不设置偏移量，元素不会发生任何的改变</p></li><li><p>相对定位是参照于元素在文档流中的位置进行定位的</p></li><li><p>相对定位会提升元素的层级。(如果定位到文档流中的元素的位置，则会覆盖文档流中的元素)</p></li><li><p>相对定位不会使元素脱离文档流</p></li><li><p>相对定位不会改变元素的性质。即块还是块，行内还是行内</p></li></ol><p><strong>偏移量(offset)</strong></p><p>当元素开启了定位以后，可以通过偏移量来设置元素的位置</p><ul><li><p>top</p></li><li><p>bottom</p></li><li><p>left</p></li><li><p>right</p></li></ul><h3 id="02-absolute"><a href="#02-absolute" class="headerlink" title="02.absolute"></a>02.absolute</h3><p><strong>当元素的position属性设置为absolute时，则开启了元素的绝对定位</strong></p><p><strong><font color="green" size="4">feature：</font></strong></p><ol><li><p>元素开启绝对定位以后，如果不设置偏移量，元素的<strong><font color="red">位置</font></strong>不会发生任何的改变</p></li><li><p>开启绝对定位后，元素会从文档流中脱离</p></li><li><p>绝对定位会改变元素的性质，行内变成块。如果不设置元素的宽高，块的宽高被内容撑开。和浮动的性质类似</p></li><li><p>绝对定位会提升元素的一个层级</p></li><li><p>绝对定位元素是相对于其包含块进行定位的。</p></li></ol><p><strong><font color="green">包含块(containing block)：</font></strong></p><p><strong>-</strong> 正常情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">包含块就是离当前元素最近的祖先块元素</span><br><span class="line">&lt;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;  &#x2F;&#x2F;外边div是里边div的包含块</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&lt;span&gt;&lt;em&gt;&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt; &#x2F;&#x2F;em和span的包含块是div。span不是块，所以em的包含块是div而不是span</span><br></pre></td></tr></table></figure><p><strong>-</strong> 开启绝对定位的情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含块就是离它最近的开启了定位的祖先元素。如果所有的祖先元素都没有开启定位，则根元素就是它的包含块</span><br></pre></td></tr></table></figure><p><strong>-</strong>html（根元素，初始包含块）</p><h3 id="03-fixed"><a href="#03-fixed" class="headerlink" title="03.fixed"></a>03.fixed</h3><p><strong>将元素的position属性设置为fixed则开启了元素的固定定位</strong></p><p><strong><font color="green">固定定位也是一种绝对定位，所以固定定位的大部分特点和绝对定位一样</font></strong></p><p><strong><font color="red">唯一不同的是，固定定位永远参照于浏览器得到视口进行定位。</font></strong></p><p><strong>视口：浏览器的可视窗口。</strong></p><p><strong><font color="green">固定定位的元素不会随着网页的滚动条滚动</font></strong></p><h3 id="04-sticky"><a href="#04-sticky" class="headerlink" title="04.sticky"></a>04.sticky</h3><p><strong>将元素的position属性设置为sticky则开启了元素的粘滞定位</strong></p><p><strong><font color="green">粘滞定位和相对定位的特点基本一致。不同的是，粘滞定位可以在元素到达某个位置(top:×px;left:×px;bottom:×px;right:×px;)时将其固定</font></strong></p><p><strong><font color="red">需要考虑兼容性</font></strong></p><h2 id="2-绝对定位元素的位置"><a href="#2-绝对定位元素的位置" class="headerlink" title="2. 绝对定位元素的位置"></a>2. 绝对定位元素的位置</h2><h3 id="01-水平布局"><a href="#01-水平布局" class="headerlink" title="01.水平布局"></a>01.水平布局</h3><p><strong>正常情况下：包含块的水平布局需要满足等式<font color="green">margin-left+border-left+padding-left+width+padding-right+border-right+margin-right</font></strong>.</p><p><strong>而当开启了相对定位的包含块内的子元素开启了绝对定位之后，等式就发生了变化，即：<font color="green">left+margin-left+border-left+padding-left+width+padding-right+border-right+margin-right+right</font><font size="5">  =  </font>包含块的水平宽度</strong></p><p><strong>多出来的left和right就是绝对定位的left和right属性。由于布局是从左往右从上往下的，所以left和right都设置值的话，left会使自身元素移动。</strong></p><p><strong><font color="red">当left设置一个值，且等式没有满足时，就会发生过度约束，如果9个值中没有auto，right的值则不会生效，自动调整right值以使等式满足；如果有auto，则自动调整auto的值以使等式满足</font></strong></p><p><strong><font color="red">left和right的值默认是auto</font></strong></p><blockquote><p>可设置auto的属性：margin；width；left；width</p></blockquote><h3 id="02-垂直布局"><a href="#02-垂直布局" class="headerlink" title="02.垂直布局"></a>02.垂直布局</h3><p><strong>同上，垂直布局的等式也必须要满足：</strong></p><p><strong><font color="green">top/bottom+margin-top/bottom+padding-top/bottom+border-top/bottom+height</font><font size="5">  =  包含块的高度</font></strong></p><h3 id="03-元素的层级"><a href="#03-元素的层级" class="headerlink" title="03. 元素的层级"></a>03. 元素的层级</h3><p>对于开启了定位的元素，可以通过z-index属性来指定元素的层级。z-index需要一个整数作为参数，值越大元素的层级就越高。</p><p><strong>如果元素的层级一样，则优先显示靠下的元素</strong></p><p><strong>祖先元素的层级再高也不会盖住后代元素</strong></p><h2 id="3-图标字体"><a href="#3-图标字体" class="headerlink" title="3. 图标字体"></a>3. 图标字体</h2><p><strong>图标字体(iconfont)：</strong></p><p>在网页中经常需要使用一些图标，可以通过图片来引入图标。但是图片本身比较大并且非常不灵活。</p><p>所以，在使用图标时，我们还可以将图标直接设置为字体，然后通过font-face的形式来对字体进行引入。<strong>这样我们就可以通过使用字体的形式来使用图标。</strong></p><h3 id="01-图标字体库：Font-Awesome"><a href="#01-图标字体库：Font-Awesome" class="headerlink" title="01. 图标字体库：Font Awesome"></a>01. 图标字体库：Font Awesome</h3><p>使用步骤：</p><ol><li><p>下载</p></li><li><p>解压</p></li><li><p>将css和webfonts移动到项目中。（css和webfonts必须要在同一级目录下）</p></li><li><p>将all.css引入到网页中</p></li><li><p>使用图标字体（直接通过类名使用图标字体）</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">"fas fa-bell"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">"fab fa-accessible-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过伪元素设置图标字体</strong></p><ol><li><p>找到要设置图标的元素通过before或者after选中</p></li><li><p>在content中设置字体的编码（文档里可以找到编码）</p></li><li><p>设置字体的样式</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">fab</span></span><br><span class="line">font-family:'Font Awesome 5 Brands';</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fas</span></span><br><span class="line">font-family:'Font Awesome 5 Free';</span><br><span class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:900</span>;</span><br></pre></td></tr></table></figure><p><strong>通过实体使用图标字体</strong></p><p>&amp;#x图标的编码;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">"fas"</span>&gt;</span><span class="symbol">&amp;#xf0f3;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="02-图标字体库：iconfont"><a href="#02-图标字体库：iconfont" class="headerlink" title="02. 图标字体库：iconfont"></a>02. 图标字体库：iconfont</h3><p>阿里的。更加灵活</p><p>版权问题不是很清晰</p><h2 id="4-font"><a href="#4-font" class="headerlink" title="4. font"></a>4. font</h2><p>font可以设置字体相关的所有属性。</p><p>语法：</p><p><code>font:字体大小/行高 字体族</code></p><p>行高可以省略不写，如果不写会使用默认值。如果前面设置了行高会覆盖。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: 50px 'Times new Roman',Times,serif;</span><br></pre></td></tr></table></figure><h3 id="文本的样式"><a href="#文本的样式" class="headerlink" title="文本的样式"></a>文本的样式</h3><p><strong>text-align:文本的水平对齐</strong></p><p>可选值：left(左侧对齐)  right(右侧对齐) center(居中对齐) justify(两端对齐)</p><p><strong>vertical-align:设置元素垂直对齐方式</strong></p><p>可选值：</p><p>默认值：baseline(基线对齐)。子元素的基线和父元素的基线对齐</p><p>top：顶部对齐。子元素的顶部和父元素的顶部对齐</p><p>bottom：底部对齐。子元素的底部和父元素的底部对齐</p><p>middle：居中对齐。子元素的中线和父元素的x的中线对齐</p><p>指定值：10px  -10px 等等</p><p>如果块元素中引入图片标签img，img标签属于行变量标签,和文字一样,下面有一个字间距。那么img默认也是基线对齐的。所以img标签下边距会和块元素底部有一点距离。使img标签的vertical-align属性不为基线对齐即可。</p><p><em>什么是基线对齐</em></p><blockquote><p><strong>基线对齐其实就是指英文字母<code>a、i、n、s</code>这些字母的底部</strong></p></blockquote><p><strong>text-decoration</strong></p><p>可选值：</p><p>none；underline；line-through(删除线)；overline(上划线)</p><p><code>text-decoration:underline red dotted</code>（ie不支持）</p><p><strong>white-space</strong></p><p>设置网页如何处理空白</p><p>可选值：</p><p>normal;nowrap(不换行，可能导致横向出现滚动条)；pre(保留空白。即代码里面写的什么样，页面样式就是什么样)</p><p>溢出文本设置为省略号的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03-京东导航条"><a href="#03-京东导航条" class="headerlink" title="03. 京东导航条"></a>03. 京东导航条</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当鼠标移入到class为location的元素时citylist的样式为display:block；</span><br><span class="line"><span class="selector-class">.locataion</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">citylist</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:block；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      *&#123;</span><br><span class="line">         margin: 0;</span><br><span class="line">         padding: 0;</span><br><span class="line">         border: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .nav&#123;</span><br><span class="line">         margin-top: 30px;</span><br><span class="line">         background-color:#E3E4E5;</span><br><span class="line">         height: 31px;</span><br><span class="line">         position: relative;</span><br><span class="line">&#x2F;&#x2F;此处高度写死了就不需要overflow:hidden解决塌陷。如果加了这个属性又加了position属性，那么他的同层级弹出框就会被隐藏，不</span><br><span class="line">        &#x2F;&#x2F;会弹出</span><br><span class="line"> </span><br><span class="line">      &#125;</span><br><span class="line">      .center&#123;</span><br><span class="line"> &#x2F;&#x2F;用于居中</span><br><span class="line">         width:1000px;</span><br><span class="line">         margin:auto;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      .leftlocation&#123;</span><br><span class="line">&#x2F;&#x2F;左侧浮动</span><br><span class="line">         float:left;</span><br><span class="line">       </span><br><span class="line">      &#125;</span><br><span class="line">   .currentcity&#123;</span><br><span class="line">  &#x2F;&#x2F;当前城市，使其相对定位设置层级，下边距一小部分就可以盖住弹出层</span><br><span class="line">          position: relative;</span><br><span class="line">          z-index:1000;</span><br><span class="line">       &#125;</span><br><span class="line">       .leftlocation:hover .currentcity&#123;</span><br><span class="line">&#x2F;&#x2F;鼠标移入.leftlocation时.currentcity的样式</span><br><span class="line">&#x2F;&#x2F;hover样式，因为加了边框所以鼠标移入时块会抖动，可以在原样式加入边框并使其透明解决此问题</span><br><span class="line">         background-color: white;</span><br><span class="line">         border:1px solid #CCCCCC;</span><br><span class="line">         border-bottom: none;</span><br><span class="line">      &#125; </span><br><span class="line">     </span><br><span class="line">      .rightnav li,.currentcity&#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            padding: 8px 10px;</span><br><span class="line">            font-size: 9px;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .rightnav&#123;</span><br><span class="line"></span><br><span class="line">         float:right;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      .rightnav li a, .currentcity a&#123;</span><br><span class="line">         color:#999999;</span><br><span class="line">         text-decoration-line: none;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .rightnav li&#123;</span><br><span class="line">         float: left;</span><br><span class="line">         </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   .city-list&#123;</span><br><span class="line">&#x2F;&#x2F;城市列表，使其绝对定位，并初始隐藏，绝对定位参照物是上面的相对定位，所以设置top属性紧贴nav，由于弹出层显示优先级需要高</span><br><span class="line">&#x2F;&#x2F;所以z-index设置为低一级currentcity</span><br><span class="line">         background-color: black;</span><br><span class="line">         display: none;</span><br><span class="line">         width:448px;</span><br><span class="line">         height: 436px;</span><br><span class="line">         border:1px solid #CCCCCC;</span><br><span class="line">         background-color: white;</span><br><span class="line">         position: absolute;</span><br><span class="line">         top:31px;</span><br><span class="line">         z-index: 999;</span><br><span class="line">      &#125;</span><br><span class="line">      .leftlocation:hover .city-list&#123;</span><br><span class="line"> &#x2F;&#x2F;鼠标移入.leftlocation时.city的样式</span><br><span class="line">         display: block;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&lt;!-- 导航栏 --&gt;</span><br><span class="line">        &lt;div class &#x3D; &quot;nav&quot;&gt;</span><br><span class="line">   &lt;!-- 居中 --&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;!-- 左侧当前位置 --&gt;</span><br><span class="line">         &lt;div class &#x3D; &quot;leftlocation&quot;&gt;</span><br><span class="line">&lt;!-- 当前城市 --&gt;</span><br><span class="line">            &lt;div class &#x3D; &quot;currentcity&quot;&gt;</span><br><span class="line">              &lt;a href &#x3D; &quot;javascript:;&quot;&gt;广东&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 弹出层城市列表 --&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;city-list&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 右侧列表 --&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;rightnav&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;你好，请登录&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;免费注册&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;我的订单&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;我的京东&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;京东会员&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;企业采购&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;客户服务&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;网站导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;li&gt;&lt;a href &#x3D; &quot;javascript:;&quot;&gt;手机京东&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-背景图片"><a href="#5-背景图片" class="headerlink" title="5. 背景图片"></a>5. 背景图片</h2><p><strong>background-clip:设置背景的范围，可选值：</strong></p><ol><li><p>border-box:默认值，背景会出现在边框的下边</p></li><li><p>padding-box:背景不会出现在边框，只出现在内容区和内边距</p></li><li><p>content-box:背景只会出现在内容区</p></li></ol><p><strong>background-position:背景图片的偏移量</strong></p><p><code>background-position:10px 20px;</code> 表示背景图片左移10，下移20.可以设置为负数。</p><p><strong>如果仅仅设置了一个值，那么第二个值为center</strong></p><p><strong>background-origin:背景图片的偏移量计算的原点(参见上述背景图片的偏移量)：</strong></p><ol><li><p>padding-box：默认值，background-position从内边距开始计算</p></li><li><p>content-box：背景图片的偏移量从内容区处计算</p></li><li><p>border-box：背景图片的变量从边框处开始计算</p></li></ol><p><strong>background-size:设置背景图片大小</strong></p><p><code>background-size:100px 100px;</code>第一个值代表图片的宽度，第二个值代表图片的高度 。如果只写一个值，则第二个值默认auto</p><p>还有另外几个属性值。</p><ol><li><p>cover：图片的比例不变，将元素铺满</p></li><li><p>contain：图片比例不变，将图片在元素中完整显示</p></li></ol><p><strong><font color="green">图片属于网页中的外部资源，外部资源都需要浏览器单独发送请求。浏览器加载外部资源时是按需加载，用则加载，不用则不加载。</font></strong></p><p>所以按钮不同事件下加载不同的背景图片可能会造成背景的闪烁。解决此问题：</p><p>可以将多个小图片统一保存到一个大图片中，然后通过调整background-position来显示响应的图片，这样图片会同时加载到网页中，就可以有效避免闪烁的问题。这个技术在网页中应用十分广泛，被称为css-Sprite。成为雪碧图。</p><p><strong>雪碧图的特点：</strong></p><p>一次性将多个图片加载进页面，降低请求的次数，加快访问速度，提升用户体验。只适用于背景，不适用img</p><h2 id="6-渐变"><a href="#6-渐变" class="headerlink" title="6. 渐变"></a>6. 渐变</h2><p>通过渐变可以设置一些复杂的背景色，可以实现从一个颜色向其他颜色过渡的效果。渐变是图片，需要background-image来设置。特质和图片一样。</p><h3 id="线性渐变：颜色沿着一条直线发生变化。"><a href="#线性渐变：颜色沿着一条直线发生变化。" class="headerlink" title="线性渐变：颜色沿着一条直线发生变化。"></a>线性渐变：颜色沿着一条直线发生变化。</h3><p><strong><font color="green">linear-gradient();</font></strong></p><p><code>background-color:linear-gradient(red,yellow);//红色在开头，黄色在结尾。中间是过渡区域</code></p><p><code>background-color:linear-gradient(to right,red,yellow);//从左向右</code></p><p>线性渐变的开头，可以指定一个渐变的方向。to left;to right;to bottom;to top;to top left;xxxdeg（指定一个度数）;xxxturn（指定一个圈）</p><p><strong>渐变可以同时指定多个颜色。多个颜色情况下默认平均分布。也可以手动指定渐变的分布情况</strong></p><p><code>background-image:linear-gradient(red 50px,yellow 100px)</code>从0-50px都是红色。从100px后是黄色。50-100则是过渡区域。</p><p><strong><font color="green">repeating-linear-gradient();可以平铺的线性渐变</font></strong></p><p><code>background-image:repeating-linear-gradient(red 50px,yellow 100px)</code>50px是红色，100px是黄色。50-100都是一个渐变效果。50-100外的区域会平铺</p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p><strong>radial-gradient() 放射性的效果</strong></p><p>默认情况下径向渐变圆心的形状根据元素的形状来计算的。</p><p>正方形–圆形</p><p>长方形–椭圆形</p><p>也可以手动指定径向渐变的大小。</p><p>如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(100px</span> 100<span class="selector-tag">px</span> <span class="selector-tag">red</span>,<span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">意思是渐变的范围是横向100px，纵向100px。其他范围没有指定默认是green</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>指定渐变的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(100px</span> 100<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 0, <span class="selector-tag">red</span>,<span class="selector-tag">green</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">渐变位置在原点</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h2><p><strong>注：如果表格中没有使用tbody而直接使用tr，那么浏览器会自动创建一个tbody，并将tr全都放到tbody中。故tr的父元素不是table。</strong></p><p><strong>子元素垂直水平居中</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">   <span class="selector-class">.all</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">display</span>: table-cell;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.a</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class="all"&gt;</span><br><span class="line">    &lt;div class="a"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="8-表单"><a href="#8-表单" class="headerlink" title="8.表单"></a>8.表单</h2><p><strong>form属性</strong></p><ol><li>action：表单要提交的服务器的地址</li></ol><p><strong>text文本框</strong></p><p><code>&lt;input type = &quot;text&quot; name = &quot;ctext&quot;/&gt;</code></p><p>数据要提交到服务器，必须要为元素指定一个name</p><p><strong>提交按钮</strong></p><p><code>&lt;input type = &quot;submit&quot; value = &quot;提交&quot;/&gt;</code></p><p><strong>单选按钮</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"radio"</span> <span class="attr">name</span> = <span class="string">"testRadio"</span> <span class="attr">value</span> = <span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"radio"</span> <span class="attr">name</span> = <span class="string">"testRadio"</span> <span class="attr">value</span> = <span class="string">"b"</span> <span class="attr">checked</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>需要用name属性为单选按钮分组。<code>checked</code>属性可以将单选按钮设置为默认选中</p><p><strong>多选按钮</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> <span class="attr">name</span> = <span class="string">"testCheckbox"</span> <span class="attr">value</span> = <span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> <span class="attr">name</span> = <span class="string">"testCheckbox"</span> <span class="attr">value</span> = <span class="string">"b"</span> <span class="attr">checked</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>下拉列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">"testSele"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">"i1"</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">"i2"</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">"i3"</span> <span class="attr">selected</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>颜色选择</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"color"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-定位&quot;&gt;&lt;a href=&quot;#1-定位&quot; class=&quot;headerlink&quot; title=&quot;1. 定位&quot;&gt;&lt;/a&gt;1. 定位&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 定位是一种更加高级的布局手段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 通过定位可以将
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>02-css</title>
    <link href="https://planeswalker1205.github.io/2021/03/19/02-css/"/>
    <id>https://planeswalker1205.github.io/2021/03/19/02-css/</id>
    <published>2021-03-19T14:53:19.000Z</published>
    <updated>2021-08-08T14:15:06.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h2><p><strong>如果我们为一个元素设置了它的样式，此样式也会应用到它的后代元素–发生在祖先和后代元素之间</strong></p><p><strong><font color="green">优点：利用继承，我们可以把一些通用的样式统一设置到共同的祖先元素。这样只需设置一次即可让所有元素具有该样式</font></strong></p><p><strong><font color="red">注：并不是所有的样式都能被继承。比如：<font color="#0000FF">背景、布局</font>相关的等等都不会被继承,可在api文档查看。</font></strong></p><h2 id="2-选择器的权重"><a href="#2-选择器的权重" class="headerlink" title="2. 选择器的权重"></a>2. 选择器的权重</h2><ol><li><p>样式的冲突：当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突。</p></li><li><p>发生样式冲突时，应用哪个样式由选择器的<strong>权重(优先级)</strong>决定。</p></li></ol><p><strong>选择器的权重</strong></p><p><strong><font color="#A52A2A">内联/行内样式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1,0,0,0)</font></strong></p><p><strong><font color="#A52A2A">&gt;id选择器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (0,1,0,0)</font></strong></p><p><strong><font color="#A52A2A">&gt;类和伪类选择器 (0,0,1,0)</font></strong></p><p><strong><font color="#A52A2A">&gt;元素选择器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0,0,0,1)</font></strong></p><p><strong><font color="#A52A2A">&gt;通配选择器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0,0,0,0)</font></strong></p><p><strong><font color="#A52A2A">&gt;继承的样式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 无优先级</font></strong></p><p>比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的）。</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">//100</span><br><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#box1</span>&#123;</span><br><span class="line">//100+1</span><br><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">//10</span><br><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id = "box1" class = "red"&gt;</span><br><span class="line">我是一个<span class="selector-tag">div</span></span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>则上述样式最优先的是<code>div#box1{}</code></p><p><em>分组选择器是单独计算的</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-id">#box1</span>,<span class="selector-class">.red</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  div:1</span></span><br><span class="line"><span class="comment"> *  #box1:100</span></span><br><span class="line"><span class="comment"> *  .red:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attribute">color</span>:brown;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">选择器的累加不会超过它的最大数量级</font></strong></p><p><em>id及以下级别的选择器优先级再叠加也大不过内联样式</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#box1&#123;</span><br><span class="line">&#x2F;&#x2F;100</span><br><span class="line">background-color:orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.d1.d2.d3.d4.d5.d6.d7.d8.d9.d10.d11&#123;</span><br><span class="line"></span><br><span class="line">background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id &#x3D; &quot;box1&quot; class &#x3D; &quot;d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11&quot;&gt;</span><br><span class="line">我是一个div</span><br><span class="line">&lt;div&gt;</span><br></pre></td></tr></table></figure><p><em>类似这种写法，样式的优先级最高的还是id选择器</em></p><p><strong>如果优先级计算后相同，那么优先使用靠下的样式</strong></p><blockquote><p>注：可以在某一个样式后面添加<strong>important</strong>，则此时样式会获得最高的优先级。甚至超过内联样式。<strong><font color="red">在开发中一定要慎用</font></strong>。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>a标签伪类优先级</strong></p><p>(1):link                   选择所有未访问链接   </p><p>(2):visited                选择所有访问过的链接</p><p>(3):hover                  选择鼠标在链接上面的链接  ( :hover 选择器器可用于所有元素，不仅是链接。)</p><p>(4):active                 选择活动链接 (鼠标点击与释放之间)</p><p>(注意: link 和 visited 的位置可颠倒,建议不这样做)</p><p><em>此优先级遵照“爱恨原则”  即“LoVeHAye”</em>。为什么要遵照这个优先级呢，如果顺序错乱，比如<code>:link</code>放在了最后一个，那么由CSS的就近原则，同一个标签(link里包含了hover和active的标签)后面的样式会覆盖掉前面的样式，则前面的<code>active``：hover</code>都会被覆盖从而不生效。</p><h2 id="3-长度单位"><a href="#3-长度单位" class="headerlink" title="3. 长度单位"></a>3. 长度单位</h2><p><strong>01.像素：显示器实际上是有一个一个的小像素点构成。不同的屏幕像素大小是不同的，像素越小的屏幕显示的就越清晰。</strong></p><p><strong>02.百分比：可以将属性值设置为相对于其父元素的百分比</strong></p><p><strong>03.em：是相对于自身元素的字体大小来计算的。<font color="blue">1em = 1font-size</font></strong></p><p><strong>04.rem：是相对于根元素(html)的字体大小来计算的</strong></p><p><em>em会根据字体的大小的改变而改变</em></p><h2 id="4-RGB值"><a href="#4-RGB值" class="headerlink" title="4.RGB值"></a>4.RGB值</h2><p><strong>01.通过三种颜色的不同浓度来调配颜色。R:RED G:GREEN B:BLUE</strong></p><p>每一种颜色的范围在0<del>255(0</del>100%)之间</p><p>语法</p><p><code>rgb{红色,绿色,蓝色}</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>02.REGA</strong></p><p>在rgb的基础上增加了a表示不透明度</p><p>A:Apacity  透明度</p><p>1表示完全不透明，.5表示半透明，0表示完全透明</p><p><code>rgb{红色,绿色,蓝色,.5}</code></p><p><strong>03.十六进制的rgb值</strong></p><p>-语法：#红色绿色蓝色</p><p>颜色浓度通过：00-ff表示</p><p><em>如果颜色一类的两位重复，可以简写</em></p><p>#aabbcc→#abc</p><p><strong>04.HSL值</strong></p><p>H:色相(0-360)</p><p>S:饱和度(0%-100%)</p><p>L:亮度(0%-100%)</p><h2 id="5-文档流"><a href="#5-文档流" class="headerlink" title="5.文档流"></a>5.文档流</h2><p>文档流(normal flow)</p><p>- &nbsp; 网页是一个多层的结构</p><p>- &nbsp; 通过css可以为每一层设置样式</p><p>- &nbsp;这些层中，最底下的一层成为文档流，文档里是网页的基础。我们所创建的元素默认都是在文档流中进行排列。</p><p><strong>对于我们来说，元素主要有两个状态：在文档流中&amp;不在文档流中（脱离文档流）</strong></p><p><strong>1. 元素在文档流中的特点</strong></p><ul><li><p>块元素(block)</p><ul><li>在页面中独占一行</li><li>默认宽度是父元素的全部宽度。</li><li>默认高度是子元素所占的高度</li></ul></li></ul><ul><li><p>行内元素(inline)</p><ul><li>不会独占页面中的一行，只占自身的大小</li><li>行内元素在页面中自左向右水平排列。如果一行之中容纳不小所有的行内元素，则元素会换到第二行继续自左向右排列</li><li>行内元素的默认宽度和高度都是被内容撑开</li></ul></li></ul><h2 id="6-盒子模型"><a href="#6-盒子模型" class="headerlink" title="6.盒子模型"></a>6.盒子模型</h2><p><strong>内容区(content)：</strong>元素中所有的子元素和文本内容都在内容去排列。内容区的大小由width和height两个属性来设置</p><p><strong>内边距(padding)</strong></p><p><strong>边框(border)：</strong>边框属于盒子的边缘</p><p><strong>外边距(margin)</strong></p><p><strong><font color="skyblue">类似于boder-width的属性：</font></strong></p><p><code>border-width:13px 10px 11px 15px;</code></p><ul><li>按照<strong>上 <font color="red">右</font> 下 <font color="red">左</font></strong>的顺序为边框设置宽度</li></ul><p><code>border-width:13px 10px 15px</code></p><ul><li>按照<strong>上 <font color="red">左右</font> 下</strong>的顺序为边框设置宽度</li></ul><p><code>border-width:13px 15px</code></p><ul><li>按照<strong>上下 <font color="red">左右</font></strong>的顺序为边框设置宽度</li></ul><h3 id="01-内边距"><a href="#01-内边距" class="headerlink" title="01. 内边距"></a>01. 内边距</h3><p><strong>padding</strong></p><p>内容区和边框之间的距离是内边距。</p><p>- 一共有四个方向的内边距</p><ul><li><p>padding-top</p></li><li><p>padding-right</p></li><li><p>padding-bottom</p></li><li><p>padding-left</p></li></ul><p><strong>内边距的设置会影响到盒子的大小</strong></p><blockquote><p>一个盒子的可见框大小，由<strong>内容区 内边距 边框</strong>共同决定</p></blockquote><p><strong><font size="5" color="red">So</font></strong>在计算盒子大小时，需要将这三个区域加到一起计算。</p><h3 id="02-外边距"><a href="#02-外边距" class="headerlink" title="02.外边距"></a>02.外边距</h3><p><strong>margin</strong></p><p>- 一共有四个方向的外边距</p><ul><li>margin-top</li></ul><p>上外边距，设置一个正值，元素会向下移动</p><ul><li>margin-right</li></ul><p>默认情况下设置此属性不会有任何效果。因为没有做浮动的话，块状元素独占一行。两个元素做完左浮动，设置一个正值，其右边的元素会向右移动。</p><ul><li>margin-bottom</li></ul><p>下外边距，设置一个正值，其下边的元素会向下移动。</p><ul><li>margin-left</li></ul><p>左外边距，设置一个正值，元素会向右移动</p><p><strong>外边距不会影响盒子可见框的大小.但是外边距会影响盒子的位置！</strong></p><p><strong><font size="5" color="red">由于</font></strong>元素在页面中是按照自左向右。自上向下排列。所以默认情况下如果我们设置的左和上外边距则会移动元素自身。而设置下和右外边距会移动其他元素</p><p><strong><font color="blue">一个元素在其父元素中，水平布局必须满足以下等式:</font></strong></p><p>margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度。</p><p>如果相加等式不成立，则成为过度约束，等式会自动调整。</p><p><strong><font size="6">调整的情况∨：</font></strong></p><blockquote><p>如果这七个值中没有为auto的情况，则浏览器会自动调整margin-right的值以使等式满足.如果宽度比父元素还要大，那么margin-right就会变成一个负值。</p></blockquote><blockquote><p>这七个值中有三个值可以设置为auto：width  margin-left  margin-right。如果某个值为auto，则会自动调整为auto的那个值以使等式成立。</p></blockquote><p><strong><font size="5" color="red">注</font>：width的值默认是auto</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box1&#123;</span><br><span class="line">border:2px solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2&#123;</span><br><span class="line">width:auto;</span><br><span class="line">height:200px;</span><br><span class="line">background-color:#bfa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class &#x3D; &quot;box1&quot;&gt;</span><br><span class="line">&lt;div class &#x3D; &quot;box2&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><em>那么此时浏览器会自动调整<font color="red">auto</font>的值为父元素内容区的宽度。</em></p><p><strong>I:如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大</strong></p><p><strong>II:如果将三个值都设置到auto，则外边距都是0，宽度最大。</strong></p><p><strong>III:如果给两个外边距设置auto，宽度设置固定值，则会将auto设置为相同的值。</strong></p><p><strong><font size="6" color="skyblue">故我们经常利用第三个特点来使一个元素水平居中。</font></strong></p><h3 id="03-垂直方向的布局"><a href="#03-垂直方向的布局" class="headerlink" title="03.垂直方向的布局"></a>03.垂直方向的布局</h3><p><strong>1. 父元素的高度如果不写，就会被子元素撑开。写了的话就该是多少就是多少。</strong></p><p><strong>2. 如果子元素的大小超过了父元素，则子元素会从父元素中溢出。溢出的部分没有占据空间</strong></p><blockquote><p>可以使用overflow属性来设置父元素中溢出的子元素。<strong><font color="green">父元素中设置</font></strong></p></blockquote><p><strong><font color="rgb(165, 42, 42)"> overflow可选值:</font></strong></p><p><code>visible</code>:默认值(子元素会从父元素溢出，从父元素的外部显示)</p><p><code>hidden</code>:隐藏。溢出的内容会被裁剪  不会显示</p><p><code>scroll</code>:生成两个滚动条。通过滚动条来查看完整的内容。</p><p><code>auto</code>：根据需要生成滚动条。需要哪个方向的才会有滚动条。</p><p><strong><font color="rgb(165, 42, 42)"> overflow-x:</font></strong></p><p>单独处理水平方向</p><p><strong><font color="rgb(165, 42, 42)"> overflow-y:</font></strong></p><p>单独处理垂直方向</p><h3 id="04-外边距的折叠-垂直外边距的重叠"><a href="#04-外边距的折叠-垂直外边距的重叠" class="headerlink" title="04.外边距的折叠(垂直外边距的重叠)"></a>04.外边距的折叠(垂直外边距的重叠)</h3><p><strong>相邻的垂直方向的外边距会发生重叠现象：</strong></p><p>两个条件</p><p><strong><font color="blue" size="4">1. 相邻的</font></strong></p><p><strong>所谓相邻指的是渲染之后的元素位置相邻，而不是dom结构上的相邻</strong></p><p><strong><font color="blue" size="4">2. 垂直方向的</font></strong></p><p>两种情况</p><p><strong><font color="blue" size="4">1. 兄弟元素</font></strong></p><blockquote><p>兄弟元素间的相邻垂直外边距会取两者之间的较大值(两者都是正值)</p></blockquote><blockquote><p>特殊情况：如果相邻的外边距一正一负，则取两者的和</p></blockquote><blockquote><p>如果相邻外边距都是负值，则取两者绝对值较大的。</p></blockquote><p><strong><font color="#greenb">兄弟元素之间的外边距重叠，对于开发是有利的，不需要进行处理。</font></strong></p><p><strong><font color="blue" size="4">2. 父子元素</font></strong></p><blockquote><p>父子元素之间的相邻外边距，子元素的会传递给父元素。(上外边距)</p></blockquote><p><strong>按照css规范，两个相邻的元素之间的margin值会共用较大的那一个，而如果没有上边框或上内间距，嵌套的元素之间和同级的元素一样满足使用这个规范的条件，父元素会拥有子元素一样的上外边距。</strong></p><p><strong><font color="#red">父子元素之间的外边距重叠会影响到页面的布局，需要进行处理。</font></strong></p><p>处理方案：</p><ul><li><p>为父元素设置边框</p></li><li><p>使父元素和子元素不相邻</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用padding属性不适用margin<font color="orange" size="4">OR</font>为父元素设置边框使它们父子两个的外边距不重合。</li></ul><h3 id="05-行内元素的盒模型"><a href="#05-行内元素的盒模型" class="headerlink" title="05.行内元素的盒模型"></a>05.行内元素的盒模型</h3><p><strong><font color="#red">行内元素不支持设置宽度和高度</font></strong></p><p><strong><font color="#red">行内元素可以设置padding/border/margin  但是垂直方向padding/border/margin不会影响页面的布局</font></strong></p><p><em>display属性：</em></p><p>可选值：</p><p> <strong>inline：</strong>将元素设置为行内元素</p><p><strong>block：</strong>将元素设置为块元素</p><p><strong>inline-block：</strong>将元素设置为行内块元素。即既可以设置宽高，又不会独占一行</p><p><strong>table：</strong>将元素设置为一个表格</p><p><strong>none：</strong>元素不在页面中显示。也不占位置</p><p><em>visibility属性：</em></p><p>可选值：</p><p><strong>visible：</strong>默认值  显示</p><p><strong>hidden：</strong>隐藏，但是还占据页面位置</p><h3 id="06-默认样式"><a href="#06-默认样式" class="headerlink" title="06.默认样式"></a>06.默认样式</h3><p><strong>通常情况下，浏览器都会为元素设置一些默认样式。默认样式的存在会影响到页面的布局。</strong></p><p><strong>通常情况下填写网页时必须要去除浏览器的默认样式</strong></p><p><strong><font color="#fba">去除所有元素的默认样式</font></strong></p><ol><li>简单写法：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此方法会有一些元素的默认样式无法去除</p></blockquote><ol start="2"><li>另一种写法是写一个共用的css表依次去除所有元素的默认样式，然后引入即可。</li></ol><h3 id="07-box-sizing"><a href="#07-box-sizing" class="headerlink" title="07.box-sizing"></a>07.box-sizing</h3><p><strong><font color="green" size="4"><i>默认情况下，盒子的可见框大小有内容区，内边距和边框共同决定。</i></font></strong></p><p><strong>box-sizing属性：</strong>用来设置盒子尺寸的计算方式.(设置width和height的作用)</p><p>可选值：</p><p>content-box：默认值，宽度和高度用来设置内容区的大小</p><p>border-box：宽度和高度用来设置整个盒子的可见框大小。</p><p>简单来说：设置的height和weight的属性：如果box-sizing的值为content-box，那么height和weight的值只设置给content，不包括border和padding。如果box-sizing的值为border-box，那么height和weight的值包含了border和padding还有内容区</p><h3 id="08-轮廓阴影和圆角"><a href="#08-轮廓阴影和圆角" class="headerlink" title="08.轮廓阴影和圆角"></a>08.轮廓阴影和圆角</h3><p><strong>1. outline</strong></p><p>用来设置元素的轮廓线。用法和border一样。</p><p>和边框的不同点是outline不会影响到可见框的大小和页面的布局。像是独立的一样。可用在鼠标移入后的样式。</p><p><strong>2. box-shadow</strong></p><p>设置元素的阴影效果，不会影响页面的布局</p><p>box-shadow:10px 20px 10px black;</p><ul><li><p>10px:阴影的水平偏移量(正右负左)</p></li><li><p>20px：阴影的垂直偏移量(正下负上)</p></li><li><p>10px：阴影的模糊半径。（值越大，模糊效果越大）</p></li><li><p>black：阴影的颜色</p></li></ul><div style="width:100px;height:100px;background-color:orange;box-shadow:10px 20px 10px rgba(0,0,0,.3);margin-bottom:30px;"></div><p><strong>2. border-radius</strong></p><p>设置不同方向上圆角的半径大小。</p><ul><li><p>border-top-left-radius:50px 100px;</p></li><li><p>border-top-right-radius:50px 100px;</p></li><li><p>border-bottom-left-radius:50px 100px;</p></li><li><p>border-bottom-right-radius:50px 100px;</p></li></ul><p>50px:水平方向半径</p><p>100px：垂直方向半径</p><p><strong>border-radius可分别指定四个值/三个值/二个值</strong></p><p>四个值：上左  上右  下右  下左</p><p>三个值：上左  上右/下左  下右</p><p>二个值： 上左/下右  上右/下左</p><p><code>border-radius： 10px / 20px;</code> 代表四个角设置两个方向的圆的半径</p><p><strong>将元素设置为一个圆形。</strong></p><p><code>border-radius:50%;</code></p><div style="width:100px;height:100px;background-color:green;border-radius:50%;"></div><h2 id="6-浮动"><a href="#6-浮动" class="headerlink" title="6.浮动"></a>6.浮动</h2><p>使用float属性来设置元素的浮动。</p><p><strong>三个可选值：</strong></p><blockquote><p>-</p></blockquote><p>none：默认值  没有浮动</p><p>left：左浮动</p><p>right：右浮动</p><p><em>元素设置浮动以后，水平布局的等式不需要强制成立</em></p><p><strong>浮动feature：</strong></p><p><strong><font color="red" size="3">* 元素设置浮动以后，会完全从文档流中脱离。不再占用文档流的位置，所以元素下方的还在文档流中的元素会自动向上移动</font></strong></p><p><strong><font color="red" size="3">* 设置浮动以后，元素会向父元素的左侧或右侧浮动</font></strong></p><p><strong><font color="red" size="3">* 浮动元素默认不会从父元素中移出</font></strong></p><p><strong><font color="red" size="3">* 浮动元素向左或向右浮动时，不会超过它前边的其他浮动元素</font></strong></p><p><strong><font color="red" size="3">* 如果浮动元素的上一个块元素没有浮动，则浮动元素无法上移</font></strong></p><p><strong><font color="red" size="3">* 浮动元素与它上一个兄弟浮动元素上外边距并齐</font></strong></p><h3 id="01-浮动的特点"><a href="#01-浮动的特点" class="headerlink" title="01. 浮动的特点"></a>01. 浮动的特点</h3><ol><li><p>浮动元素不会盖住文字，文字会自动环绕在浮动元素周围。所以我们可以利用浮动来设置文字环绕图片效果。（但是文字所在的元素是会盖住的。只是不会盖住文字）</p></li><li><p>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发生变化</p><p> <strong>脱离文档流(不是浮动独有)的特点：</strong></p><p> <strong><font color="green">对于块元素：</font></strong></p><ul><li><p>a:块元素不再独占页面的一行</p></li><li><p>b:块元素的宽度和高度默认都被内容撑开</p></li></ul><p> <strong><font color="green">对于行内元素：</font></strong></p><ul><li>a:行内元素脱离文档流以后会变成块元素，特点和上面块元素一样。</li></ul></li></ol><p>   即 <strong>脱离文档流以后 ，不需要再区分行内元素和块元素了</strong></p><h3 id="02-高度塌陷和BFC"><a href="#02-高度塌陷和BFC" class="headerlink" title="02. 高度塌陷和BFC"></a>02. 高度塌陷和BFC</h3><p><strong>在浮动布局中，父元素的高度默认是被子元素撑开的。当子元素浮动以后，其会完全脱离文档流，子元素从文档流中脱离将会无法撑起父元素的高度，导致父元素的高度丢失。父元素的高度丢失以后，其下的元素就会上移，导致页面布局混乱。</strong></p><p>所以高度塌陷是浮动布局中比较常见的一种问题，必须要处理。</p><p><strong>BFC(Block Formatting Context)块级格式化环境</strong>：</p><blockquote><p>BFC是css中的一个隐含的属性，可以为一个元素开启BFC，开启BFC以后，该元素会变成一个独立的布局区域</p></blockquote><p><strong><font color="blue">元素开启BFC的特点： </font></strong></p><ul><li><p><strong>开启BFC的元素不会被浮动元素所覆盖</strong></p></li><li><p><strong>开启BFC的元素子元素和父元素的外边距不会重叠</strong></p></li><li><p><strong>开启BFC的元素可以包含浮动的子元素</strong></p></li></ul><p><strong><font color="blue">可以通过一些特殊的方式来开启元素的BFC： </font></strong></p><ul><li><p><strong>设置元素的浮动(不推荐)</strong></p><p>  比如为父元素设置浮动，那么父元素就不会因为子元素浮动而塌陷</p></li><li><p><strong>将元素设置为行内块元素(不推荐)</strong></p><p>  display：inline-block</p></li><li><p><strong>将元素的overflow设置为一个非visible的值</strong></p><p>  常用方式， 为元素设置overflow hidden开启BFC  以使其可以包含浮动元素</p></li></ul><h3 id="03-clear"><a href="#03-clear" class="headerlink" title="03. clear"></a>03. clear</h3><p><strong>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响。</strong></p><p><strong><font color="orange">clear： </font></strong></p><p>left：清除左侧浮动元素对当前元素的影响</p><p>right：清除右侧浮动元素对当前元素的影响。</p><p>both：清除两侧中最大影响的那侧</p><blockquote><p>原理：设置清除浮动以后，浏览器会自动为元素添加一个上<br>外边距，以使其位置不受其他元素的影响</p></blockquote><h3 id="04-使用after伪类解决高度塌陷"><a href="#04-使用after伪类解决高度塌陷" class="headerlink" title="04. 使用after伪类解决高度塌陷"></a>04. 使用after伪类解决高度塌陷</h3><p>根据clear清除浮动的特性(设置清除浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响),我们可以为浮动元素的after伪类设置clear属性清除浮动，从而达到不使父元素因子元素的浮动而导致塌陷。</p><p><strong>即：浮动元素box1：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原理是在父元素中的最后一个子元素做出clear清除浮动的操作。底层执行最后一个元素的<code>margin-top：父元素的高度</code>。外边距相关问题折叠应该已经处理了。</p></blockquote><p><strong><font color="#8B0000" size="5">综上：解决外边距重叠+高度塌陷</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">display:table;//解决垂直方向外边距重叠。即在父元素和第一个子元素之间加了一个元素，使之不符合外边距重叠的条件。使用此属性不会有多余的高度</span><br><span class="line">clear:both;//解决高度塌陷。即清除最后一个子元素的浮动。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-导航条练习"><a href="#7-导航条练习" class="headerlink" title="7.导航条练习"></a>7.导航条练习</h2><p><strong>1. line-height：将文字在父元素垂直居中，同时将该块元素的高度撑开与行高一致</strong></p><blockquote><p>设置行高属性，即设置该元素内文本行的高度，文本会上下居中于总行高。如果行高与该元素高度相同，那么文字会垂直居中于该元素内（前提是该元素的高度比文本字号高度要高。</p></blockquote><p>如下案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-class">.a</span>&#123;</span></span><br><span class="line">          height: 100px;</span><br><span class="line">          width: 100px;</span><br><span class="line">          line-height: 10px;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-class">.c</span>&#123;</span></span><br><span class="line">         line-height: 100px;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>ddddddddddddddddd<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么此时文本ddd…的行高将会为100px，但是a标签作为一个行内标签，其高度只会随着文本的大小而改变，故此时可以把a标签设置为块元素，那么行高将会撑开a标签的高度，能点击到超链接的范围也就加大了。</p><p><strong>2. padding：此标签会撑开自身的可视大小，如果父元素设置了固定的宽高，padding的大小大于父元素的宽高，那么子块就可能会跑出父元素</strong></p><p><strong><font color="red" size="4">由于文本会环绕在浮动元素，所以如果某元素在浮动元素周围，那么这个元素的文本的位置可能会有些奇怪。</font></strong></p><p><img src="/2021/03/19/02-css/QQ%E6%88%AA%E5%9B%BE20210419003559.png" alt></p><p><img src="/2021/03/19/02-css/QQ%E6%88%AA%E5%9B%BE20210419003516.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-继承&quot;&gt;&lt;a href=&quot;#1-继承&quot; class=&quot;headerlink&quot; title=&quot;1. 继承&quot;&gt;&lt;/a&gt;1. 继承&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;如果我们为一个元素设置了它的样式，此样式也会应用到它的后代元素–发生在祖先和后代元素之间&lt;/strong
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>01_css</title>
    <link href="https://planeswalker1205.github.io/2021/03/01/01-css/"/>
    <id>https://planeswalker1205.github.io/2021/03/01/01-css/</id>
    <published>2021-03-01T15:03:09.000Z</published>
    <updated>2021-04-24T13:54:32.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>css：层叠样式表：网页上其实是一个多层的结构。通过css可以为网页的每一层设置样式。而最终，我们只能看到的网页的最上边一层。</p><p>使用css来修改元素的样式：</p><h2 id="01-内联样式-行内样式"><a href="#01-内联样式-行内样式" class="headerlink" title="01_内联样式/行内样式"></a>01_内联样式/行内样式</h2><p><code>&lt;a style = &quot;color:red; font-size:13px;&quot;&gt;红色&lt;/a&gt;</code></p><p>缺点:不好维护<br>注意:开发时绝对不要使用样式</p><h2 id="02-style标签-内部样式表"><a href="#02-style标签-内部样式表" class="headerlink" title="02_style标签-内部样式表"></a>02_style标签-内部样式表</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p><strong>简介:将样式编写到head的style标签里，然后通过css的选择器来选中元素并为其设置各种格式，可以同时为多个标签设置样式。</strong></p><p>内部样式表更加方便对样式进行复用。</p><p>缺点:只能对一个网页起作用。不能跨页面复用。</p><h2 id="03-外部样式表"><a href="#03-外部样式表" class="headerlink" title="03_外部样式表"></a>03_外部样式表</h2><p>编写到外部的css文件中。然后通过link标签引入外部样式表。</p><p><strong>开发时使用</strong></p><p>将样式编写到外部css样式表，可以使用到浏览器的缓存机制。从而加快网页的加载速度，提高用户体验。</p><h1 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h1><h2 id="01-常用选择器"><a href="#01-常用选择器" class="headerlink" title="01_常用选择器"></a>01_常用选择器</h2><p><strong>1. 元素选择器</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2. ID选择器</strong></p><p>作用:根据元素的ID属性选择一个元素。</p><p><strong>ID不能重复</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#idx1</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>3. 类选择器</strong></p><p>class：是一个标签的属性，和id类似，不过可以重复使用。</p><p>可以通过class对元素分组。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cls1</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以同时为一个元素指定多个class值。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"blue abc"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即既可以通过blue选中a标签，也可以通过abc选中标签。多个class值使用空格隔开。</p><p><strong>4. 通配选择器</strong></p><p>选中页面的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="02-复合选择器"><a href="#02-复合选择器" class="headerlink" title="02_复合选择器"></a>02_复合选择器</h2><p><strong>1.交集选择器（同时满足）</strong></p><p>如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"red"</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"red"</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需求:将class值为red的div元素字体设置为30px。</p><p>作用:选择同时符合多个条件的元素。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器1选择器2选择器3选择器<span class="selector-tag">n</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:如果交集选择器中有元素选择器，必须元素选择器开头。因为元素选择器没有前缀，放后面不好区分。</strong></p><p>也可以：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.c</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.并集选择器/选择器分组</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>行内测试<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：同时选择多个选择器对应的元素。<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-class">.cls1</span>,<span class="selector-id">#n</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="03-关系选择器"><a href="#03-关系选择器" class="headerlink" title="03_关系选择器"></a>03_关系选择器</h2><p><strong>父元素：直接包含子元素的元素叫做父元素</strong></p><p><strong>子元素:直接被父元素包含的元素是子元素</strong></p><p><strong>祖先元素：直接或间接包含后代元素的元素叫做祖先元素。（一个元素的父元素也叫它的子元素）</strong></p><p><strong>后代元素：直接或间接被祖先元素包含的元素叫做后代元素。（子元素也是后代元素）</strong></p><p><strong>兄弟元素：拥有相同父元素的是兄弟元素。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">我是div</span><br><span class="line">&lt;p&gt;我是div中的p</span><br><span class="line">&lt;span&gt;我是p中的span&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;P&gt;</span><br><span class="line">&lt;span&gt;我是div中的span&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>1. 子元素选择器</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 后代元素选择器</strong></p><p>作用:选择指定元素内的所有指定后代元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">祖先 后代&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div内所有的span都会被选中</p><p><strong>3. 兄弟元素选择器</strong></p><p><strong><font color="skyblue">选择下一个兄弟</font></strong></p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">前一个 + 后一个</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择p标签<strong>紧挨着的</strong>span元素</p><p><strong>如果没有紧挨着也不会选中</strong></p><p><strong><font color="skyblue">选择下面所有兄弟</font></strong></p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">兄 ~ 弟&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即p标签后所有的span元素。</p><h2 id="04-属性选择器"><a href="#04-属性选择器" class="headerlink" title="04_属性选择器"></a>04_属性选择器</h2><p><strong>1. 选择含有指定属性的元素</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div[属性]&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span> = <span class="string">"a"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span> = <span class="string">"b"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span> = <span class="string">"c"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 选择含有指定属性和指定属性值的元素</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[属性名&#x3D;属性值]</span><br></pre></td></tr></table></figure><p><strong><font color="skyblue">选择属性值以指定值开头的元素</font></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[属性名^&#x3D;属性值]</span><br></pre></td></tr></table></figure><p><strong><font color="skyblue">选择属性值以指定值结尾的元素</font></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[属性名$&#x3D;属性值]</span><br></pre></td></tr></table></figure><p><strong><font color="skyblue">选择属性值含有某值的元素</font></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[属性名*&#x3D;属性值]</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title=a]</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="05-伪类选择器"><a href="#05-伪类选择器" class="headerlink" title="05_伪类选择器"></a>05_伪类选择器</h2><h3 id="1-不存在的类-特殊的类"><a href="#1-不存在的类-特殊的类" class="headerlink" title="1. 不存在的类/特殊的类"></a>1. 不存在的类/特殊的类</h3><p>用来描述一个元素的特殊状态。如：第一个子元素、被点击的元素、鼠标移入的元素、</p><p><strong>伪类一般情况下都是使用  <font color="orange">:</font>  开头</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>d<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>e<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><font color="red">父元素下的第一个子元素且标签为li</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">父元素下的最后一个子元素且标签为li</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">父元素下的第n子元素且标签为li</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//选择第二个</span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果第一个子元素为span则不满足，不会发生变化。即既要满足li标签，又要满足为第n个子元素。</p><p><strong><font color="Chocolate">以上这些伪类都是根据所有的子元素进行排序。</font></strong></p><p><strong><font color="blue">父元素下标签为li的第一个子元素</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-of-type</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="blue">父元素下标签为li的最后一个子元素</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="blue">父元素下标签为li的第n个子元素</font></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//第二个</span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="DarkCyan">以上这些伪类都是根据子元素的类型进行排序。</font></strong></p><h3 id="2-否定伪类"><a href="#2-否定伪类" class="headerlink" title="2. 否定伪类"></a>2. 否定伪类</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:not()</span></span><br></pre></td></tr></table></figure><p>将符合条件的元素从选择器中去除。</p><p>选择ul下的所有li除了第三个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:nth-of-type(3))</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-超链接的伪类"><a href="#2-超链接的伪类" class="headerlink" title="2. 超链接的伪类"></a>2. 超链接的伪类</h3><p><strong>:link  表示正常的链接(访问每访问的链接都叫正常链接)</strong></p><p><strong>:visited  表示访问过的链接。隐私问题此伪类只能改变颜色。用的较少</strong></p><p><strong>:hover  表示鼠标移入的样式</strong></p><p><strong>:active  表示鼠标点击的样式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="06-伪元素选择器"><a href="#06-伪元素选择器" class="headerlink" title="06_伪元素选择器"></a>06_伪元素选择器</h2><p>表示页面中一些特殊的并不真实存在的元素。（特殊的位置）</p><p>语法：</p><p><strong>::first-letter</strong>:表示第一个字母</p><p><strong>::first-line</strong>:表示第一行</p><p><strong>::selection</strong>:表示选中的元素</p><p><strong>::before</strong>:元素的开始位置（必须结合content属性使用）</p><p><strong>::after</strong>:元素的最后位置（必须结合content属性使用）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">//表示P标签的第一个字母设置大小为20px</span><br><span class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;css：层叠样式表：网页上其实是一个多层的结构。通过css可以为网页的每一层设置样式。而最终，我们只能看到的网页的最上边
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://planeswalker1205.github.io/tags/css/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>01_html</title>
    <link href="https://planeswalker1205.github.io/2021/01/03/01-html/"/>
    <id>https://planeswalker1205.github.io/2021/01/03/01-html/</id>
    <published>2021-01-03T08:51:24.000Z</published>
    <updated>2021-04-01T14:47:22.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标签"><a href="#1-标签" class="headerlink" title="1_标签"></a>1_标签</h1><h2 id="01-meta标签"><a href="#01-meta标签" class="headerlink" title="01_meta标签"></a>01_meta标签</h2><ol><li><p>charset:指定网页的字符集</p></li><li><p>name:指定的数据名称</p></li><li><p>content:指定的数据的内容</p></li></ol><blockquote><p>meta主要用于设置网页中的一些元数据，元数据不是给用户看</p></blockquote><p><code>&lt;meta name = &quot;keywords&quot; content=&quot;HTML5,前端,CSS3&quot;&gt;</code></p><p><strong>keywords:表示网站的关键字，可以同时指定多个关键字，关键字之间使用,隔开。</strong></p><p><code>&lt;meta name = &quot;description&quot; content = &quot;这是一个非常不错的网站&quot;&gt;</code></p><p><strong>description:用于指定网站的描述</strong></p><p><strong>显示在搜索引擎的搜索结果中</strong></p><p><code>&lt;title&gt;标题内容&lt;/title&gt;</code></p><p><strong>title标签的内容会作为搜索结果的超链接上的名字显示</strong></p><p><code>&lt;meta http-equiv=&quot;refresh&quot; content = &quot;3;url=https://www.baidu.com&quot;&gt;</code></p><p><strong>将页面重定向到另一个网站。比如3秒后跳转到百度页面。</strong></p><h2 id="02-h1标签"><a href="#02-h1标签" class="headerlink" title="02_h1标签"></a>02_h1标签</h2><p><strong>网页中通常只存在一个。重要等级仅次于title标签</strong></p><p>重要等径：h1&gt;h2?h3&gt;h4&gt;h5&gt;h6</p><blockquote><p>一般情况下标题标签只使用h1<del>h3。h4</del>h6很少用。</p></blockquote><h2 id="03-p标签"><a href="#03-p标签" class="headerlink" title="03_p标签"></a>03_p标签</h2><p><strong>表示页面中的一个段落、块元素</strong></p><p><i><font color="red">注：p标签里不能放置块元素</font></i></p><h2 id="04-em标签"><a href="#04-em标签" class="headerlink" title="04_em标签"></a>04_em标签</h2><p>行内标签</p><p><strong>用于表示语音语调的加重(斜体)</strong></p><h2 id="05-blockquote-q标签"><a href="#05-blockquote-q标签" class="headerlink" title="05_blockquote/q标签"></a>05_blockquote/q标签</h2><p>blockquote</p><p><strong>表示一个长引用。块元素</strong></p><p>q</p><p><strong>表示一个短引用。行内元素</strong></p><h1 id="2-元素"><a href="#2-元素" class="headerlink" title="2_元素"></a>2_元素</h1><h2 id="01-块元素-行内元素"><a href="#01-块元素-行内元素" class="headerlink" title="01_块元素/行内元素"></a>01_块元素/行内元素</h2><p><strong>块元素:在网页中一般通过块元素来对页面进行布局。</strong></p><p><strong>行内元素：行内元素主要用来包裹文字</strong></p><blockquote><p>一般情况下会在块元素中放行内元素。不会在行内元素中放置块元素</p></blockquote><p><em>p元素中不能放置任何块元素</em></p><p><strong>浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正。</strong></p><p>比如： </p><ol><li><p>标签写在了根元素的外部。</p></li><li><p>p元素中嵌套了块元素</p></li><li><p>根元素中出现了出head和body以外的子元素</p></li></ol><p>查看内存中的代码就是<em>F12→elements</em></p><h2 id="02-a标签"><a href="#02-a标签" class="headerlink" title="02_a标签"></a>02_a标签</h2><h3 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a>相对路径：</h3><p>当我们要跳转到服务器内的地址时，就需要用到相对路劲。一般相对路径都会使用<code>./</code>或者<code>../</code>开头。当所跳转的页面在当前文件所在目录时可省略…</p><p><code>./</code>：表示当前文件所在目录。即当前你所在写代码的文件的目录<br><code>../</code>：表示当前文件所在目录的上一级目录</p><p>绝对路径：从根目录开始</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>_self:在当前页面打开地址页</p><p>_blank:在新的 页面打开地址页</p><p>#:回到当前页面的顶部。开发中也可以使用#作为href属性的占位符使用。</p><blockquote><p>href的占位符有时候我们可能需要它没有功能实现，此时可以使用<code>&lt;a href = &quot;javascript:;&quot;&gt;</code>.这样点击超链接什么都不会发生</p></blockquote><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>每一个标签都可以添加一个id属性，且id是唯一的</p><p>可以在a标签的href中写入标签的id值即可跳转到页面对应位置</p><h2 id="03-img标签"><a href="#03-img标签" class="headerlink" title="03_img标签"></a>03_img标签</h2><p>替换元素。即在页面上显示的是图片。具有块元素和行内元素的两种元素的特点</p><p><strong>属性</strong></p><p>src:路径</p><p>alt:描述。默认不会显示，有些浏览器在图片加载不出时会显示。搜搜引擎也会根据alt中的内容识别图片。如果不写alt属性则不会被搜索引擎收录</p><p>width/height:如果只改变其中一个属性，则另外一个会等比例缩放。(一般在PC端要多大图片就对图片裁剪多大。移动端则经常要缩放。)</p><p><strong>图片格式</strong></p><p>jpeg(jpg):支持的颜色比较丰富，不支持透明效果，不支持动图。————一般用来显示照片</p><p>gif:支持的颜色比较少，支持简单透明，支持动图。</p><p>png:支持的颜色丰富，支持复杂透明，不支持动图。————颜色丰富，复杂透明的图片（专为网页而生。）</p><p>webp:谷歌新推出的专为表示网页中的图片的一种格式.————具备其他格式的所有优点，文件还特别小。但是兼容性不好</p><p>base64：将图片使用base64进行编码。这样可以将图片转换成字符，通过字符的方式引入图片。<strong>一般是一些需要和网页一起加载的图片才会使用base64</strong>(百度base64转换即可)</p><h1 id="3-内联框架"><a href="#3-内联框架" class="headerlink" title="3_内联框架"></a>3_内联框架</h1><p><strong>内联框架</strong></p><p>用于向当前页面中引入一个其他页面</p><h2 id="01-iframe"><a href="#01-iframe" class="headerlink" title="01_iframe"></a>01_iframe</h2><p>src:指定要引入的网页的路径</p><p>frameborder：内联框架的边框——0/1</p><p>用的不多做了解</p><h1 id="4-音视频播放"><a href="#4-音视频播放" class="headerlink" title="4_音视频播放"></a>4_音视频播放</h1><h2 id="01-audio"><a href="#01-audio" class="headerlink" title="01_audio"></a>01_audio</h2><p>用来向页面引入一个外部的音频文件。默认不允许用户控制播放停止。（IE8及以下不支持）</p><p>controls：是否允许用户控制音频</p><p>autoplay：音频文件是否自动播放。不过即使加上这个属性，大部分浏览器也不会自动播放</p><p>loop：是否循环播放</p><p>除了src可以指定外，还可以通过source来指定文件</p><p><code>&lt;audio src = &#39;&#39;&gt;&lt;/audio&gt;</code> == <code>&lt;audio&gt;&lt;source src = &#39;&#39;&gt;&lt;/source&gt;&lt;/audio&gt;</code></p><p>而source指定文件的写法可以友好的提示当前浏览器是否支持audio标签</p><p><code>&lt;audio&gt;对不起，浏览器不支持！&lt;source src = &#39;&#39;&gt;&lt;/source&gt;&lt;/audio&gt;</code></p><p>同时也可以指定多个source标签。浏览器会从前往后找到可以使用的第一个音频格式。</p><h2 id="02-embed"><a href="#02-embed" class="headerlink" title="02_embed"></a>02_embed</h2><p>音频标签。基本上浏览器都可以支持。不建议单独使用。可以用以上方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span>对不起，浏览器不支持！</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span> = <span class="string">'/audio.mp3'</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span> = <span class="string">'/audio.ogg'</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span> = <span class="string">'/audio.mp3'</span> <span class="attr">type</span> = <span class="string">'audio/mp3'</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样如果浏览器不支持source的话就会找到embed标签</p><h2 id="03-video"><a href="#03-video" class="headerlink" title="03_video"></a>03_video</h2><p>向页面引入一个视频文件</p><p>使用方式基本上和audio一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-标签&quot;&gt;&lt;a href=&quot;#1-标签&quot; class=&quot;headerlink&quot; title=&quot;1_标签&quot;&gt;&lt;/a&gt;1_标签&lt;/h1&gt;&lt;h2 id=&quot;01-meta标签&quot;&gt;&lt;a href=&quot;#01-meta标签&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
      <category term="web学习" scheme="https://planeswalker1205.github.io/tags/web%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vscode" scheme="https://planeswalker1205.github.io/tags/vscode/"/>
    
      <category term="html" scheme="https://planeswalker1205.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>图结构</title>
    <link href="https://planeswalker1205.github.io/2020/11/12/%E5%9B%BE%E7%BB%93%E6%9E%84/"/>
    <id>https://planeswalker1205.github.io/2020/11/12/%E5%9B%BE%E7%BB%93%E6%9E%84/</id>
    <published>2020-11-12T11:06:34.000Z</published>
    <updated>2020-11-12T12:05:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="/2020/11/12/%E5%9B%BE%E7%BB%93%E6%9E%84/pic-one.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> picStruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">verTex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">verTex</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"verTex&#123;"</span> +</span><br><span class="line">                <span class="string">"value='"</span> + value + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> picStruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">graph</span> </span>&#123;</span><br><span class="line">    <span class="comment">//顶点的数组</span></span><br><span class="line">    <span class="keyword">private</span> verTex[] vertex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] adjMat;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">graph</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        vertex = <span class="keyword">new</span> verTex[size];</span><br><span class="line">        adjMat = <span class="keyword">new</span> <span class="keyword">int</span>[size][size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向图中加一个顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addVerTex</span><span class="params">(verTex v)</span></span>&#123;</span><br><span class="line">        vertex[currentSize++] = v;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(String v1,String v2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找出两个顶点的下标</span></span><br><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;vertex.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vertex[i].getValue().equals(v1))&#123;</span><br><span class="line"></span><br><span class="line">                index1 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;vertex.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vertex[i].getValue().equals(v2))&#123;</span><br><span class="line"></span><br><span class="line">                index2 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        adjMat[index1][index2] = <span class="number">1</span>;</span><br><span class="line">        adjMat[index2][index1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> picStruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testGraph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        verTex v1 = <span class="keyword">new</span> verTex(<span class="string">"A"</span>);</span><br><span class="line">        verTex v2 = <span class="keyword">new</span> verTex(<span class="string">"B"</span>);</span><br><span class="line">        verTex v3 = <span class="keyword">new</span> verTex(<span class="string">"C"</span>);</span><br><span class="line">        verTex v4 = <span class="keyword">new</span> verTex(<span class="string">"D"</span>);</span><br><span class="line">        verTex v5 = <span class="keyword">new</span> verTex(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line">        graph g = <span class="keyword">new</span> graph(<span class="number">5</span>);</span><br><span class="line">        g.addVerTex(v1);</span><br><span class="line">        g.addVerTex(v2);</span><br><span class="line">        g.addVerTex(v3);</span><br><span class="line">        g.addVerTex(v4);</span><br><span class="line">        g.addVerTex(v5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加边</span></span><br><span class="line"></span><br><span class="line">        g.addEdge(<span class="string">"A"</span>,<span class="string">"C"</span>);</span><br><span class="line">        g.addEdge(<span class="string">"B"</span>,<span class="string">"C"</span>);</span><br><span class="line">        g.addEdge(<span class="string">"A"</span>,<span class="string">"B"</span>);</span><br><span class="line">        g.addEdge(<span class="string">"B"</span>,<span class="string">"D"</span>);</span><br><span class="line">        g.addEdge(<span class="string">"B"</span>,<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] a:g.adjMat)&#123;</span><br><span class="line">            System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/12/%E5%9B%BE%E7%BB%93%E6%9E%84/graph=one.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图结构&quot;&gt;&lt;a href=&quot;#图结构&quot; class=&quot;headerlink&quot; title=&quot;图结构&quot;&gt;&lt;/a&gt;图结构&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
    
      <category term="数据结构" scheme="https://planeswalker1205.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图结构" scheme="https://planeswalker1205.github.io/tags/%E5%9B%BE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="https://planeswalker1205.github.io/2020/11/12/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>https://planeswalker1205.github.io/2020/11/12/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2020-11-12T07:25:29.000Z</published>
    <updated>2020-11-12T11:15:04.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>（计算简单；分布均匀）</p><p><strong>直接定址法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">studentInfo</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 散列函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashcode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hasnTable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> studentInfo[] data = <span class="keyword">new</span> studentInfo[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向散列表中添加一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(studentInfo stuInfo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用散列函数获取存储位置</span></span><br><span class="line">        <span class="keyword">int</span> index = stuInfo.hashcode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        data[index] = stuInfo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> studentInfo <span class="title">get</span><span class="params">(studentInfo sInfo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data[sInfo.hashcode()];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hashTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        studentInfo s1 = <span class="keyword">new</span> studentInfo(<span class="number">16</span>,<span class="number">3</span>);</span><br><span class="line">        studentInfo s2 = <span class="keyword">new</span> studentInfo(<span class="number">17</span>,<span class="number">11</span>);</span><br><span class="line">        studentInfo s3 = <span class="keyword">new</span> studentInfo(<span class="number">18</span>,<span class="number">23</span>);</span><br><span class="line">        studentInfo s4 = <span class="keyword">new</span> studentInfo(<span class="number">19</span>,<span class="number">24</span>);</span><br><span class="line">        studentInfo s5 = <span class="keyword">new</span> studentInfo(<span class="number">20</span>,<span class="number">9</span>);</span><br><span class="line">        hasnTable h1 = <span class="keyword">new</span> hasnTable();</span><br><span class="line">        h1.put(s1);</span><br><span class="line">        h1.put(s2);</span><br><span class="line">        h1.put(s3);</span><br><span class="line">        h1.put(s4);</span><br><span class="line">        h1.put(s5);</span><br><span class="line"></span><br><span class="line">        studentInfo newInfo = h1.get(s1);</span><br><span class="line"></span><br><span class="line">        System.out.println(newInfo.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数字分析法</strong></p><p><strong>平方取中法</strong></p><p><strong>取余法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 散列函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashcode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>随机数法</strong></p><h2 id="散列冲突的解决方案"><a href="#散列冲突的解决方案" class="headerlink" title="散列冲突的解决方案"></a>散列冲突的解决方案</h2><p><strong>开放地址法</strong></p><p>线性探测法</p><p>二次探测法</p><p>再哈希法</p><p><strong>链地址法</strong></p><p>相当于每一个节点存储的是一个链表，可以无限增加</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h1&gt;&lt;h2 id=&quot;散列函数&quot;&gt;&lt;a href=&quot;#散列函数&quot; class=&quot;headerlink&quot; title=&quot;散列函数&quot;&gt;&lt;/a&gt;散列函
      
    
    </summary>
    
    
    
      <category term="数据结构" scheme="https://planeswalker1205.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希" scheme="https://planeswalker1205.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="散列" scheme="https://planeswalker1205.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>树结构</title>
    <link href="https://planeswalker1205.github.io/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    <id>https://planeswalker1205.github.io/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/</id>
    <published>2020-10-31T07:21:20.000Z</published>
    <updated>2020-11-12T07:00:31.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li>任何一个节点的子节点的数量不超过2</li></ol><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/ttree-one.png" alt></p><ol start="2"><li><p>二叉树的子节点分为左节点和右节点(左右节点不同，二叉树不同)</p></li><li><p><strong>满二叉树</strong>:所有叶子节点都在最后一层（叶子节点：即没有子节点的节点）。而且节点的总数为2^n-1(n代表树的高度，即最大层。如2层则节点总数为3个)</p></li></ol><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/fullBinaryTree.png" alt></p><ol start="4"><li><strong>完全二叉树</strong>:所有叶子节点都在最后一层或倒数第二层且<font color="red" style="font-weight:bold;">最后一层的叶子节点在左边连续。倒数第二层的叶子节点在右边连续</font></li></ol><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/completeBinaryTree.png" alt></p><h3 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h3><p><strong>树的类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    treeNode tNode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settNode</span><span class="params">(treeNode tNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tNode = tNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> treeNode <span class="title">gettNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>节点的类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">//节点的左子节点</span></span><br><span class="line">    treeNode leftNode;</span><br><span class="line">    <span class="comment">//节点的右子节点</span></span><br><span class="line">    treeNode rightNode;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(treeNode leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(treeNode rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一棵树</span></span><br><span class="line">        binaryTree binTree = <span class="keyword">new</span> binaryTree();</span><br><span class="line">        <span class="comment">//创建根节点</span></span><br><span class="line">        treeNode tNode = <span class="keyword">new</span> treeNode(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//根节点连接数</span></span><br><span class="line">        binTree.settNode(tNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根节点的左子节点</span></span><br><span class="line">        treeNode leftNode = <span class="keyword">new</span> treeNode(<span class="number">2</span>);</span><br><span class="line">        tNode.setLeftNode(leftNode);</span><br><span class="line">        <span class="comment">//根节点的右子节点</span></span><br><span class="line">        treeNode rightNode = <span class="keyword">new</span> treeNode(<span class="number">3</span>);</span><br><span class="line">        tNode.setRightNode(rightNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><p><strong>前序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一棵树</span></span><br><span class="line">        binaryTree binTree = <span class="keyword">new</span> binaryTree();</span><br><span class="line">        <span class="comment">//创建根节点</span></span><br><span class="line">        treeNode tNode = <span class="keyword">new</span> treeNode(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//根节点连接数</span></span><br><span class="line">        binTree.settNode(tNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根节点的左子节点</span></span><br><span class="line">        treeNode leftNode = <span class="keyword">new</span> treeNode(<span class="number">2</span>);</span><br><span class="line">        tNode.setLeftNode(leftNode);</span><br><span class="line">        <span class="comment">//根节点的右子节点</span></span><br><span class="line">        treeNode rightNode = <span class="keyword">new</span> treeNode(<span class="number">3</span>);</span><br><span class="line">        tNode.setRightNode(rightNode);</span><br><span class="line"></span><br><span class="line">        leftNode.setLeftNode(<span class="keyword">new</span> treeNode(<span class="number">4</span>));</span><br><span class="line">        leftNode.setRightNode(<span class="keyword">new</span> treeNode(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        rightNode.setLeftNode(<span class="keyword">new</span> treeNode(<span class="number">6</span>));</span><br><span class="line">        rightNode.setRightNode(<span class="keyword">new</span> treeNode(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 前序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        binTree.frontShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/frontShow.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    treeNode tNode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settNode</span><span class="params">(treeNode tNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tNode = tNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> treeNode <span class="title">gettNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"> tNode.frontShow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">//节点的左子节点</span></span><br><span class="line">    treeNode leftNode;</span><br><span class="line">    <span class="comment">//节点的右子节点</span></span><br><span class="line">    treeNode rightNode;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(treeNode leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(treeNode rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.leftNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.leftNode.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.rightNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightNode.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">结果：</font></strong></p><p>·1 2 4 5 3 6 7·</p><p><strong>中序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.leftNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.leftNode.midShow();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.rightNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightNode.midShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">结果：</font></strong></p><p>·4 2 5 1 6 3 7·</p><p><strong>后序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.leftNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.leftNode.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.rightNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightNode.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">结果：</font></strong></p><p><code>4 5 2 6 7 3 1</code></p><h3 id="二叉树节点的查找"><a href="#二叉树节点的查找" class="headerlink" title="二叉树节点的查找"></a>二叉树节点的查找</h3><p><strong>前序查找</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">      treeNode target = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//如果当前的值位查找的节点，则直接返回当前节点</span></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="keyword">this</span>.value)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果当前节点有左子节点，则对比左子节点的值</span></span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.leftNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               target = <span class="keyword">this</span>.leftNode.frontSearch(i);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"> <span class="comment">//如果子节点的值对应想要找到的节点，则直接返回这个节点</span></span><br><span class="line">           <span class="keyword">if</span>(target!= <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"><span class="comment">//如果当前节点有右子节点，则对比右子节点的值</span></span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.rightNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               target = <span class="keyword">this</span>.rightNode.frontSearch(i);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树节点的删除"><a href="#二叉树节点的删除" class="headerlink" title="二叉树节点的删除"></a>二叉树节点的删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        treeNode currNode = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//判断左子节点是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(currNode.leftNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断左子节点的值是否为要删除的值</span></span><br><span class="line">            <span class="keyword">if</span>(currNode.leftNode.value == i)&#123;</span><br><span class="line"></span><br><span class="line">                currNode.leftNode = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是继续递归查找</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                currNode.leftNode.deleteNode(i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右子节点是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(currNode.rightNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断右子节点是否为要删除的值</span></span><br><span class="line">            <span class="keyword">if</span>(currNode.rightNode.value == i)&#123;</span><br><span class="line"></span><br><span class="line">                currNode.rightNode = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                currNode.rightNode.deleteNode(i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="顺序存储的二叉树"><a href="#顺序存储的二叉树" class="headerlink" title="顺序存储的二叉树"></a>顺序存储的二叉树</h3><p><strong>顺序存储的二叉树通常情况下只考虑完全二叉树</strong></p><p><strong>性质：</strong></p><ol><li><p>对于第n个元素的左子节点是<code>2*n+1</code>(n为下标，从0开始)</p></li><li><p>对于第n个元素的右子节点是<code>2*n+2</code></p></li><li><p>对于第n个元素的父节点是<code>(n-1)/2</code></p></li></ol><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/sortBinaryTree.png" alt></p><h3 id="顺序存储的二叉树的遍历"><a href="#顺序存储的二叉树的遍历" class="headerlink" title="顺序存储的二叉树的遍历"></a>顺序存储的二叉树的遍历</h3><p><strong><font color="red">依照前序遍历二叉树的思想</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">arrayBinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">arrayBinaryTree</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        frontShow(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断数组是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(data==<span class="keyword">null</span>&amp;&amp;data.length==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(data[index]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//index*2+1:处理左子节点</span></span><br><span class="line">        <span class="keyword">if</span>(index*<span class="number">2</span>+<span class="number">1</span>&lt;data.length)&#123;</span><br><span class="line"></span><br><span class="line">            frontShow(index*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index*2+2：处理右子节点</span></span><br><span class="line">        <span class="keyword">if</span>(index*<span class="number">2</span>+<span class="number">2</span>&lt;data.length)&#123;</span><br><span class="line"></span><br><span class="line">            frontShow(index*<span class="number">2</span>+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p><strong>1. 线索化二叉树时，一个节点的前一个节点叫前驱节点</strong></p><p><strong>2. 线索化二叉树时，一个节点的后一个节点叫后继节点</strong></p><p>思路: 线索二叉树即运用前序遍历，中序遍历或者后序遍历的方法遍历各个节点。</p><blockquote><p>如果使用中序遍历进行线索二叉树的转化。那么各个节点的左子节点即为该节点的前驱节点，各个节点的右子节点即为该节点的后继节点。如果该节点B没有左子节点，那么遍历时的它的上一个节点A就是它的前驱节点。而上一个节点A既不为null也没有右子节点的情况下，A的后继节点即为该B节点。</p></blockquote><p><strong>使用中序遍历构建线索二叉树</strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/threadTree-one.png" alt></p><ol><li>构建线索二叉树</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">threadBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    treeNode tNode;</span><br><span class="line">    <span class="comment">//定义当前节点的前一个节点</span></span><br><span class="line">    treeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//重载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadNodes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        threadNodes(tNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用中序遍历构造线索二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadNodes</span><span class="params">(treeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理左子树</span></span><br><span class="line">        threadNodes(node.leftNode);</span><br><span class="line">        <span class="comment">//处理前驱节点</span></span><br><span class="line">        <span class="keyword">if</span>(node.leftNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//让当前节点的左指针指向前驱节点</span></span><br><span class="line">            node.leftNode = pre;</span><br><span class="line">            <span class="comment">//改变当前节点的左指针类型</span></span><br><span class="line">            node.leftType = <span class="number">1</span>;<span class="comment">//代表是前驱节点类型</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理前驱的右指针，如果前驱节点的右指针为null(即没有指向右子树)</span></span><br><span class="line">        <span class="comment">//此处的条件pre！=null是考虑到递进到最后一个左子节点时pre为null</span></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="keyword">null</span>&amp;&amp;pre.rightNode == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//让前驱节点的右指针指向当前节点</span></span><br><span class="line">            pre.rightNode = node;</span><br><span class="line">            pre.rightType = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每处理一个节点，当前节点就是下一个节点的前驱节点</span></span><br><span class="line">        pre = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理右子树</span></span><br><span class="line">        threadNodes(node.rightNode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settNode</span><span class="params">(treeNode tNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tNode = tNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> treeNode <span class="title">gettNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>节点类添加两个int类型的数据，用来表示当前节点的左子节点和右子节点的类型【leftType，rightType】：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">//节点的左子节点</span></span><br><span class="line">    treeNode leftNode;</span><br><span class="line">    <span class="comment">//节点的右子节点</span></span><br><span class="line">    treeNode rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义节点类型。默认为0，代表其为左子节点或由子节点</span></span><br><span class="line">    <span class="keyword">int</span> leftType = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightType = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(treeNode leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(treeNode rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线索化遍历二叉树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线索化遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    treeNode rNode = tNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(rNode.leftType==<span class="number">0</span>)&#123;</span><br><span class="line">            rNode = rNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(rNode.value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(rNode.rightType == <span class="number">1</span>)&#123;</span><br><span class="line">            rNode = rNode.rightNode;</span><br><span class="line">            System.out.println(rNode.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        rNode = rNode.rightNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p><strong>最优二叉树:</strong></p><p><strong><font color="red">它是n个带权叶子节点构成的所有二叉树中，带权路径长度最小的二叉树</font></strong></p><p><strong>叶节点的带权路径</strong></p><p><strong><font color="red">从根节点出发，它经过的节点的数量乘以该叶子节点的权值即为叶子节点的带权路径</font></strong></p><p><strong>树的带权路径长度WPL(weighted path length)</strong></p><p><strong><font color="red">树中所有叶子节点的带权路径长度之和</font></strong></p><p><strong><font color="green">权值越大的节点离根节点越近的二叉树才是最优二叉树。即赫夫曼树</font></strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/hoffmanTree-one.png" alt></p><h3 id="创建赫夫曼树流程"><a href="#创建赫夫曼树流程" class="headerlink" title="创建赫夫曼树流程"></a>创建赫夫曼树流程</h3><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/hoffmanTree-two.png" alt></p><p><strong>求出最终wpl值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hoffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testHoffmanTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrs = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">14</span>&#125;;</span><br><span class="line">        Node root = creatHoffmanTree(arrs);</span><br><span class="line">        System.out.println(root.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 先取出数组中所有的元素创建若干个二叉树(只有一个节点)</span></span><br><span class="line"><span class="comment">     * 2. 首先对数组排序</span></span><br><span class="line"><span class="comment">     * 3. 取出权值最小的两个二叉树</span></span><br><span class="line"><span class="comment">     * 4. 创建一个新的二叉树</span></span><br><span class="line"><span class="comment">     * 5. 把取出来的两个二叉树移除</span></span><br><span class="line"><span class="comment">     * 6. 放入原来的二叉树中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">creatHoffmanTree</span><span class="params">(<span class="keyword">int</span>[] arrs)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.先取出数组中所有的元素创建若干个二叉树(只有一个节点)</span></span><br><span class="line">        List&lt;Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> value:arrs)&#123;</span><br><span class="line">            nodes.add(<span class="keyword">new</span> Node(value));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 循环处理</span></span><br><span class="line">        <span class="keyword">while</span>(nodes.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 3. 首先对数组排序（升序）</span></span><br><span class="line">            Collections.sort(nodes);</span><br><span class="line">            <span class="comment">// 4. 取出权值最小的二叉树</span></span><br><span class="line">            Node left = nodes.get(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 取出权值次小的二叉树</span></span><br><span class="line">            Node right = nodes.get(<span class="number">1</span>);</span><br><span class="line">            Node parent = <span class="keyword">new</span> Node(left.value+right.value);</span><br><span class="line"><span class="comment">//两个子节点连接父节点</span></span><br><span class="line">            parent.leftNode=left;</span><br><span class="line">            parent.rightNode = right;</span><br><span class="line">            <span class="comment">// 5. 把取出来的两个二叉树移除</span></span><br><span class="line">            nodes.remove(left);</span><br><span class="line">            nodes.remove(right);</span><br><span class="line">            nodes.add(parent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hoffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>  <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">//左子节点</span></span><br><span class="line">    Node leftNode;</span><br><span class="line">    <span class="comment">//右子节点</span></span><br><span class="line">    Node rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value-o.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"value="</span> + value +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赫夫曼编码原理"><a href="#赫夫曼编码原理" class="headerlink" title="赫夫曼编码原理"></a>赫夫曼编码原理</h2><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/dcCode.png" alt></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/bdcCode.png" alt></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/hoffmanCode.png" alt></p><p><strong>赫夫曼编码可直接从左到右进行对比，没有第二种那样一个字符的编码可能是其他字符编码的前缀,导致无法分清的情况</strong></p><h2 id="赫夫曼编码进行数据压缩"><a href="#赫夫曼编码进行数据压缩" class="headerlink" title="赫夫曼编码进行数据压缩"></a>赫夫曼编码进行数据压缩</h2><p><strong>过程</strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/huffmanZip-Process.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hoffmanZip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt;</span>&#123;</span><br><span class="line">    Byte data;<span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> weight;<span class="comment">//节点的权</span></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Byte data,<span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"data="</span> + data +</span><br><span class="line">                <span class="string">", weight="</span> + weight +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.weight-o.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hoffmanZip;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hoffmanTestZip</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">"can you can a can as a can canner can a can."</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes1Zip = hoffmanZip(bytes);</span><br><span class="line">        System.out.println(bytes.length);</span><br><span class="line">        System.out.println(bytes1Zip.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行赫夫曼编码压缩的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hoffmanZip(<span class="keyword">byte</span>[] bytes) &#123;</span><br><span class="line">        <span class="comment">// 1 .先统计每一个byte出现的次数并放入集合中</span></span><br><span class="line">        List&lt;Node&gt; nodeList = getNodes(bytes);</span><br><span class="line">        <span class="comment">// 2. 创建一课赫夫曼树</span></span><br><span class="line">        Node rootNode = createHoffman(nodeList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建一个赫夫曼编码表</span></span><br><span class="line">        Map&lt;Byte,String&gt; huffCode = getHuffmanCode(rootNode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 编码</span></span><br><span class="line">        <span class="keyword">byte</span>[] b =  zip(bytes,huffCode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计每一个byte出现的次数并放入集合中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title">getNodes</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Node&gt; nodeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//存储每一个byte出现了多少次</span></span><br><span class="line">        Map&lt;Byte,Integer&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span><br><span class="line">            <span class="comment">//根据当前循环的数组的值获取Map集合中的次数</span></span><br><span class="line">            Integer counts = nodeMap.get(bytes[i]);</span><br><span class="line">            <span class="comment">//如果次数为null，则说明Map集合中还没有存放该值</span></span><br><span class="line">            <span class="keyword">if</span>(counts == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                nodeMap.put(bytes[i],<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//否则次数加1</span></span><br><span class="line">                nodeMap.put(bytes[i],counts+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环Map数组，将其加入到list集合中</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Byte,Integer&gt; entry:nodeMap.entrySet())&#123;</span><br><span class="line"></span><br><span class="line">            nodeList.add(<span class="keyword">new</span> Node(entry.getKey(),entry.getValue()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一棵赫夫曼树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">createHoffman</span><span class="params">(List&lt;Node&gt; nlist)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(nlist.size()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">            Collections.sort(nlist);</span><br><span class="line">            <span class="comment">//找到最小的两个节点</span></span><br><span class="line">            Node left = nlist.get(<span class="number">0</span>);</span><br><span class="line">            Node right = nlist.get(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//将这两个节点连接至父节点</span></span><br><span class="line">            Node parent = <span class="keyword">new</span> Node(<span class="keyword">null</span>,left.weight+right.weight);</span><br><span class="line">            parent.left = left;</span><br><span class="line">            parent.right = right;</span><br><span class="line">            <span class="comment">//在集合中删除两个子节点并添加父节点</span></span><br><span class="line">            nlist.remove(left);</span><br><span class="line">            nlist.remove(right);</span><br><span class="line">            nlist.add(parent);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nlist.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用于临时存储路径</span></span><br><span class="line">    <span class="keyword">static</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//用于存储赫夫曼编码</span></span><br><span class="line">    <span class="keyword">static</span> HashMap&lt;Byte, String&gt; cMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//根据赫夫曼树获取赫夫曼编码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Byte,String&gt; <span class="title">getHuffmanCode</span><span class="params">(Node tree)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tree == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getHuffmanCode(tree.left,<span class="string">"0"</span>,sb);</span><br><span class="line">        getHuffmanCode(tree.right,<span class="string">"1"</span>,sb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getHuffmanCode</span><span class="params">(Node node, String s, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此处定义的 StringBuilder sb2 = new StringBuilder(sb);是每次进入该方法时都会将传入的StringBuilder类型</span></span><br><span class="line"><span class="comment">         * 的参数sb重新装入sb2中。这样可以避免因为引用类型的调用而改变原本定义的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(sb);</span><br><span class="line">        sb2.append(s);</span><br><span class="line">        <span class="keyword">if</span>(node.data==<span class="keyword">null</span>) &#123;</span><br><span class="line">            getHuffmanCode(node.left, <span class="string">"0"</span>, sb2);</span><br><span class="line">            String a = sb2.toString();</span><br><span class="line">            getHuffmanCode(node.right, <span class="string">"1"</span>, sb2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            cMap.put(node.data,sb2.toString());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行赫夫曼编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> huffCodes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] zip(<span class="keyword">byte</span>[] bytes,Map&lt;Byte,String&gt; huffCodes)&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//把需要压缩的byte数组处理成一个二进制的字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> b:bytes)&#123;</span><br><span class="line">            sb.append(huffCodes.get(b));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span>(sb.length()%<span class="number">8</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            len = sb.length()/<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            len = sb.length()/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用于存储压缩后的byte</span></span><br><span class="line">        <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">        <span class="comment">//记录新byte位置</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;sb.length();i+=<span class="number">8</span>)&#123;</span><br><span class="line">            String strByte;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">8</span>&gt;sb.length())&#123;</span><br><span class="line">                strByte = sb.substring(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                strByte = sb.substring(i, i + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span> byt = (<span class="keyword">byte</span>) Integer.parseInt(strByte,<span class="number">2</span>);</span><br><span class="line">            by[index] = byt;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  by;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用赫夫曼编码进行解码"><a href="#使用赫夫曼编码进行解码" class="headerlink" title="使用赫夫曼编码进行解码"></a>使用赫夫曼编码进行解码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String msg = <span class="string">"can you can a can as a can canner can a can."</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> a:bytes</span><br><span class="line">         ) &#123;</span><br><span class="line">        System.out.print(a+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">byte</span>[] bytes1Zip = hoffmanZip(bytes);</span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    <span class="keyword">byte</span>[] decodeA = decode(cMap,bytes1Zip);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(decodeA));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">byte</span>[] decode(Map&lt;Byte,String&gt; huffcode,<span class="keyword">byte</span>[] bytes)&#123;</span><br><span class="line"></span><br><span class="line">       StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="comment">//把byte数组转换为一个二进制的字符串</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">           <span class="keyword">byte</span> b = bytes[i];</span><br><span class="line">           <span class="comment">//判断是否是最后一个</span></span><br><span class="line">           <span class="keyword">boolean</span> flag = (i==bytes.length-<span class="number">1</span>);</span><br><span class="line">           sb.append(byteToBitStr(!flag,b));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//把字符串按照指定的赫夫曼编码进行解码</span></span><br><span class="line">       <span class="comment">//把赫夫曼编码的键值对</span></span><br><span class="line">       Map&lt;String,Byte&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(Map.Entry&lt;Byte,String&gt; entry:huffcode.entrySet())&#123;</span><br><span class="line">           map.put(entry.getValue(), entry.getKey());</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建一个集合。用于存byte</span></span><br><span class="line">       List&lt;Byte&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">//处理字符串</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;sb.length();)&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">           Byte b = <span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//截取出一个byte</span></span><br><span class="line">           <span class="keyword">while</span>(flag)&#123;</span><br><span class="line"></span><br><span class="line">               String key = sb.substring(i,i+count);</span><br><span class="line">               b = map.get(key);</span><br><span class="line">               <span class="keyword">if</span>(b == <span class="keyword">null</span>)&#123;</span><br><span class="line">                   count++;</span><br><span class="line"></span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                   flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(b);</span><br><span class="line">           list.add(b);</span><br><span class="line">           i+=count;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//把集合转换为数组</span></span><br><span class="line">       <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[list.size()];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;bArr.length;j++)&#123;</span><br><span class="line">           bArr[j] = list.get(j);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> bArr;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//补齐位数的方法</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToBitStr</span><span class="params">(<span class="keyword">boolean</span> flag,<span class="keyword">byte</span> b)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = b;</span><br><span class="line"><span class="comment">//如果是最后一个二进制数据的话不用补齐位数</span></span><br><span class="line">       <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">           temp |= <span class="number">256</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       String str = Integer.toBinaryString(temp);</span><br><span class="line">       <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">           <span class="keyword">return</span>  str.substring(str.length()-<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span>  str;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>也叫二叉查找树，二叉搜索树:BST<br>对于二叉树中的任何一个非叶子节点，要求左子节点比当前节点值小。右子节点比当前节点值大。</p><p><strong>线性结构存储的缺点</strong></p><ol><li><p>顺序存储(不排序):查找困难</p></li><li><p>顺序存储(排序):删除插入困难</p></li><li><p>链式存储(无论是否排序):查找困难</p></li></ol><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/binarySortTree-one.png" alt></p><h3 id="创建二叉排序树-amp-添加节点"><a href="#创建二叉排序树-amp-添加节点" class="headerlink" title="创建二叉排序树&amp;添加节点"></a>创建二叉排序树&amp;添加节点</h3><ol><li><p>从根节点开始判断，如果添加的节点的值小于当前节点的值，那么递进到二叉排序树的左子节点</p></li><li><p>反之，如果添加的节点的值大于当前节点的值，那么递进到二叉排序树的右子节点</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binarySTree</span> </span>&#123;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉排序树添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.root = node;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.root.add(node);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.root.midShow(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉排序树添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断如果传入的节点为空直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断传入的节点的值是否小于当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span>(node.value&lt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断传入的节点的值是否大于当前节点的值</span></span><br><span class="line">            <span class="keyword">if</span>(node.value&gt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.right = node;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.right.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历二叉排序树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midShow(node.left);</span><br><span class="line"></span><br><span class="line">        System.out.println(node.value);</span><br><span class="line"></span><br><span class="line">        midShow((node.right));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><ol><li>从根节点开始，如果查找的节点的值小于当前节点，那么递进向左子树查找</li></ol><ol start="2"><li>反之，如果查找的节点的值大于当前节点，那么递进向右子树查找</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binarySTree</span> </span>&#123;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.root.midShow(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">searchNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.root.searchNode(value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历二叉排序树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midShow(node.left);</span><br><span class="line"></span><br><span class="line">        System.out.println(node.value);</span><br><span class="line"></span><br><span class="line">        midShow((node.right));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找 搜索节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">searchNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.value == value)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.value&gt;value)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.left.value == value)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.left;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.left.searchNode(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.right.value == value)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.right;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.right.searchNode(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/binarySortTree-two.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binarySTree</span> </span>&#123;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">binarySTree</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.root.midShow(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉排序树删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 找到这个节点</span></span><br><span class="line">            Node target = searchNode(value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(target == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到它的父节点</span></span><br><span class="line"></span><br><span class="line">            Node parentNode = searchParentNode(value);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//要删除的节点是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span>(target.left==<span class="keyword">null</span>&amp;&amp;target.right==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//要删除的节点是父节点的左子节点</span></span><br><span class="line">                <span class="keyword">if</span>(parentNode.left.value == value)&#123;</span><br><span class="line"></span><br><span class="line">                    parentNode.left = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要删除的节点是父节点的右子节点</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    parentNode.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target.right!=<span class="keyword">null</span>&amp;&amp;target.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//要删除的节点有两个子节点</span></span><br><span class="line">                <span class="comment">//删除右子树中值最小的节点，并获取到该节点的值</span></span><br><span class="line">                <span class="keyword">int</span> min = deleteMin(target.right);</span><br><span class="line">                <span class="comment">//替换目标节点中的内容(值)</span></span><br><span class="line">                target.value = min;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//要删除的节点有一个左子节点或者右子节点</span></span><br><span class="line">                <span class="keyword">if</span>(target.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//有左子节点</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(parentNode.left.value == value)&#123;</span><br><span class="line">                       parentNode.left = target.left;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        parentNode.right = target.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//有右子节点</span></span><br><span class="line">                    <span class="keyword">if</span>(parentNode.left.value == value)&#123;</span><br><span class="line">                        parentNode.left = target.right;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        parentNode.right = target.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一棵树中最小的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deleteMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        Node target = node;</span><br><span class="line">        <span class="comment">//循环向左找到最小的节点</span></span><br><span class="line">        <span class="keyword">while</span> (target.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            target = target.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这个节点有右子节点，那么应该按照之前写的删除方法中的节点只有右子节点的方法删除</span></span><br><span class="line">        delNode(target.value);</span><br><span class="line">        <span class="keyword">return</span> target.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">searchParentNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.root.searchParentNode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> binarySortTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历二叉排序树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midShow</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midShow(node.left);</span><br><span class="line"></span><br><span class="line">        System.out.println(node.value);</span><br><span class="line"></span><br><span class="line">        midShow((node.right));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找 搜索节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">searchNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.value == value)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.value&gt;value)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.left.value == value)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.left;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.left.searchNode(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.right.value == value)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.right;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.right.searchNode(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">searchParentNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>&amp;&amp;<span class="keyword">this</span>.left.value == value||<span class="keyword">this</span>.right!=<span class="keyword">null</span>&amp;&amp;<span class="keyword">this</span>.right.value == value)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有判断子节点与传入的值相等的情况。故会返回null</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.value&gt;value&amp;&amp;<span class="keyword">this</span>.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.left.searchParentNode(value);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.value&lt;value&amp;&amp;<span class="keyword">this</span>.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.right.searchParentNode(value);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树（AVL树）"><a href="#平衡二叉树（AVL树）" class="headerlink" title="平衡二叉树（AVL树）"></a>平衡二叉树（AVL树）</h2><p>当数组【1,2,3,4,5,6,7,8】转换为二叉排序树的话会造成查找资源过大。那么这个时候可以引进平衡二叉树</p><p><strong>概述：左子树和右子树的高度差的绝对值不超过1</strong></p><p><strong><font color="red">左子树和右子树也需要是平衡二叉树</font></strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/balancedBinaryTree-one.png" alt></p><h3 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h3><p><strong>右旋转：</strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/turnright-one.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> balancedBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取左子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leftHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取右子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rightHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前节点的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left==<span class="keyword">null</span>?<span class="number">0</span>:left.height(),right == <span class="keyword">null</span>?<span class="number">0</span>:right.height())+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉排序树添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断如果传入的节点为空直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断传入的节点的值是否小于当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span>(node.value&lt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断传入的节点的值是否大于当前节点的值</span></span><br><span class="line">            <span class="keyword">if</span>(node.value&gt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.right = node;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.right.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查是否是平衡二叉树</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(leftHeight()-rightHeight()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//进行右旋转</span></span><br><span class="line">            rightRotate();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(leftHeight()-rightHeight()&lt;=-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//进行左旋转</span></span><br><span class="line">            leftRotate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node newLeft = <span class="keyword">new</span> Node(value);</span><br><span class="line">        newLeft.left = left;</span><br><span class="line">        newLeft.right = right.left;</span><br><span class="line">        value = right.value;</span><br><span class="line">        right = right.right;</span><br><span class="line">        left = newLeft;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的节点，值等于当前节点的值</span></span><br><span class="line">        Node newRight = <span class="keyword">new</span> Node(value);</span><br><span class="line">        <span class="comment">//把新节点的右子树设置了当前节点的右子树</span></span><br><span class="line">        newRight.right = right;</span><br><span class="line">        <span class="comment">//把新节点的左子树设置为当前节点的左子树的右子树</span></span><br><span class="line">        newRight.left = left.right;</span><br><span class="line">        <span class="comment">//把当前节点的值换位左子节点的值</span></span><br><span class="line">        value = left.value;</span><br><span class="line">        <span class="comment">//把当前节点的左子树设置了左子树的左子树</span></span><br><span class="line">        left = left.left;</span><br><span class="line">        <span class="comment">//把当前节点的右子树设置为新节点</span></span><br><span class="line">        right = newRight;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> balancedBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//右旋转测试</span></span><br><span class="line">       <span class="comment">/* int[] arrs = new int[]&#123;8,9,6,7,5,4&#125;;</span></span><br><span class="line"><span class="comment">        binarySTree bst = new binarySTree();</span></span><br><span class="line"><span class="comment">        //循环添加</span></span><br><span class="line"><span class="comment">        for(int i = 0;i&lt;arrs.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            Node node = new Node(arrs[i]);</span></span><br><span class="line"><span class="comment">            bst.add(node);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //查看高度</span></span><br><span class="line"><span class="comment">        System.out.println(bst.root.height());</span></span><br><span class="line"><span class="comment">        //查看根节点的值</span></span><br><span class="line"><span class="comment">        System.out.println(bst.root.value);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//左旋转测试</span></span><br><span class="line">        <span class="keyword">int</span>[] arrl = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        binarySTree bstl = <span class="keyword">new</span> binarySTree();</span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arrl.length;i++)&#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node(arrl[i]);</span><br><span class="line">            bstl.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看高度</span></span><br><span class="line">        System.out.println(bstl.root.height());</span><br><span class="line">        <span class="comment">//查看根节点的值</span></span><br><span class="line">        System.out.println(bstl.root.value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h3><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/twiceRotate-one.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> balancedBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取左子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leftHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取右子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rightHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前节点的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left==<span class="keyword">null</span>?<span class="number">0</span>:left.height(),right == <span class="keyword">null</span>?<span class="number">0</span>:right.height())+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉排序树添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断如果传入的节点为空直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断传入的节点的值是否小于当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span>(node.value&lt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断传入的节点的值是否大于当前节点的值</span></span><br><span class="line">            <span class="keyword">if</span>(node.value&gt;<span class="keyword">this</span>.value)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.right = node;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.right.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查是否是平衡二叉树</span></span><br><span class="line">        <span class="comment">//进行右旋转</span></span><br><span class="line">        <span class="keyword">if</span>(leftHeight()-rightHeight()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//双旋转</span></span><br><span class="line">            <span class="keyword">if</span>(left!=<span class="keyword">null</span>&amp;&amp;left.leftHeight()&lt;left.rightHeight())&#123;</span><br><span class="line">                <span class="comment">//先左旋转</span></span><br><span class="line">                left.leftRotate();</span><br><span class="line">                <span class="comment">//再右旋转</span></span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//单旋转</span></span><br><span class="line"></span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(leftHeight()-rightHeight()&lt;=-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//进行左旋转</span></span><br><span class="line">            <span class="comment">//双旋转</span></span><br><span class="line">            <span class="keyword">if</span>(right!=<span class="keyword">null</span>&amp;&amp;right.rightHeight()&lt;right.leftHeight())&#123;</span><br><span class="line">                right.rightRotate();</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//单旋转</span></span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node newLeft = <span class="keyword">new</span> Node(value);</span><br><span class="line">        newLeft.left = left;</span><br><span class="line">        newLeft.right = right.left;</span><br><span class="line">        value = right.value;</span><br><span class="line">        right = right.right;</span><br><span class="line">        left = newLeft;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的节点，值等于当前节点的值</span></span><br><span class="line">        Node newRight = <span class="keyword">new</span> Node(value);</span><br><span class="line">        <span class="comment">//把新节点的右子树设置了当前节点的右子树</span></span><br><span class="line">        newRight.right = right;</span><br><span class="line">        <span class="comment">//把新节点的左子树设置为当前节点的左子树的右子树</span></span><br><span class="line">        newRight.left = left.right;</span><br><span class="line">        <span class="comment">//把当前节点的值换位左子节点的值</span></span><br><span class="line">        value = left.value;</span><br><span class="line">        <span class="comment">//把当前节点的左子树设置了左子树的左子树</span></span><br><span class="line">        left = left.left;</span><br><span class="line">        <span class="comment">//把当前节点的右子树设置为新节点</span></span><br><span class="line">        right = newRight;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrl = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">binarySTree bstl = <span class="keyword">new</span> binarySTree();</span><br><span class="line"><span class="comment">//循环添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arrl.length;i++)&#123;</span><br><span class="line">Node node = <span class="keyword">new</span> Node(arrl[i]);</span><br><span class="line">bstl.add(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看高度</span></span><br><span class="line">System.out.println(bstl.root.height());</span><br><span class="line"><span class="comment">//查看根节点的值</span></span><br><span class="line">System.out.println(bstl.root.value);</span><br></pre></td></tr></table></figure><h2 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h2><p><strong>B树中所有的叶节点都在同一层</strong></p><p><strong>有两个子节点的节点叫二节点（二节点要么有两个子节点，要么没有子节点）</strong></p><p><strong>有三个子节点的节点叫三节点（三节点要么有三个子节点，要么没有子节点）</strong></p><p><img src="/2020/10/31/%E6%A0%91%E7%BB%93%E6%9E%84/twothreeNode.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树结构&quot;&gt;&lt;a href=&quot;#树结构&quot; class=&quot;headerlink&quot; title=&quot;树结构&quot;&gt;&lt;/a&gt;树结构&lt;/h1&gt;&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h
      
    
    </summary>
    
    
    
      <category term="数据结构" scheme="https://planeswalker1205.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树结构" scheme="https://planeswalker1205.github.io/tags/%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://planeswalker1205.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring 异步线程池</title>
    <link href="https://planeswalker1205.github.io/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://planeswalker1205.github.io/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2020-08-02T06:58:52.000Z</published>
    <updated>2020-08-09T08:54:14.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步实例"><a href="#异步实例" class="headerlink" title="异步实例"></a>异步实例</h2><p><strong><font color="DarkBlue">为了满足运维人员的需求，往往需要生成报表交由后台线程操作，生成报表是另外一个线程的任务</font></strong></p><p><strong><font color="DarkKhaki">1. 使用Java配置定义线程池和启用异步</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsymcConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义线程池</span></span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//线程池最大线程数</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//线程队列最大线程数</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码中，注解@EnableAsync代表开启Spring异步，这样就可以使用@Async驱动Spring使用异步。但是异步需要提供可用线程池，所以此配置类会哦实现AsyncConfigurer接口，然后重写getAsyncExecutor方法进行相关配置。</p></blockquote><p><strong><font color="DarkKhaki">2. 为了进行测试，定义一个service服务接口和其实现类</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.AsyncService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印异步线程名称</span></span><br><span class="line">        System.out.println(<span class="string">"此线程名称："</span>+<span class="string">"【"</span>+Thread.currentThread().getName()+<span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="DarkKhaki">3. 定义控制器</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.AsyncService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">asyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/table"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asyncPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求线程名称:"</span>+<span class="string">"【"</span>+Thread.currentThread().getName()+<span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">//调用异步服务</span></span><br><span class="line">        asyncService.generateReport();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"async"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动服务后，对asyncPage方法进行请求，会发现控制器的方法和异步方法的线程名称是不同的，说明它们是由不同的线程运行的</p></blockquote><p><img src="/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/QQ%E6%88%AA%E5%9B%BE20200803173132.png" alt></p><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><h3 id="JMS实例-ActiveMQ"><a href="#JMS实例-ActiveMQ" class="headerlink" title="JMS实例-ActiveMQ"></a><font color="Brown">JMS实例-ActiveMQ</font></h3><p><strong>1. ActiveMQ的使用，首先在<a href="http://activemq.apache.org/download.html下载ActiveMQ。然后进入bin目录下启动activemq.bat(Windows系统).运行之后，打开浏览器访问http://localhost:8161/admin/，使用用户名amdin和密码admin登录成功后，说明ActiveMQ已经启动好了" target="_blank" rel="noopener">http://activemq.apache.org/download.html下载ActiveMQ。然后进入bin目录下启动activemq.bat(Windows系统).运行之后，打开浏览器访问http://localhost:8161/admin/，使用用户名amdin和密码admin登录成功后，说明ActiveMQ已经启动好了</a></strong></p><p><strong>2. 配置支持ActiveMQ的依赖</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.messaginghub&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pooled-jms&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot放弃了对自动配置的支持，activemq-pool而支持pooled-jms,所以第二项依赖配置的是pooled-jms。</p></blockquote><p><strong>3. 配置ActiveMQ和JMS信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ActiveMQ地址</span><br><span class="line">spring.activemq.broker-url=tcp:<span class="comment">//localhost:61616</span></span><br><span class="line"># 用户名密码配置</span><br><span class="line">spring.activemq.user=admin</span><br><span class="line">spring.activemq.password=admin</span><br><span class="line"># 是否使用发布订阅模式默认为false，即点对点模式</span><br><span class="line">spring.jms.pub-sub-domain=<span class="keyword">true</span></span><br><span class="line">#默认目的地址</span><br><span class="line">spring.jms.template.<span class="keyword">default</span>-destination=activemq.<span class="keyword">default</span>.destination</span><br><span class="line">#是否启用连接池</span><br><span class="line">spring.activemq.pool.enabled=<span class="keyword">true</span></span><br><span class="line"># 连接池最大连接数量配置</span><br><span class="line">spring.activemq.pool.max-connections=<span class="number">50</span></span><br></pre></td></tr></table></figure><p>如果想要传递的消息是pojo对象，可配置其信任pojo包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置ActiveMQ信任ServerUser类</span><br><span class="line">spring.activemq.packages.trusted=com.example.rediscachetest.pojo,java.<span class="keyword">long</span></span><br><span class="line">#若让ActiveMQ信任所有的包，可配置</span><br><span class="line">#spring.activemq.packages.trust-all=true</span><br></pre></td></tr></table></figure><p><strong>4. 定义传递普通消息的服务接口和传递pojo类的服务接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActiveMQService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActiveMQUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(ServerUser serverUser)</span></span>;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(ServerUser serverUser)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 其实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.ActiveMQService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivveMQServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMQService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入由SpringBoot自动产生的jmsTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息:【"</span>+msg+<span class="string">"】"</span>);</span><br><span class="line">        jmsTemplate.convertAndSend(msg);</span><br><span class="line">        <span class="comment">//自定义发送地址，因为配置中默认了地址所以可不写</span></span><br><span class="line">        <span class="comment">//jmsTemplate.convertAndSend("your-destination",msg);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用注解，监听地址发送过来的消息</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;spring.jms.template.default-destination&#125;"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接受到消息:【"</span>+msg+<span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.ActiveMQUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQUserServviceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMQUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//自定义地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String myDestination =  <span class="string">"my-destination"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(ServerUser serverUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息:【"</span>+serverUser+<span class="string">"】"</span>);</span><br><span class="line">        jmsTemplate.convertAndSend(myDestination,serverUser);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//监控自定义地址</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = myDestination)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(ServerUser serverUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息:【"</span>+serverUser+<span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现类的发送地址既可以自定义，也可以默认使用application.properties文件中配置的地址。监控自定义地址和发送消息时的地址是一致的。如果使用的是默认的地址，那么只需要写成在application.properties中配置的地址的名称就可以了</p></blockquote><blockquote><p>POJO类必须是可以序列化的，因此必须继承Serializable。</p></blockquote><blockquote><p>由于POJO类的ID属性是Long类型的。所以在配置信任的包时也需要加上Java.Long的包</p></blockquote><p><strong>6. 控制器测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.ActiveMQService;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.service.ActiveMQUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/activemq"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">activemqController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入服务对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActiveMQService activeMQService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActiveMQUserService activeMQUserService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//测试普通消息的发送</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">msg</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; msgMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        msgMap.put(<span class="string">"success"</span>,<span class="keyword">true</span>);</span><br><span class="line">        msgMap.put(<span class="string">"message"</span>,message);</span><br><span class="line">        activeMQService.sendMsg(message);</span><br><span class="line">        <span class="keyword">return</span>  msgMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试ServerUser对象的发送</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/usermsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">userMsg</span><span class="params">(Long id,String userName,String note)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; msgMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ServerUser serUser = <span class="keyword">new</span> ServerUser();</span><br><span class="line">        serUser.setId(id);</span><br><span class="line">        serUser.setName(userName);</span><br><span class="line">        serUser.setRemark(note);</span><br><span class="line">        msgMap.put(<span class="string">"success"</span>,<span class="keyword">true</span>);</span><br><span class="line">        msgMap.put(<span class="string">"sUser"</span>,serUser);</span><br><span class="line">        activeMQUserService.sendMsg(serUser);</span><br><span class="line">        <span class="keyword">return</span>  msgMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果:</p><p><img src="/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/QQ%E6%88%AA%E5%9B%BE20200803203953.png" alt></p><p><img src="/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/QQ%E6%88%AA%E5%9B%BE20200803204028.png" alt></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p><strong><font color="Brown">Spring中使用定时器，首先要在配置文件中加入@EnableScheduling，就能够使用注解驱动定时任务的机制。然后可以通过注解@Scheduled去配置如何定时。下面首先加入Spring Boot启动类标注@EnableScheduling。再开发服务类</font></strong></p><p><strong>1. 简易定时任务服务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="keyword">int</span> count1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> count2 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 每隔一秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="comment">//使用异步执行</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【"</span>+Thread.currentThread().getName()+<span class="string">"】，【job1】每一秒钟执行一次，执行第"</span>+count1+<span class="string">"次"</span>);</span><br><span class="line">        count1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【"</span>+Thread.currentThread().getName()+<span class="string">"】，【job2】每一秒钟执行一次，执行第"</span>+count2+<span class="string">"次"</span>);</span><br><span class="line">        count2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用@Async注解代表这需要使用异步线程执行，异步配置参考上一节。</p></blockquote><p><strong>2. 启动后效果如图</strong></p><p><img src="/2020/08/02/Spring-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/QQ%E6%88%AA%E5%9B%BE20200805181440.png" alt></p><blockquote><p>这说明Spring每秒钟都会运行这个标注了@Scheduled的方法，并且是在不同的线程之间运行。</p></blockquote><p>如果需要指定为更具体的某一时间，则可用表达式来完成。</p><h2 id="WebSocket应用"><a href="#WebSocket应用" class="headerlink" title="WebSocket应用"></a>WebSocket应用</h2><p><strong>1. 加入依赖</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 自定义WebScoket服务端点配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建服务器端点</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有了这个Bean，就可以使用@ServerEndpoint定义一个端点服务类，在这个服务类中，可以定义WebSocket的打开，关闭，错误和发送消息的方法。</p></blockquote><p><strong>3. 定义WebSocket服务端站点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/ws"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态变量 用来记录当前在线连接数，且应该是线程安全的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// concurrent包的线程安全Set，用来存放每个客户端对应的WebSocketServiceImpl对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServiceImpl&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与某个客户端的连接回话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">"有新的连接加入!当前在线人数为:"</span>+getOnlineCount());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(<span class="string">"有新的连接加入了!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">"有一连接关闭！当前在线人数为:"</span>+getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message,Session session)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span>+message);</span><br><span class="line">        <span class="comment">//群发消息</span></span><br><span class="line">        <span class="keyword">for</span>(WebSocketServiceImpl item:webSocketSet)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生错误时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session,Throwable error)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发生错误！"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回在线数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当连接人数增加时</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebSocketServiceImpl.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当连接人数减少时</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebSocketServiceImpl.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为每一个客户端打开时，都会为其创建一个WebSocketServiceImpl对象，所以这里的打开方法中都会计数并且将这个对象保存到Set集合中。这样就可以知道拥有多少条连接。对于消息发送的方法，则是通过遍历对所有客户端的连接都给予发送消息，所以所有的连接都可以接收这个消息。如果只需要发送特定用户，则需要得到用户的信息再发送。</p></blockquote><p><strong>4. 页面开发</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;验证用户&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    测试WebSocket站点</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id = <span class="string">"message"</span>/&gt;</span><br><span class="line">    &lt;button onclick = "sendMessage()"&gt;发送消息&lt;/button&gt;</span><br><span class="line">    &lt;button onclick="closeWebSocket()"&gt;关闭WebScoket连接&lt;/button&gt;</span><br><span class="line">    &lt;div id = "context"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> webSocket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 判断当前浏览器是否支持WebSocket</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'WebSocket'</span> in window)&#123;</span><br><span class="line">        <span class="comment">//创建WebSocket对象，连接服务端点</span></span><br><span class="line">        webSocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/ws"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"不支持WebSocket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接发生错误回调</span></span><br><span class="line">    webSocket.onerror = function()&#123;</span><br><span class="line">        appendMessage(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接成功回调</span></span><br><span class="line">    webSocket.onopen = function(event)&#123;</span><br><span class="line">        appendMessage(<span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接收到消息回调</span></span><br><span class="line">    webSocket.onmessage = function(event)&#123;</span><br><span class="line">        appendMessage(event.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接关闭回调方法</span></span><br><span class="line">    webSocket.onclose = function()&#123;</span><br><span class="line">        appendMessage(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听窗口关闭时间，当窗口关闭时，主动关闭websocket连接</span></span><br><span class="line">    <span class="comment">//防止连接还没断开就关闭窗口导致server端发生异常</span></span><br><span class="line"></span><br><span class="line">    window.onbeforeunload = function()&#123;</span><br><span class="line">        webSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将消息显示在网页上</span></span><br><span class="line">    <span class="function">function <span class="title">appendMessage</span><span class="params">(message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = $(<span class="string">"#context"</span>).html()+<span class="string">"&lt;br/&gt;"</span>+message;</span><br><span class="line">        $(<span class="string">"#context"</span>).html(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="function">function <span class="title">closeWebSocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        webSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="function">function <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = $(<span class="string">"#message"</span>).val();</span><br><span class="line">        webSocket.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>5. 通过控制器访问页面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/webs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">websocketController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sockets"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">messagePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user/websocket"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Stomp"><a href="#使用Stomp" class="headerlink" title="使用Stomp"></a>使用Stomp</h3><p><font color="#A52A2A">并不是所有的浏览器都能够支持WebSocket协议，为了使得WebSocket的应用能够兼容那些不支持的浏览器，可以使用Stomp协议进行处理</font></p><p><strong>1. 在配置文件中加入注解@EnableWebSocketMessageBroker，此注解会启动WebSocket下的子协议STOMP、为了配置这个协议，可以实现接口WebSocketMessageBrokerConfigurer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建服务器端点</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 增加一个聊天服务端点（任何用户都会收到消息）</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/socket"</span>).withSockJS();</span><br><span class="line">        <span class="comment">//增加一个用户端点服务（特定用户才会受到消息）</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/wsuser"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="comment">//客户端订阅路径前缀</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/sub"</span>,<span class="string">"/queue"</span>);</span><br><span class="line">        <span class="comment">//服务端点请求前缀</span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><b><font color="#D2691E">registerStompEndpoints()方法中定义了两个服务端点，还加入了withSockJS方法，代表支持SockJS这种第三方支持WebSocket请求的JavaScript1框架。</font></b></p></blockquote><blockquote><p><b><font color="#D2691E">configureMessageBroker()方法注册请求的前缀和客户端订阅的前缀</font></b></p></blockquote><p><strong>2. Stomp下的控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/websocket"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">websocketController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*@GetMapping("/sockets")</span></span><br><span class="line"><span class="comment">    public String messagePage()&#123;</span></span><br><span class="line"><span class="comment">        return "user/websocket";</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/send"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"web/send"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/receive"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"web/receive"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对特定用户的发送页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"web/send-user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特定用户接收页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/receiveUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reveiveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"web/receive-user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义消息请求路径</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/send"</span>)</span><br><span class="line">    <span class="comment">//定义结果发送到特定路径</span></span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/sub/chat"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息发送给特定用户</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/sendUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToUser</span><span class="params">(Principal principal,String body)</span></span>&#123;</span><br><span class="line">        String srcUser = principal.getName();</span><br><span class="line">        <span class="comment">//解析用户和小熊</span></span><br><span class="line">        String[] args = body.split(<span class="string">","</span>);</span><br><span class="line">        String desUser = args[<span class="number">0</span>];</span><br><span class="line">        String message = <span class="string">"【"</span>+srcUser+<span class="string">"】给你发来消息:"</span>+args[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//发送到用户和监听地址</span></span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(desUser,<span class="string">"/queue/customer"</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><b><font color="#D2691E">此处的send，receive，sendUser，reveiveUser方法都是定义了Spring MVC的视图，这样就可以指向4个jsp视图。 sendMsg和sendToUser方法都标注了@MessageMapping，和@RequestMapping类似，它是定义WebSocket请求的路径，当然需要与WebSocketConfig所定义的前缀(“/request”)连用。</font></b></p></blockquote><blockquote><p><b><font color="#D2691E">sendMsg方法，它还会标注@SendTo注解，然后配置为”/sub/chat“，说明在执行完这个方法后，会将返回结果发送到订阅的这个目的地中，这样客户端就可以得到消息。sendToUser方法，这个方法存在Principal参数，如果你使用了SpringSecurit，这个参数就可以回去当前用户的消息，然后通过SimpMessagingTemplate的convertAndSendToUser方法，就可以设置发送给对应的目的地并且限定特定的用户消息。</font></b></p></blockquote><p><strong>3. 开启SpringSecurity认证过</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">securityConf</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义3个可以登录的内存用户</span></span><br><span class="line"></span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//加入三个内存用户  密码分别为加密后的p1，p2，p3</span></span><br><span class="line"></span><br><span class="line">        String pass1 = passwordEncoder.encode(<span class="string">"p1"</span>);</span><br><span class="line">        String pass2 = passwordEncoder.encode(<span class="string">"p2"</span>);</span><br><span class="line">        String pass3 = passwordEncoder.encode(<span class="string">"p3"</span>);</span><br><span class="line"></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(passwordEncoder)</span><br><span class="line">                .withUser(<span class="string">"user1"</span>)</span><br><span class="line">                .password(pass1)</span><br><span class="line">                .roles(<span class="string">"USER"</span>).and().withUser(<span class="string">"user2"</span>)</span><br><span class="line">                .password(pass2)</span><br><span class="line">                .roles(<span class="string">"ADMIN"</span>).and().withUser(<span class="string">"user3"</span>)</span><br><span class="line">                .password(pass3)</span><br><span class="line">                .roles(<span class="string">"USER"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义三个可以登录的用户</p></blockquote><p><strong>4. 发送WebSocket请求的客户端页面</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;stomp&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript"  src = "https://cdn.jsdelivr.net/sockjs/1/sockjs.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../js/stomp.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button id = "connect" onclick = "connect()"&gt;连接&lt;/button&gt;</span><br><span class="line">        &lt;button id = "disconnect" disabled = "disabled" onclick = "disconnect()"&gt;断开连接&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div id = <span class="string">"convertsationDiv"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label&gt;发送的内容&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;textarea id = "message" rows = "5"&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button id = "sendMsg" onclick="sendMsg()"&gt;Send&lt;/button&gt;</span><br><span class="line">        &lt;p id = "response"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stompClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setConnected</span><span class="params">(connected)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#connect"</span>).attr(&#123;<span class="string">"disabled"</span>:connected&#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#disconnect"</span>).attr(&#123;<span class="string">"disabled"</span>:!connected&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connected)&#123;</span><br><span class="line">            $(<span class="string">"#convertsationDiv"</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">"#convertsationDiv"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#response"</span>).html(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启socket连接</span></span><br><span class="line">    <span class="function">function <span class="title">connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义请求服务器的端点</span></span><br><span class="line">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">"/socket"</span>);</span><br><span class="line">        <span class="comment">//stomp客户端</span></span><br><span class="line">        stompClient = Stomp.over(socket);</span><br><span class="line">        <span class="comment">//连接服务器端点、</span></span><br><span class="line">        stompClient.connect(&#123;&#125;,function(frame)&#123;</span><br><span class="line">            <span class="comment">//建立连接后的回调</span></span><br><span class="line">            setConnected(<span class="keyword">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开socket连接</span></span><br><span class="line">    <span class="function">function <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stompClient = <span class="keyword">null</span>)&#123;</span><br><span class="line">            stompClient.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">        setConnected(<span class="keyword">false</span>);</span><br><span class="line">        Console.log(<span class="string">"Disconnected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向/request/send服务端发送消息</span></span><br><span class="line">    <span class="function">function <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = $(<span class="string">"#message"</span>).val();</span><br><span class="line">        <span class="comment">//发送消息到/request/send，其中/request是服务器定义的前缀</span></span><br><span class="line">        <span class="comment">// 而/send则是@MessageMapping所配置的路径</span></span><br><span class="line">        stompClient.send(<span class="string">"/request/send"</span>,&#123;&#125;,value);</span><br><span class="line">    &#125;</span><br><span class="line">    connect();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>客户端订阅消息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;stomp&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript"  src = "https://cdn.jsdelivr.net/sockjs/1/sockjs.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../js/stomp.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;span id = "receive"&gt;等待消息接收&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> noticeSocket = function()&#123;</span><br><span class="line">    <span class="comment">//连接服务端点</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> SockJS(<span class="string">"/socket"</span>);</span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="keyword">var</span> stompClient = Stomp.over(s);</span><br><span class="line">    stompClient.connect(&#123;&#125;,function()&#123;</span><br><span class="line">        console.log(<span class="string">"notice socket connected!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅消息地址</span></span><br><span class="line">        stompClient.subscribe(<span class="string">"/sub/chat"</span>,function(data)&#123;</span><br><span class="line">            $(<span class="string">'#receive'</span>).html(data.body);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">    noticeSocket();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>5. 发送用户消息页面</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;stomp&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript"  src = "https://cdn.jsdelivr.net/sockjs/1/sockjs.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../js/stomp.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button id = "connect" onclick = "connect()"&gt;连接&lt;/button&gt;</span><br><span class="line">        &lt;button id = "disconnect" disabled = "disabled" onclick = "disconnect()"&gt;断开连接&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div id = <span class="string">"convertsationDiv"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label&gt;发送给用户&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> id = <span class="string">"user"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label&gt;发送的内容&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;textarea id = "message" rows = "5"&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button id = "sendMsg" onclick="sendMsg()"&gt;Send&lt;/button&gt;</span><br><span class="line">        &lt;p id = "response"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stompClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setConnected</span><span class="params">(connected)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#connect"</span>).attr(&#123;<span class="string">"disabled"</span>:connected&#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#disconnect"</span>).attr(&#123;<span class="string">"disabled"</span>:!connected&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connected)&#123;</span><br><span class="line">            $(<span class="string">"#convertsationDiv"</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">"#convertsationDiv"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#response"</span>).html(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启socket连接</span></span><br><span class="line">    <span class="function">function <span class="title">connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义请求服务器的端点</span></span><br><span class="line">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">"/wsuser"</span>);</span><br><span class="line">        <span class="comment">//stomp客户端</span></span><br><span class="line">        stompClient = Stomp.over(socket);</span><br><span class="line">        <span class="comment">//连接服务器端点、</span></span><br><span class="line">        stompClient.connect(&#123;&#125;,function(frame)&#123;</span><br><span class="line">            <span class="comment">//建立连接后的回调</span></span><br><span class="line">            setConnected(<span class="keyword">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开socket连接</span></span><br><span class="line">    <span class="function">function <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stompClient = <span class="keyword">null</span>)&#123;</span><br><span class="line">            stompClient.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">        setConnected(<span class="keyword">false</span>);</span><br><span class="line">        Console.log(<span class="string">"Disconnected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向/request/send服务端发送消息</span></span><br><span class="line">    <span class="function">function <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = $(<span class="string">"#message"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> user = $(<span class="string">"#user"</span>).val();</span><br><span class="line">        <span class="comment">//用户和消息组成的字符串</span></span><br><span class="line">        <span class="keyword">var</span> text = user+<span class="string">","</span>+value;</span><br><span class="line">        stompClient.send(<span class="string">"/request/sendUser"</span>,&#123;&#125;,text);</span><br><span class="line">    &#125;</span><br><span class="line">    connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>订阅指定用户的消息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;stomp&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript"  src = "https://cdn.jsdelivr.net/sockjs/1/sockjs.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../js/stomp.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;span id = "receive"&gt;等待消息接收&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> noticeSocket = function()&#123;</span><br><span class="line">        <span class="comment">//连接服务端点</span></span><br><span class="line">        <span class="keyword">var</span> s = <span class="keyword">new</span> SockJS(<span class="string">"/wsuser"</span>);</span><br><span class="line">        <span class="comment">//客户端</span></span><br><span class="line">        <span class="keyword">var</span> stompClient = Stomp.over(s);</span><br><span class="line">        stompClient.connect(&#123;&#125;,function()&#123;</span><br><span class="line">            console.log(<span class="string">"notice socket connected!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//订阅消息地址</span></span><br><span class="line">            stompClient.subscribe(<span class="string">"/user/queue/customer"</span>,function(data)&#123;</span><br><span class="line">                $(<span class="string">'#receive'</span>).html(data.body);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    noticeSocket();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p><b><font color="#D2691E">stompClient.subscribe(“/user/queue/customer”,function(data){ $(‘#receive’).html(data.body);中的user前缀是不可缺少的，它代表订阅指定用户的消息</font></b></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异步实例&quot;&gt;&lt;a href=&quot;#异步实例&quot; class=&quot;headerlink&quot; title=&quot;异步实例&quot;&gt;&lt;/a&gt;异步实例&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;DarkBlue&quot;&gt;为了满足运维人员的需求，往往需要生成报表交由后台线程操作，生成
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="https://planeswalker1205.github.io/tags/Spring/"/>
    
      <category term="异步线程" scheme="https://planeswalker1205.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="IDEA Intellij" scheme="https://planeswalker1205.github.io/tags/IDEA-Intellij/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security</title>
    <link href="https://planeswalker1205.github.io/2020/07/22/Spring-Security/"/>
    <id>https://planeswalker1205.github.io/2020/07/22/Spring-Security/</id>
    <published>2020-07-22T07:26:06.000Z</published>
    <updated>2020-08-02T06:45:09.442Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="安全–Spring-Security"><a href="#安全–Spring-Security" class="headerlink" title="安全–Spring Security"></a>安全–Spring Security</h1><table><tr><td bgcolor="Aquamarine">    <b>为了使用SpringSecurity，需要在Maven配置文件中引入对应的依赖</b></td></tr></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="简单安全认证"><a href="#简单安全认证" class="headerlink" title="简单安全认证"></a>简单安全认证</h2><blockquote><p>引入依赖完成后，直接启动SpringBoot的应用也会启用Spring Security，启动完后可以看到如下打印随机生成密码的日志(需保证日志级别为INFO或以下才能看到)</p></blockquote><p><img src="/2020/07/22/Spring-Security/QQ%E6%88%AA%E5%9B%BE20200722153547.png" alt></p><font color="BlueViolet">这时访问URL http://localhost:8080/ 相关便会进入一个登录页面。使用用户名"user",密码为以上随机生成的密码即可登录成功</font><p><img src="/2020/07/22/Spring-Security/QQ%E6%88%AA%E5%9B%BE20200722154351.png" alt></p><p><strong>Spring Boot的自动配置机制，允许开发者快速修改用户名和密码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#自定义用户名和密码</span><br><span class="line">spring.security.user.name=myusers</span><br><span class="line">spring.security.user.password=darksouls</span><br></pre></td></tr></table></figure><p>这样就可以使用上述配置的用户名和密码而不再使用固定的用户名和随机生成的密码</p><h2 id="使用WebSecurityConfigurerAdapter自定义-自定义用户服务信息"><a href="#使用WebSecurityConfigurerAdapter自定义-自定义用户服务信息" class="headerlink" title="使用WebSecurityConfigurerAdapter自定义/自定义用户服务信息"></a>使用WebSecurityConfigurerAdapter自定义/自定义用户服务信息</h2><table><tr><td bgcolor="#FFFAF0">    <b>在Spring Security中默认时没有任何用户配置的，而在SpringBoot中，如果没有用户的配置，它将会自动生成一个名称为user，密码通过随机生成的用户。为了克服这个问题，下面将讨论如何使用内存签名服务，数据库签名服务和自定义签名服务。    </b></td></tr></table><h3 id="使用内存签名服务"><a href="#使用内存签名服务" class="headerlink" title="使用内存签名服务"></a>使用内存签名服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ***</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">securityConf</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//密码编码器</span></span><br><span class="line"></span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//使用内存存储</span></span><br><span class="line">        InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; userConfig = auth.inMemoryAuthentication()</span><br><span class="line">                <span class="comment">//设置密码编译器</span></span><br><span class="line">                .passwordEncoder(passwordEncoder);</span><br><span class="line">        <span class="comment">//生成abc加密后的密码</span></span><br><span class="line">        String secrePass = passwordEncoder.encode(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc加密后的密码:"</span>+secrePass);</span><br><span class="line">        <span class="comment">//注册用户admin，密码abc，并赋予USER和ADMIN权限</span></span><br><span class="line">        userConfig.withUser(<span class="string">"admin"</span>)</span><br><span class="line">                .password(secrePass)</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>,<span class="string">"ROLE_ADMIN"</span>);</span><br><span class="line">        <span class="comment">//生成123456加密后的密码</span></span><br><span class="line">        String secreONETWO = passwordEncoder.encode(<span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(<span class="string">"123456加密后的密码:"</span>+secreONETWO);</span><br><span class="line">        <span class="comment">//注册用户myuser，密码为123456并赋予USER角色权限</span></span><br><span class="line">        userConfig.withUser(<span class="string">"myuser"</span>)</span><br><span class="line">                .password(secreONETWO)</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Spring 5的Security中都要求使用密码编译器，否则会发生异常</p></blockquote><h3 id="使用数据库定义用户认证服务"><a href="#使用数据库定义用户认证服务" class="headerlink" title="使用数据库定义用户认证服务"></a>使用数据库定义用户认证服务</h3><p><strong>1. 创建用户表，角色表，用户角色表</strong></p><p><font color="orange">用户角色表关联用户表和角色表</font></p><p><img src="/2020/07/22/Spring-Security/tabUser.png" alt></p><p><img src="/2020/07/22/Spring-Security/tabRole.png" alt></p><p><img src="/2020/07/22/Spring-Security/tabUserRole.png" alt></p><p><strong>2. 使用数据库验证</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 数据库定义用户认证服务</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注入数据源</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//使用用户名称查询密码</span></span><br><span class="line">String pwdQuery = <span class="string">" select user_name,user_password,available from tab_user where user_name = ? "</span>;</span><br><span class="line"><span class="comment">//使用用户名称查询角色信息</span></span><br><span class="line">String roleQuery = <span class="string">" select u.user_name,r.role_name from tab_user u,tab_user_role ur,tab_role r where u.id = ur.user_id and r.id = ur.role_id and u.user_name=? "</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码编译器</span></span><br><span class="line">    auth.</span><br><span class="line">            jdbcAuthentication()</span><br><span class="line">            <span class="comment">//密码编译器</span></span><br><span class="line">            .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">            <span class="comment">//数据源</span></span><br><span class="line">            .dataSource(dataSource)</span><br><span class="line">            <span class="comment">//查询用户</span></span><br><span class="line">            .usersByUsernameQuery(pwdQuery)</span><br><span class="line">            <span class="comment">//赋予权限</span></span><br><span class="line">            .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意方法中<font color="#0000FF"> .passwordEncoder(new BCryptPasswordEncoder())</font>中的<font color="#0000FF">new BCryptPasswordEncoder()</font>方法。Spring 5的Security中都要求使用密码编码器，这里指定的是<strong>BCryptPasswordEncoder</strong>实例，如果不想指定的话可以写成<font color="#0000FF">NoOpPasswordEncoder.getInstance()</font>，不过此方法已经画横线了所以最好不用。</p></blockquote><blockquote><p><font color="#0000FF">usersByUsernameQuery</font>方法通过定义的sql语句返回3个列。分别是用户名，密码和布尔值，这样就可以对用户名和密码进行验证了。<font color="#0000FF">authoritiesByUsernameQuery</font>方法会用roleQuery定义的SQL通过用户名称查找角色名称，根据查询的结果赋予权限，如果这条SQL语句返回的时多条，那么就会给这个用户赋予多个角色</p></blockquote><p><strong>值得一提的是，如果使用了<font color="blue">BCryptPasswordEncoder</font>类型的编码器进行加密，那么在保存在数据库中密码的格式就需要是BCryt格式的，否则就会报错。比如密码为”123456789”,那么保存在数据库中的就应该是<font color="#7FFFD4">$2a$10$rrZC9HLI2CwN4WWrVSf9Ie0APh.WVRAzvdcX0Pzm5MpIqjJKjNaNK</font>，切记这只是保存在数据库中的密码格式，如果登录验证时使用的密码一定是”123456789”，它会转换成BCryt格式的密文进行比对。而不是<font color="#7FFFD4">$2a$10$rrZC9HLI2CwN4WWrVSf9Ie0APh.WVRAzvdcX0Pzm5MpIqjJKjNaNK</font>。</strong></p><h3 id="限制请求"><a href="#限制请求" class="headerlink" title="限制请求"></a>限制请求</h3><table><tr><td bgcolor="Beige">    <b>对于不同的角色而言，其访问的权限也是不一样的。通过继承的抽象类WebSecurityConfigurerAdapter的configure(HttpSecurity)方法便能实现对于不同角色赋予不同权限的功能    </b></td></tr></table><p><strong>1. 配置请求路径访问权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">securityConf</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库定义用户认证服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//注入数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//使用用户名称查询密码</span></span><br><span class="line">    String pwdQuery = <span class="string">" select user_name,user_password,available from tab_user where user_name = ? "</span>;</span><br><span class="line">    <span class="comment">//使用用户名称查询角色信息</span></span><br><span class="line">    String roleQuery = <span class="string">" select u.user_name,r.role_name from tab_user u,tab_user_role ur,tab_role r where u.id = ur.user_id and r.id = ur.role_id and u.user_name=? "</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码编译器</span></span><br><span class="line">        auth.</span><br><span class="line">                jdbcAuthentication()</span><br><span class="line">                <span class="comment">//密码编译器</span></span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                <span class="comment">//数据源</span></span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                <span class="comment">//查询用户</span></span><br><span class="line">                .usersByUsernameQuery(pwdQuery)</span><br><span class="line">                <span class="comment">//赋予权限</span></span><br><span class="line">                .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">         httpSecurity</span><br><span class="line">                 .authorizeRequests()</span><br><span class="line">                 .antMatchers(<span class="string">"/models/mod1"</span>).hasAnyRole(<span class="string">"SYSTEM"</span>,<span class="string">"SUPER"</span>,<span class="string">"USER"</span>)</span><br><span class="line">                 .antMatchers(<span class="string">"/session/**"</span>).hasAnyAuthority(<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line">                 .anyRequest().permitAll()</span><br><span class="line">                 .and().anonymous()</span><br><span class="line">                 .and().formLogin()</span><br><span class="line">                 .and().httpBasic();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>着重在于方法<strong><font color="red">configure(HttpSecurity httpSecurity)</font></strong>。<font color="orange">antMatchers</font>方法指定了请求的路径。<font color="orange">hasAnyRole</font>指定了该路径访问的角色权限为”ROLE_SYSTEM”,”ROLE_SUPER”,”ROLE_USER”.第二个<font color="orange">antMatchers</font>方法限定”session”下所有请求权限赋予角色”ROLE_ADMIN”.注意，<font color="orange">hasAnyRole</font>方法会自动加入前缀“ROLE_”,<font color="orange">hasAnyAuthority</font>方法则不会，此方法可以使用自定义不带ROLE的角色。<font color="orange">.anyRequest().permitAll()</font>表示其他路径允许签名后访问，<font color="orange">and().anonymous()</font>表示对于没有配置权限的其他请求允许匿名访问。</p></blockquote><p><strong>2. Spring表达式设置权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring 表达式设置权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    httpSecurity.authorizeRequests()</span><br><span class="line"><span class="comment">//限定角色只有ROLE_USER或者ROLE_ADMIN</span></span><br><span class="line">            .antMatchers(<span class="string">"/models/mod1"</span>).access(<span class="string">"hasAnyRole('USER') or hasAnyRole('ADMIN')"</span>)</span><br><span class="line"><span class="comment">//限定角色只有testone，要求是完整登录</span></span><br><span class="line">            .antMatchers(<span class="string">"/session/**"</span>).access(<span class="string">"hasAnyAuthority('testone') &amp;&amp; isFullyAuthenticated()"</span>)</span><br><span class="line"><span class="comment">//使用记住我功能</span></span><br><span class="line">            .and().rememberMe()</span><br><span class="line"><span class="comment">//使用Spring Security默认登录页面</span></span><br><span class="line">            .and().formLogin()</span><br><span class="line"><span class="comment">//启用http基础验证</span></span><br><span class="line">            .and().httpBasic();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h3><p><strong>自定义登录界面</strong></p><p><strong><font color="gray">1. 配置登录请求和记住我</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring 表达式设置权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    httpSecurity.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/models/mod1"</span>).access(<span class="string">"hasAnyRole('USER') or hasAnyRole('ADMIN')"</span>)</span><br><span class="line">            .antMatchers(<span class="string">"/session/**"</span>).access(<span class="string">"hasAnyAuthority('testone') &amp;&amp; isFullyAuthenticated()"</span>)</span><br><span class="line">            .and().rememberMe().tokenValiditySeconds(<span class="number">86400</span>).key(<span class="string">"remember-me-key"</span>)</span><br><span class="line">            .and().formLogin().loginPage(<span class="string">"/login/page"</span>).defaultSuccessUrl(<span class="string">"/admin/welcome"</span>)</span><br><span class="line">            .and().logout().logoutUrl(<span class="string">"/logout"</span>).logoutSuccessUrl(<span class="string">"/logout/page"</span>)</span><br><span class="line">            .and().httpBasic().realmName(<span class="string">"my_basic_name"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的rememberMe方法意思是“记住我”功能，有效时间为1天（86400s）,在浏览器中将使用Cookie以键“remember-me-key”进行保存、loginPage方法是指定登录的路径(login/page)，defaultSuccessUrl为默认跳转路径。</p></blockquote><p><strong><font color="gray">2. 指定的login/page所映射的路径既可以用传统的控制器映射，也可以使用新增映射关系完成</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 增加映射关系</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使得/login/page映射为login.jsp</span></span><br><span class="line"></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"user/login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使得/logout/page映射为/logout_welcome.jsp</span></span><br><span class="line"></span><br><span class="line">        registry.addViewController(<span class="string">"/logout/page"</span>).setViewName(<span class="string">"user/logout_welcome"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使得/loogout映射为logout.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/logout"</span>).setViewName(<span class="string">"user/logout"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addViewController(<span class="string">"/admin/welcome"</span>).setViewName(<span class="string">"user/welcome"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="gray">3. 自定义登录界面</font></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;% System.out.println(<span class="string">"视图渲染"</span>);%&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"/login/page"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id = <span class="string">"username"</span> name = <span class="string">"username"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id = <span class="string">"password"</span> name = <span class="string">"password"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> id = <span class="string">"remember_me"</span> name = <span class="string">"remember-me"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> id = <span class="string">"$&#123;_csrf.parameterName&#125;"</span> name = <span class="string">"$&#123;_csrf.parameterName&#125;"</span> value=<span class="string">"$&#123;_csrf.token&#125;"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此处的表单提交的action定义为/login/page,这样安全登录拦截器就会拦截这些参数。此处要求method为post，用户名为username，密码为password，记住我为remember-me且为checkbox类型</p></blockquote><p><strong><font color="gray">4. 登出页面</font></strong></p><p>logout_welcome.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登出页面&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;您已登出系统&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>logout.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登出&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/logout"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"登出"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> id = <span class="string">"$&#123;_csrf.parameterName&#125;"</span> name = <span class="string">"$&#123;_csrf.parameterName&#125;"</span> value=<span class="string">"$&#123;_csrf.token&#125;"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安全–Spring-Security&quot;&gt;&lt;a href=&quot;#安全–Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;安全–Spring Security&quot;&gt;&lt;/a&gt;安全–Spring Secu
      
    
    </summary>
    
    
    
      <category term="Intellij IDEA" scheme="https://planeswalker1205.github.io/tags/Intellij-IDEA/"/>
    
      <category term="Spring" scheme="https://planeswalker1205.github.io/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://planeswalker1205.github.io/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>REST风格</title>
    <link href="https://planeswalker1205.github.io/2020/07/19/REST%E9%A3%8E%E6%A0%BC/"/>
    <id>https://planeswalker1205.github.io/2020/07/19/REST%E9%A3%8E%E6%A0%BC/</id>
    <published>2020-07-19T06:58:17.000Z</published>
    <updated>2020-07-28T09:15:04.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST简述"><a href="#REST简述" class="headerlink" title="REST简述"></a>REST简述</h1><h2 id="REST名词"><a href="#REST名词" class="headerlink" title="REST名词"></a>REST名词</h2><p><strong>1. 资源:是一个具体存在的对象，它可以是系统权限用户，角色和菜单等。也可以是一些媒体类型，如文本，图片，歌曲</strong></p><p><strong>2. 表现层:表现这个资源</strong></p><p><strong>3. 状态转换:现实中的资源不是一层不变的，它是一个变化的过程，一个资源可以经历创建，访问，修改和删除的过程。</strong></p><h2 id="开发REST风格端点"><a href="#开发REST风格端点" class="headerlink" title="开发REST风格端点"></a>开发REST风格端点</h2><h3 id="Spring-4-3之后除了-RequestMapping外，还可以使用以下5个注解"><a href="#Spring-4-3之后除了-RequestMapping外，还可以使用以下5个注解" class="headerlink" title="Spring 4.3之后除了@RequestMapping外，还可以使用以下5个注解:"></a>Spring 4.3之后除了@RequestMapping外，还可以使用以下5个注解:</h3><p><strong>1. @GetMapping:对应HTTP的GET请求，获取资源</strong></p><p><strong>2. @PostMapping: 对应HTTP的POST请求，创建资源</strong></p><p><strong>3. @PutMapping: 对应HTTP的PUT请求，提交所有的资源属性以修改资源</strong></p><p><strong>4. @PatchMapping: 对应HTTP的PATCH请求，提交资源部分修改的属性</strong></p><p><strong>5. @DeleteMapping: 对应HTTP的DELETE请求，删除服务器端的资源。</strong></p><blockquote><table><tr><td bgcolor="#F0FFFF">通过这些注解就能把URI定位到对应的控制器方法上。通过注解@PathVariable进行获取，这样就能满足REST风格传递参数的要求。对于复杂的参数，比如传递十几个的字段，可以考虑请求体JSON的方式提交给服务器。</td></tr></table></blockquote><h2 id="RestController使用"><a href="#RestController使用" class="headerlink" title="RestController使用"></a>RestController使用</h2><table><tr><td bgcolor="#F5F5F5">因为现在的前后端分离，所以使用JSOM作为前后端交互已经十分普遍。如果每个方法都加上@ResponseBody才能将数据转换为JSON，显然有些冗余。@RestController注解，通过它可以将控制器返回的对象转换为JSON数据集。</td></tr></table><table><tr><td bgcolor="#FFF5EE">使用此注解就能让之前的getUser方法返回的对象转变为JSON数据集了，为了使得JSP视图也能够被渲染成功，原本通过直接返回字符串的方式就不能使用了。这时可以使用ModelAndView的返回，通过视图名称找到对应的视图，将数据模型进行渲染，展示JSP视图给用户观看。</td></tr></table><h2 id="渲染结果"><a href="#渲染结果" class="headerlink" title="渲染结果"></a>渲染结果</h2><p>在@RequestMapping，@GetMapping中还存在consumes和produces属性。欠着代表的是限制该方法接受什么类型的请求体，后者代表的是限定返回的媒体类型，仅当request请求头中的类型中包含该指定的类型才返回。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"user2/name/&#123;id&#125;"</span>,consumes=MediaType.All_VALUE,prodices=MediaType.TEXT_PLAIN_VALUE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">User user = userService.getUser(id);</span><br><span class="line"><span class="keyword">return</span> user.getUserName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上表示接收任意的请求体，限定返回的媒体类型为文本。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST简述&quot;&gt;&lt;a href=&quot;#REST简述&quot; class=&quot;headerlink&quot; title=&quot;REST简述&quot;&gt;&lt;/a&gt;REST简述&lt;/h1&gt;&lt;h2 id=&quot;REST名词&quot;&gt;&lt;a href=&quot;#REST名词&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring MVC学习笔记v1</title>
    <link href="https://planeswalker1205.github.io/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/"/>
    <id>https://planeswalker1205.github.io/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/</id>
    <published>2020-06-17T04:51:03.000Z</published>
    <updated>2020-07-18T08:14:18.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="简单页面配置"><a href="#简单页面配置" class="headerlink" title="简单页面配置"></a>简单页面配置</h2><p><strong>1. 控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userServiceImpl uSer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/resUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getUserOne</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        ServerUser sUser = uSer.getServerUser(id);</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">"user/detail"</span>);</span><br><span class="line">        mav.addObject(<span class="string">"user"</span>,sUser);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 引入关于jsp、jstl的依赖并通过application.properties定制InternalResourceViewResolver初始化.</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><p><strong>3. jsp视图</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户备注<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.remark&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4. jsp视图的位置</strong></p><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200617135014.png" alt></p><h2 id="使用JSON视图-MappingJackson2JsonView转换出JSON"><a href="#使用JSON视图-MappingJackson2JsonView转换出JSON" class="headerlink" title="使用JSON视图(MappingJackson2JsonView转换出JSON)"></a>使用JSON视图(MappingJackson2JsonView转换出JSON)</h2><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detailsForjson"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">detailsForJson</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">       <span class="comment">//访问模型层得到数据</span></span><br><span class="line">       ServerUser oUser = uSer.getServerUser(id);</span><br><span class="line">       <span class="comment">//模型和视图</span></span><br><span class="line">       ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       <span class="comment">//生成Json视图</span></span><br><span class="line">       MappingJackson2JsonView jsonView = <span class="keyword">new</span> MappingJackson2JsonView();</span><br><span class="line">       mav.setView(jsonView);</span><br><span class="line">       <span class="comment">//加入模型</span></span><br><span class="line">       mav.addObject(oUser);</span><br><span class="line">       <span class="keyword">return</span> mav;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意到这里在控制器的方法中模型和视图中捆绑了JSON视图(MappingJackson2JsonView),这里的JSON视图是没有视图解析器的定位视图的，它并不是一个逻辑视图，只是需要将数据模型转换为json。<br>。</p></blockquote><h2 id="Spring-MVC实例"><a href="#Spring-MVC实例" class="headerlink" title="Spring MVC实例"></a>Spring MVC实例</h2><h3 id="1-定制InternalResourceViewResolver初始化"><a href="#1-定制InternalResourceViewResolver初始化" class="headerlink" title="1. 定制InternalResourceViewResolver初始化"></a>1. 定制InternalResourceViewResolver初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><blockquote><p>通过这样的配置，就能在SpringBoot的机制下定制InternalResourceViewResolver这个视图解析器的初始化，也就是在返回视图名称之后，它会以前缀和后缀以及视图的名称组成全路径定位视图。</p></blockquote><h3 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/tablePage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">disTablePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    List&lt;ServerUser&gt; suList = uSer.getTarServerUser(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    mv.addObject(<span class="string">"suserList"</span>,suList);</span><br><span class="line">    mv.setViewName(<span class="string">"user/table"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/likeData"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ServerUser&gt; <span class="title">likeSeruList</span><span class="params">(@RequestParam(value = <span class="string">"suName"</span>,required = <span class="keyword">false</span>)</span> String sName, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"suRemark"</span>,required = <span class="keyword">false</span>)</span> String sRemark)</span>&#123;</span><br><span class="line">    <span class="comment">//访问模型层得到数据</span></span><br><span class="line">    List&lt;ServerUser&gt; suserList = uSer.getTarServerUser(sName,sRemark);</span><br><span class="line">    <span class="keyword">return</span> suserList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该控制器的第一个方法是指当访问到它时它将会跳转到table.jsp页面，且将查询到的用户列表捆绑到模型和视图中，这样当跳转到jsp页面时数据将会显示出来。<br>第二个方法，如果对当前表格数据进行查询时可以通过<strong>@RequestParam</strong>注解传递参数进行查询。因为它标注了@ResponseBody,于是SpringMVC就知道最终需要将返回的结果转换为JSON。</p></blockquote><h3 id="3-jsp页面"><a href="#3-jsp页面" class="headerlink" title="3. jsp页面"></a>3. jsp页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;用户列表&lt;/title&gt;</span><br><span class="line">    &lt;link rel = <span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href = <span class="string">"../../easyUI/themes/default/easyui.css"</span>&gt;</span><br><span class="line">    &lt;link rel = <span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href = <span class="string">"../../easyUI/themes/icon.css"</span>&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../easyUI/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type = "text/javascript" src = "../../easyUI/jquery.easyui.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"cc"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-layout"</span> style=<span class="string">"width:600px;height:400px;"</span>&gt;</span><br><span class="line">    &lt;div data-options = <span class="string">"region:'north'"</span> style = <span class="string">"height:70px;"</span>&gt;</span><br><span class="line">        &lt;form id = <span class="string">"searchForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    用户名称:</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input id = <span class="string">"userName"</span> name = <span class="string">"userName"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"easyui-textbox"</span> data-options = <span class="string">"prompt:'请输入用户名称...'"</span></span><br><span class="line">                    style = <span class="string">"width:100%;height:32px;"</span>&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        备注:</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input id = <span class="string">"note"</span> name = <span class="string">"note"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"easyui-textbox"</span> data-options = <span class="string">"prompt:'请输入备注...'"</span></span><br><span class="line">                               style = <span class="string">"width:100%;height:32px;"</span>&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href = "#" class = "easyui-linkbutton" data-options = "iconCls:'icon-search'" style="width: 80px;" onclick = "onSearch()"&gt;查询&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div data-options = <span class="string">"region:'center',title:'用户列表',iconCls:'icon-ok'"</span>&gt;</span><br><span class="line">&lt;table id = <span class="string">"dg"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"easyui-datagrid"</span> data-options = <span class="string">"border:false,singleSelect:true,fit:true,fitColumns:true"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th data-options = <span class="string">"field:'id'"</span> width=<span class="string">"80"</span>&gt;</span><br><span class="line">                    编号</span><br><span class="line">                &lt;/th&gt;</span><br><span class="line">                &lt;th data-options = <span class="string">"field:'name'"</span> width=<span class="string">"100"</span>&gt;</span><br><span class="line">                    用户名称</span><br><span class="line">                &lt;/th&gt;</span><br><span class="line">                &lt;th data-options = <span class="string">"field:'phone'"</span> width=<span class="string">"100"</span>&gt;</span><br><span class="line">                    用户电话</span><br><span class="line">                &lt;/th&gt;</span><br><span class="line">                &lt;th data-options = <span class="string">"field:'remark'"</span> width=<span class="string">"80"</span>&gt;</span><br><span class="line">                    备注</span><br><span class="line">                &lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"$&#123;suserList&#125;"</span> <span class="keyword">var</span> = <span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.phone&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.remark&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">onSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> opts = $(<span class="string">"#dg"</span>).datagrid(<span class="string">"options"</span>);</span><br><span class="line">        opts.url = <span class="string">"./likeData"</span>;</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        <span class="keyword">var</span> suName = $(<span class="string">"#userName"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> suRemark = $(<span class="string">"#note"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> params = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(suName!=<span class="keyword">null</span>&amp;&amp;suName.trim()!=<span class="string">""</span>)&#123;</span><br><span class="line">            params.suName = suName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(suRemark!=<span class="keyword">null</span>&amp;&amp;suRemark.trim()!=<span class="string">""</span>)&#123;</span><br><span class="line">            params.suRemark = suRemark;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#dg"</span>).datagrid(<span class="string">"load"</span>,params);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol><li>JSP页面及静态资源所在位置:</li></ol><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200622175140.png" alt></p><ol start="2"><li>JSP页面所需要的依赖关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;tomcat-embed-jasper&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>首先，在我们访问控制器第一个方法后就会跳转到jsp页面，因为我们绑定了所查询到的用户列表数据，可以直接使用jstl语言将查询到的数据展示在表格中。然后写查询的js方法，在输入用户名称或者是备注后将数据传入到后台中。</p></blockquote><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200622175618.png" alt></p><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200622175640.png" alt></p><p><strong>注意传递参数值的一致</strong></p><blockquote><p> 注意一点的是，在jsp页面中使用的是easyui的框架，所以表格头<strong>th</strong>的<strong>field</strong>的属性要与封装类的属性一致，这样在查询后返回的数据才能完整的显示在表格中。</p></blockquote><h2 id="获取控制器参数"><a href="#获取控制器参数" class="headerlink" title="获取控制器参数"></a>获取控制器参数</h2><h4 id="1-无注解获取参数"><a href="#1-无注解获取参数" class="headerlink" title="1.无注解获取参数"></a>1.无注解获取参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/no/annotation"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getNoAnnotationParam</span><span class="params">(Integer par1,Long par2,String str3)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; parMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    parMap.put(<span class="string">"par1"</span>,par1);</span><br><span class="line">    parMap.put(<span class="string">"par2"</span>,par2);</span><br><span class="line">    parMap.put(<span class="string">"str3"</span>,str3);</span><br><span class="line">    <span class="keyword">return</span> parMap;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问:<a href="http://localhost:8080/users/no/annotation?par1=3&amp;par2=4&amp;str3=aaa" target="_blank" rel="noopener">http://localhost:8080/users/no/annotation?par1=3&amp;par2=4&amp;str3=aaa</a></p><p><strong>注意:参数的名称要与http请求的参数名称保持一致。</strong></p><h4 id="2-RequestParam传递参数"><a href="#2-RequestParam传递参数" class="headerlink" title="2.@RequestParam传递参数"></a>2.@RequestParam传递参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/have/annotationParam"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getParamMap</span><span class="params">(@RequestParam(value = <span class="string">"par1"</span>,required = <span class="keyword">false</span>)</span> String par1,@<span class="title">RequestParam</span><span class="params">(value = <span class="string">"par2"</span>,required = <span class="keyword">false</span>)</span> String par2)</span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; paraMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    paraMap.put(<span class="string">"par1"</span>,par1);</span><br><span class="line">    paraMap.put(<span class="string">"par2"</span>,par2);</span><br><span class="line">    <span class="keyword">return</span> paraMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>required属性可以支持传递的参数为空</p></blockquote><h4 id="3-传递数组"><a href="#3-传递数组" class="headerlink" title="3.传递数组"></a>3.传递数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/arrParam"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getArrParameter</span><span class="params">(<span class="keyword">int</span>[] intarr,<span class="keyword">long</span>[] longarr,String[] strarr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; arrMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    arrMap.put(<span class="string">"intarr"</span>,intarr);</span><br><span class="line">    arrMap.put(<span class="string">"longarr"</span>,longarr);</span><br><span class="line">    arrMap.put(<span class="string">"strarr"</span>,strarr);</span><br><span class="line">    <span class="keyword">return</span> arrMap;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>访问地址<a href="http://localhost:8080/users/arrParam?intarr=1,2,3&amp;longarr=4,5,6&amp;strarr=a,b,c" target="_blank" rel="noopener">http://localhost:8080/users/arrParam?intarr=1,2,3&amp;longarr=4,5,6&amp;strarr=a,b,c</a></p></blockquote><blockquote><p>可以看到，传递数组时，每个参数的数组元素只需要通过逗号分隔开即可</p></blockquote><h4 id="4-传递JSON"><a href="#4-传递JSON" class="headerlink" title="4.传递JSON"></a>4.传递JSON</h4><p><strong>搭建表单JSP文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;添加用户&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    用户名称：</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input id = <span class="string">"userName"</span> name = <span class="string">"userName"</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    备注：</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input id = <span class="string">"userRemark"</span> name = <span class="string">"userRemark"</span>/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan=<span class="string">"2"</span>&gt;</span><br><span class="line">                    &lt;button id = <span class="string">"userSubmit"</span>&gt;</span><br><span class="line">                        提交</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">       $(<span class="string">"#userSubmit"</span>) .click(function()&#123;</span><br><span class="line">           <span class="comment">//获取表单输入的值</span></span><br><span class="line">          <span class="keyword">var</span> userName = $(<span class="string">"#userName"</span>).val();</span><br><span class="line">          <span class="keyword">var</span> userRemark = $(<span class="string">"#userRemark"</span>).val();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> params = &#123;&#125;;</span><br><span class="line">          params.name = userName;</span><br><span class="line">          params.remark = userRemark;</span><br><span class="line"></span><br><span class="line">          $.post(&#123;</span><br><span class="line">              url : <span class="string">"./addUserInfo"</span>,</span><br><span class="line">              <span class="comment">//告知传递的类型为json，不可缺少</span></span><br><span class="line">              contentType : <span class="string">"application/json"</span>,</span><br><span class="line">              <span class="comment">//将JSON转化为字符串传递</span></span><br><span class="line">              data : JSON.stringify(params),</span><br><span class="line">              <span class="comment">//成功后的回调方法</span></span><br><span class="line">              success : function(result)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(result == <span class="keyword">null</span>||result.id == <span class="keyword">null</span>)&#123;</span><br><span class="line">                      alert(<span class="string">"插入失败!"</span>);</span><br><span class="line">                      <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  alert(<span class="string">"插入成功！！"</span>);</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器方法(访问页面和添加数据的方法)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问添加用户对象的页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUserPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/user/add"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/addUserInfo"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerUser <span class="title">addServerUser</span><span class="params">(@RequestBody ServerUser sUser)</span></span>&#123;</span><br><span class="line">    ServerUser serUser = uSer.insertServerUser(sUser);</span><br><span class="line">    <span class="keyword">return</span> serUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在控制器的第二个方法addServerUser中，参数标注为@RequestBody，意味着它将接受前端提交的JSON请求体，而前端JSON数据的请求体与ServerUser类之间的属性名称是保持一致的，这样SpringMVC就会通过这层映射关系将JSON请求体转换为ServerUser对象。</p></blockquote><p><strong>添加测试</strong></p><h4 id="5-通过URL传递数据"><a href="#5-通过URL传递数据" class="headerlink" title="5.通过URL传递数据"></a>5.通过URL传递数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过URL传递数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerUser <span class="title">getUrlParamSerUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uSer.getServerUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一些网站中，提供了REST风格，这时的参数往往通过URL传递。例如获取编号为1的用户，URL就要写为/user/1，1代表用户编号。可以通过处理器映射和注解@PathVariable的组合获取URL参数。例如以上控制器的方法就可以使用网址<a href="http://localhost:8080/users/16" target="_blank" rel="noopener">http://localhost:8080/users/16</a>访问编号为16的用户信息。</p></blockquote><p><strong>JSP页面</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action = <span class="string">"./formatParam"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type = <span class="string">"text"</span> name = <span class="string">"date1"</span> value = <span class="string">"2019-12-15"</span>/&gt;</span><br><span class="line">    &lt;input type = <span class="string">"text"</span> name = <span class="string">"number1"</span> value = <span class="string">"1,234,567.89"</span>/&gt;</span><br><span class="line">    &lt;input type = <span class="string">"submit"</span> value = <span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取格式化参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/formatParam"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getFormatterParams</span><span class="params">(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</span> Date date1, @<span class="title">NumberFormat</span><span class="params">(pattern = <span class="string">"#,###.##"</span>)</span> Double number1)</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; formatNums = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    formatNums.put(<span class="string">"date"</span>,date1);</span><br><span class="line">    formatNums.put(<span class="string">"nums"</span>,number1);</span><br><span class="line">    <span class="keyword">return</span> formatNums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交后页面数据显示:</p><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200624191746.png" alt></p><h4 id="6-一对一转换器"><a href="#6-一对一转换器" class="headerlink" title="6.一对一转换器"></a>6.一对一转换器</h4><p><strong>字符串用户转换器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToUserConvert</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">ServerUser</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerUser <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        ServerUser suser = <span class="keyword">new</span> ServerUser();</span><br><span class="line">        String[] strArr = s.split(<span class="string">"-"</span>);</span><br><span class="line">        Long id = Long.parseLong(strArr[<span class="number">0</span>]);</span><br><span class="line">        String userName = strArr[<span class="number">1</span>];</span><br><span class="line">        String remark = strArr[<span class="number">2</span>];</span><br><span class="line">        suser.setId(id);</span><br><span class="line">        suser.setName(userName);</span><br><span class="line">        suser.setRemark(remark);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> suser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的类标注为@Component，并且实现了Converter接口，这样Spring就会将这个类扫描并装配到IoC容器中。这里的泛型指定为String和ServerUser，这样SpringMVC就会通过HTTP的参数类型（String）和控制器的参数类型（ServerUser）进行匹配，就可以从注册机制中发现这个转换类，这样就能够将参数转换出来。</p></blockquote><p><strong>控制器验证</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/convertTest"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerUser <span class="title">getUserByConverter</span><span class="params">(ServerUser serverUser)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serverUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入地址：<a href="http://localhost:8080/users/convertTest?serverUser=1--note_1&amp;date=2018-01-01" target="_blank" rel="noopener">http://localhost:8080/users/convertTest?serverUser=1--note_1&amp;date=2018-01-01</a></p><p>如此一来就可以得到用户的id和备注</p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="JSR-303验证"><a href="#JSR-303验证" class="headerlink" title="JSR-303验证"></a>JSR-303验证</h3><p><strong>验证POJO类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Range;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Alias</span>(<span class="string">"validdate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorPojo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"Id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long Id;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"日期不能为空"</span>)</span><br><span class="line">    <span class="meta">@Future</span>(message = <span class="string">"需要一个将来的日期"</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date Date;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@DecimalMin</span>(value = <span class="string">"0.1"</span>)</span><br><span class="line">    <span class="meta">@DecimalMax</span>(value = <span class="string">"10000.00"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double DoubleValue;</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>,message = <span class="string">"最小值为1"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">3</span>,message = <span class="string">"最大值为3"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer IntegerValue;</span><br><span class="line">    <span class="meta">@org</span>.hibernate.validator.constraints.Range(min = <span class="number">1</span>,max = <span class="number">888</span>,message = <span class="string">"范围1-888"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Long Range;</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String Email;</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">20</span>,max = <span class="number">30</span>,message = <span class="string">"字段长度20-30"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String Size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *set/get</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ajax发送请求</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;验证用户&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">            <span class="comment">//获取表单输入的值</span></span><br><span class="line">            <span class="keyword">var</span> pojo = &#123;</span><br><span class="line">                id:<span class="keyword">null</span>,</span><br><span class="line">                date:<span class="string">"2017-08-08"</span>,</span><br><span class="line">                doubleValue:<span class="number">1999999.09</span>,</span><br><span class="line">                integerValue:<span class="number">100</span>,</span><br><span class="line">                range:<span class="number">1000</span>,</span><br><span class="line">                email:<span class="string">"email"</span>,</span><br><span class="line">                size:<span class="string">'adv1212'</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url : <span class="string">"./validate"</span>,</span><br><span class="line">                <span class="comment">//告知传递的类型为json，不可缺少</span></span><br><span class="line">                contentType : <span class="string">"application/json"</span>,</span><br><span class="line">                <span class="comment">//将JSON转化为字符串传递</span></span><br><span class="line">                data : JSON.stringify(pojo),</span><br><span class="line">                <span class="comment">//成功后的回调方法</span></span><br><span class="line">                success : function(result)&#123;</span><br><span class="line">                    console.info(result);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意此处json数据需要和封装类的属性对应，且json数据的属性开头字母必须小写</p></blockquote><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/page/trans"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">returnPageVali</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/user/valid"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/page/validate"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">validate</span><span class="params">(@Valid @RequestBody ValidatorPojo vpo, Errors errors)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; errMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span>(ObjectError oe:oes)&#123;</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(oe <span class="keyword">instanceof</span> FieldError)&#123;</span><br><span class="line">            FieldError fe = (FieldError)oe;</span><br><span class="line">            key = fe.getField();<span class="comment">//获取错误字段名</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            key = oe.getObjectName();<span class="comment">//获取验证对象名称</span></span><br><span class="line">        &#125;</span><br><span class="line">        msg = oe.getDefaultMessage();</span><br><span class="line">        errMap.put(key,msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于一开始访问的jsp页面的路径中包含<strong>page</strong>，所以ajax访问的控制器方法的路径也需要包含page。在一开始访问jsp页面时路径中就包含了<strong>page</strong>路径，所以在ajax访问控制器路径时不需要加上<strong>page</strong>的路径。</p></blockquote><blockquote><p>@Valid注解表示启动验证机制。他会自动将最后的验证结果放入Errors对象中，这样就可以从中得到相关验证过后的信息。</p></blockquote><p><strong>结果</strong></p><p><img src="/2020/06/17/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v1/QQ%E6%88%AA%E5%9B%BE20200628183852.png" alt></p><h3 id="参数验证机制"><a href="#参数验证机制" class="headerlink" title="参数验证机制"></a>参数验证机制</h3><p><strong>自定义用户验证器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aClass.equals(ServerUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//直接在参数处报错，这样就无法进入控制器</span></span><br><span class="line">            errors.rejectValue(<span class="string">""</span>,<span class="keyword">null</span>,<span class="string">"用户不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServerUser sUser = (ServerUser)o;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(sUser.getName()))&#123;</span><br><span class="line">            errors.rejectValue(<span class="string">"name"</span>,<span class="keyword">null</span>,<span class="string">"用户名不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中，support方法参数为需要验证的POJO类型。若返回为true，则Spring会使用当前验证器的validate方法去验证POJO。validate方法包含需要额target对象和错误对象errors，其中，target是参数绑定后的POJO，如果发现错误，则会保存在errors对象中，然后返回给控制器。</p></blockquote><p><strong>虽然有了这个验证器，但是Spring还不会启用它，因为还没有绑定WebDataBinder机制。这里提供了注解@InitBinder,他的作用是在执行控制器的方法前，处理器会先执行被@InitBinder标注额地方法。这时可以将WebDataBinder对象作为参数传递到方法中。通过这层关系得到WebDataBinder对象，此对象有一个setValidator方法，可以绑定自定义的验证器，这样就可以获取参数后，通过自定义的验证器去验证参数。WebDataBinder除了可以绑定验证器外，还可以进行参数的自定义。</strong></p><p><strong>绑定验证器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用控制器前先执行此方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">    binder.setValidator(<span class="keyword">new</span> UserValidator());</span><br><span class="line">    <span class="comment">//定义日期参数格式，参数不在需要注解@DateTimeFormat，boolean参数表示是否允许为空</span></span><br><span class="line">    binder.registerCustomEditor(Date.class,new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"),false));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/validatorOne"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">validator</span><span class="params">(@Valid ServerUser serverUserOne,Errors errorrs,Date date)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; mapObj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    mapObj.put(<span class="string">"ServerUser"</span>,serverUserOne);</span><br><span class="line">    mapObj.put(<span class="string">"date"</span>,date);</span><br><span class="line">    <span class="comment">//判断是否存在错误</span></span><br><span class="line">    List&lt;ObjectError&gt; oes = errorrs.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span>(ObjectError oe:oes)&#123;</span><br><span class="line">        <span class="keyword">if</span>(oe <span class="keyword">instanceof</span> FieldError)&#123;</span><br><span class="line">            FieldError fe = (FieldError)oe;</span><br><span class="line">            mapObj.put(fe.getField(),fe.getDefaultMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            mapObj.put(oe.getObjectName(),oe.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后访问地址<a href="http://localhost:8080/users/validatorOne?serverUser=1--note_1&amp;date=2018-01-01。" target="_blank" rel="noopener">http://localhost:8080/users/validatorOne?serverUser=1--note_1&amp;date=2018-01-01。</a></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据模型的作用就是绑定数据，为后面的视图渲染做准备。</p><p><strong>如果在控制器的方法中的参数中使用ModelAndView，Model，ModelMap作为参数类型，SpringMVC会自动创建数据模型对象。如下代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/models"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">modelController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userServiceImpl uServ;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mod1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModelUser</span><span class="params">(Long id, Model moodel)</span></span>&#123;</span><br><span class="line">        ServerUser suser = uServ.getServerUser(id);</span><br><span class="line">        moodel.addAttribute(<span class="string">"user"</span>,suser);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/user/detail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mod2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">userModelMap</span><span class="params">(Long id, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        ServerUser serverUser = uServ.getServerUser(id);</span><br><span class="line">        ModelAndView mv1 = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//设置视图名称</span></span><br><span class="line">        mv1.setViewName(<span class="string">"/user/detail"</span>);</span><br><span class="line">        <span class="comment">//设置视图模型，此处modelMap并没有与mv绑定，这个步骤系统会自动处理</span></span><br><span class="line">        modelMap.put(<span class="string">"user"</span>,serverUser);</span><br><span class="line">        <span class="keyword">return</span> mv1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mod3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">useModelAndView</span><span class="params">(Long id,ModelAndView mv)</span></span>&#123;</span><br><span class="line">        ServerUser serverUser = uServ.getServerUser(id);</span><br><span class="line">        mv.setViewName(<span class="string">"/user/detail"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"user"</span>,serverUser);</span><br><span class="line">        <span class="keyword">return</span>  mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上述代码中可以看出，SpringMVC是比较智能的，比如第一个控制器的方法啊只是返回了一个字符串，SpringMVC便会自动生成对应的视图，并且绑定数据模型，第二个方法中，返回的是ModelAndView对象，但是并没有绑定ModelMap对象，SpringMVC会自动绑定它。上述数据对象，使用哪一个都是可以的，因为他们都是渲染的同一个jsp视图，这样通过定位，就可以将数据渲染到JSP中了。</p></blockquote><h2 id="SpringMVC文件上传"><a href="#SpringMVC文件上传" class="headerlink" title="SpringMVC文件上传"></a>SpringMVC文件上传</h2><p><strong>1. SpringMVC上传文件配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.location=d:/Otherfiles/JSPdownload</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">5242880</span></span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">20</span>MB</span><br></pre></td></tr></table></figure><p><strong>2. JSP文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form method = <span class="string">"post"</span> action = <span class="string">"./requests"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"file"</span> name = <span class="string">"file"</span> value = <span class="string">"请选择上传的文件"</span>&gt;</span><br><span class="line">        &lt;input type = <span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此处form表单声明为  multipart/form-data ,如果没有这个声明，SpringMVC就会解析文件请求出错。method的属性也必须是POST</p></blockquote><p><strong>3. 文件上传控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开文件上传的请求界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/uploads/pages"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">openUpPage</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"user/upload"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * 使用HttpServletRequest作为参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploads/requests"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">uploadRequest</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    MultipartHttpServletRequest mreq = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(request <span class="keyword">instanceof</span> MultipartHttpServletRequest)&#123;</span><br><span class="line">        mreq = (MultipartHttpServletRequest)request;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dealResultMap(<span class="keyword">false</span>,<span class="string">"上传失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取MultipartFile信息</span></span><br><span class="line">    MultipartFile mf = mreq.getFile(<span class="string">"file"</span>);</span><br><span class="line">    String filename = mf.getOriginalFilename();</span><br><span class="line">    File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mf.transferTo(file);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();;</span><br><span class="line">        <span class="keyword">return</span> dealResultMap(<span class="keyword">false</span>,<span class="string">"上传失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dealResultMap(<span class="keyword">true</span>,<span class="string">"上传成功"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用MultipartFile作为参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploads/multipart"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">uplloadMultipartFile</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">    String fileName = file.getOriginalFilename();</span><br><span class="line">    File dest = <span class="keyword">new</span> File(fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> dealResultMap(<span class="keyword">false</span>,<span class="string">"上传失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dealResultMap(<span class="keyword">true</span>,<span class="string">"上传成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Part作为参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploads/part"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">uploadPart</span><span class="params">(Part file)</span></span>&#123;</span><br><span class="line">    String fileName = file.getSubmittedFileName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.write(fileName);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> dealResultMap(<span class="keyword">false</span>,<span class="string">"上传失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dealResultMap(<span class="keyword">true</span>,<span class="string">"上传成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理上传文件结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> success</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">dealResultMap</span><span class="params">(<span class="keyword">boolean</span> success,String msg)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    result.put(<span class="string">"success"</span>,success);</span><br><span class="line">    result.put(<span class="string">"msg"</span>,msg);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数是HttpServletRequest对象时。在调用控制器之前，DispatcherSerrvlet会将其转换为iMultipartHttpServletRequest对象，所以方法中使用了强制转换。通过transferTo方法，就可以将文件保存到对应的路径中。</p></blockquote><h2 id="定义多个拦截器"><a href="#定义多个拦截器" class="headerlink" title="定义多个拦截器"></a>定义多个拦截器</h2><p><strong>1. 定义拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理前方法1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理后方法1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理完成方法1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfInteceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理前方法2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理后方法2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理完成方法2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfInterceptor3</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理前方法3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理后方法3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理完成方法3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 注册多个拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.interceptor.selfInteceptor2;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.interceptor.selfInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.interceptor.selfInterceptor3;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"com.example.rediscachetest"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.rediscachetest.*"</span>,annotationClass = Repository<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RediscachetestApplication</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RediscachetestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span></span>&#123;</span><br><span class="line">        InterceptorRegistration ir = registry.addInterceptor(<span class="keyword">new</span> selfInterceptor());</span><br><span class="line">        ir.addPathPatterns(<span class="string">"/interceptor/*"</span>);</span><br><span class="line">        InterceptorRegistration ir1 = registry.addInterceptor(<span class="keyword">new</span> selfInteceptor2());</span><br><span class="line">        ir1.addPathPatterns(<span class="string">"/interceptor/*"</span>);</span><br><span class="line">        InterceptorRegistration ir2 = registry.addInterceptor(<span class="keyword">new</span> selfInterceptor3());</span><br><span class="line">        ir2.addPathPatterns(<span class="string">"/interceptor/*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这些拦截器都会拦截与“/interceptor/*”匹配的请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/interceptor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intercepController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/reqPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reqPages</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/user/add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么访问控制器后执行的结果是责任链模式的规则，对于处理器前方法采用先注册先执行，而处理器后方法和完成方法则是先注册后执行的规则。</p><p>上述只是测试的处理签方法返回为true的情况。如果将第二个注册的拦截器的处理前方法返回为false，则后续的拦截器，处理和所有拦截器的处理后方法都不会执行。完成方法afterCompletion则不一样，它知会执行返回true的拦截器的完成方法。而且顺序是先注册后执行</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>控制器方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示用户</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(Long id,Model model)</span></span>&#123;</span><br><span class="line">ServerUser user = uServ.getServerUser(id);</span><br><span class="line">model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"user/detail"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String name,String remark)</span></span>&#123;</span><br><span class="line">    ServerUser sUser = <span class="keyword">new</span> ServerUser();</span><br><span class="line">    sUser.setName(name);</span><br><span class="line">    sUser.setRemark(remark);</span><br><span class="line">    <span class="comment">//插入数据库后，回填ServerUser的Id</span></span><br><span class="line">    uServ.insertServerUser(sUser);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/models/show?id="</span>+sUser.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先，添加用户信息进入到<strong>redirect1</strong>的方法中，新增用户数据库会返回用户编号，然后通过以”redirect:”开头的字符串。并以id作为参数传递，这样就能够调用这个请求，跳转到展示用户的界面</p></blockquote><p><strong>如果采用数据模型重定向</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">redirect2</span><span class="params">(String name,String remark)</span></span>&#123;</span><br><span class="line">    ServerUser sUser = <span class="keyword">new</span> ServerUser();</span><br><span class="line">    sUser.setName(name);</span><br><span class="line">    sUser.setRemark(remark);</span><br><span class="line">    <span class="comment">//插入数据库后，回填ServerUser的Id</span></span><br><span class="line">    uServ.insertServerUser(sUser);</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.setViewName(<span class="string">"redirect:/models/show?id="</span>+sUser.getId());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重定向传递Java对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示用户</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(ServerUser user,Model model)</span></span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"user/detail"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String name,String remark,RedirectAttributes ra)</span></span>&#123;</span><br><span class="line">    ServerUser sUser = <span class="keyword">new</span> ServerUser();</span><br><span class="line">    sUser.setName(name);</span><br><span class="line">    sUser.setRemark(remark);</span><br><span class="line">    <span class="comment">//插入数据库后，回填ServerUser的Id</span></span><br><span class="line">    uServ.insertServerUser(sUser);</span><br><span class="line">ra.addFlashAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/models/show"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作会话对象"><a href="#操作会话对象" class="headerlink" title="操作会话对象"></a>操作会话对象</h2><p>SpringMVC提供了支持，主要是两个注解用来操作HttpSession对象。<strong>@SessionAttribute和@SessionAttributes</strong>。前者应用于参数，主要是读取HttpSession得属性，后者只能用于类得注解，它会将相关<strong>数据模型</strong>得属性保存到Session中。</p><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rediscachetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.pojo.ServerUser;</span><br><span class="line"><span class="keyword">import</span> com.example.rediscachetest.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SessionAttributes</span>(names = &#123;<span class="string">"users"</span>,<span class="string">"ServerUser"</span>&#125;,types = Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Controller</span></span></span><br><span class="line">@RequestMapping("/session")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intercepController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userServiceImpl userService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">reqPages</span><span class="params">(@SessionAttribute (<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"session取出值Id:"</span>+id);</span><br><span class="line">        ServerUser user = userService.getServerUser(id);</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"id_new"</span>,id);</span><br><span class="line">        mav.addObject(<span class="string">"users"</span>,user);</span><br><span class="line">        mav.setViewName(<span class="string">"user/getsession"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sessionPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSessPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user/session"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SessionAttributes注解中得names属性表示数据模型中名称为users或者SessionAttributes会被保存在HttpSession中，types属性表示Long类型得数据模型会被保存在HttpSession中。它们是或者得关系。</p></blockquote><p><strong>存储Session数据得JSP和读取Session数据得JSP</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;% session.setAttribute(<span class="string">"id"</span>,<span class="number">13</span>);</span><br><span class="line">       response.sendRedirect(<span class="string">"./test"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.example.rediscachetest.pojo.ServerUser"</span> %&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户详情&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ServerUser user = (ServerUser)session.getAttribute(<span class="string">"users"</span>);</span><br><span class="line">    Long id = (Long)session.getAttribute(<span class="string">"id_new"</span>);</span><br><span class="line">    out.print(user.getName());</span><br><span class="line">    out.print(id);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="获取请求头信息"><a href="#获取请求头信息" class="headerlink" title="获取请求头信息"></a>获取请求头信息</h2><p><strong>1. JSP</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">    &lt;script src = "https://code.jquery.com/jquery-3.0.0.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;% System.out.println(<span class="string">"视图渲染"</span>);%&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $.post(&#123;</span><br><span class="line">        url:<span class="string">"./userHeader"</span>,</span><br><span class="line">        headers:&#123;id:<span class="string">'13'</span>,iname:<span class="string">'genji'</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>2. Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/userHeader"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerUser <span class="title">headerServerUser</span><span class="params">(@RequestHeader(<span class="string">"id"</span>)</span> Long id,@<span class="title">RequestHeader</span><span class="params">(<span class="string">"iname"</span>)</span> String iname)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请求头Id："</span>+id);</span><br><span class="line">    System.out.println(<span class="string">"请求头名称："</span>+iname);</span><br><span class="line">    ServerUser serverUser = userService.getServerUser(id);</span><br><span class="line">    <span class="keyword">return</span> serverUser;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/accessHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">accHeader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"user/intercec"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<strong>@RequestHeader</strong>注解获取请求头中的信息。注意控制器是@PostMapping</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-MVC&quot;&gt;&lt;a href=&quot;#Spring-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC&quot;&gt;&lt;/a&gt;Spring MVC&lt;/h1&gt;&lt;h2 id=&quot;简单页面配置&quot;&gt;&lt;a href=&quot;#简单页面配置&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="Spring MVC" scheme="https://planeswalker1205.github.io/tags/Spring-MVC/"/>
    
      <category term="笔记" scheme="https://planeswalker1205.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://planeswalker1205.github.io/2020/05/19/Redis/"/>
    <id>https://planeswalker1205.github.io/2020/05/19/Redis/</id>
    <published>2020-05-19T06:07:59.000Z</published>
    <updated>2020-05-25T08:44:21.446Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h1 id="Redis基础数据类型"><a href="#Redis基础数据类型" class="headerlink" title="Redis基础数据类型"></a>Redis基础数据类型</h1></li></ul><p><strong>1. String(字符串)</strong></p><p>String是Redis最基本的类型，一个key对应一个value。String类型是二进制安全的，意思是string可以包含任何数据，比如jpg图片或者序列化的对象。</p><hr><ul><li><p>设置指定key的值</p><p>  <code>SET key value</code></p></li><li><p>获取指定key的值</p><p>  <code>GET key</code></p></li><li><p>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</p><p>  <code>GETSET key value</code></p></li><li><p>同时设置一个或多个 key-value 对<br>  <code>MSET K1 V1 K2 V2 K3 V3</code></p></li></ul><p><strong>2. Hash(哈希)</strong></p><p>Redis hash 是一个键值对集合</p><hr><ul><li><p>同时将多个 field-value (域-值)对设置到哈希表 key 中</p><p>  <code>HMSET key field1 value1 field2 value2</code></p></li><li><p>获取所有给定字段的值</p><p>  <code>HMGET key field1 field2</code></p></li><li><p>获取所有哈希表中的字段</p><p>  <code>HKEYS key</code></p></li><li><p>删除一个或多个哈希表字段</p><p>  <code>HDEL key field1 field2</code>    </p></li><li><p>查看哈希表 key 中，指定的字段是否存在。</p><p>  <code>HEXISTS key field</code></p></li><li><p>获取存储在哈希表中指定字段的值。</p><p>  <code>HGET key field</code></p></li></ul><p><strong>3. List(列表)</strong></p><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部或者尾部</p><hr><ul><li><p>将一个值或者多个值插入到列表头部</p><p>  <code>LPUSH key value1 value2</code></p></li><li><p>获取列表指定范围的元素</p><p>  <code>LRANGE key start stop</code></p></li><li><p>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><p>  <code>BRPOPLPUSH source destination timeout</code></p></li><li><p>通过索引获取列表中的元素</p><p>  <code>LINDEX key index</code></p></li><li><p>在列表的元素前或者后插入元素</p><p>  <code>LINSERT key BEFORE|AFTER pivot value</code></p></li><li><p>移出并获取列表的第一个元素</p><p>  <code>LPOP key</code></p></li><li><p>获取列表长度</p><p>  <code>LLEN key</code></p></li><li><p>将一个值插入到已存在的列表头部</p><p>  <code>LPUSHX key value</code></p></li><li><p>移除列表元素</p><p>  <code>LREM key count value</code></p></li><li><p>通过索引设置列表元素的值</p><p>  <code>LSET key index value</code></p></li><li><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><p>  <code>LTRIM key start stop</code></p></li><li><p>移除列表的最后一个元素，返回值为移除的元素。</p><p>  <code>RPOP key</code></p></li><li><p>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</p><p>  <code>RPOPLPUSH source destination</code></p></li><li><p>在列表中添加一个或多个值</p><p>  <code>RPUSH key value1 value2</code></p></li><li><p>为已存在的列表添加值</p><p>  <code>RPUSHX key value</code></p></li></ul><p><strong>4. Set(集合)</strong></p><p>Redis的Set是string类型的无序集合。</p><hr><ul><li><p>向集合里添加一个或者多个成员</p><p>  <code>SADD key member1 member2</code></p></li><li><p>获取集合的成员数</p><p>  <code>SCARD key</code></p></li><li><p>返回给定所有集合的差集</p><p>  <code>SDIFF key1 key2</code></p></li><li><p>返回给定所有集合的差集并存储在 destination 中</p><p>  <code>SDIFFSTORE destination key1 key2</code></p></li><li><p>返回给定所有集合的交集</p><p>  <code>SINTER key1 key2</code></p></li><li><p>返回给定所有集合的交集并存储在 destination 中</p><p>  <code>SINTERSTORE destination key1 key2</code></p></li><li><p>判断 member 元素是否是集合 key 的成员</p><p>  <code>SISMEMBER key member</code></p></li><li><p>返回集合中的所有成员</p><p>  <code>SMEMBERS key</code></p></li><li><p>将 member 元素从 source 集合移动到 destination 集合</p><p>  <code>SMOVE source destination member</code></p></li><li><p>移除集合中一个或多个成员</p><p>  <code>SREM key member1 member2</code></p></li><li><p>返回所有给定集合的并集</p><p>  <code>SUNION key1 key2</code></p></li><li><p>所有给定集合的并集存储在 destination 集合中</p><p>  <code>SUNIONSTORE destination key1 key2</code></p></li></ul><p><strong>5. Zset(有序集合)</strong></p><p>Redis的ZSet是string类型的无序集合。</p><hr><ul><li><p>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p><p>  <code>ZADD key score1 member1 score2 member2</code></p></li><li><p>获取有序集合的成员数</p><p>  <code>ZCARD key</code></p></li><li><p>通过索引区间返回有序集合指定区间内的成员</p><p>  <code>ZRANGE key start stop WITHSCORES</code></p></li><li><p>返回有序集合中指定成员的索引</p><p>  <code>ZRANK key member</code></p></li><li><p>移除有序集合中的一个或多个成员</p><p>  <code>ZREM key member member ...</code></p></li></ul><h1 id="Spring-data-redis"><a href="#Spring-data-redis" class="headerlink" title="Spring-data-redis"></a>Spring-data-redis</h1><h3 id="SpringBoot使用Redis"><a href="#SpringBoot使用Redis" class="headerlink" title="SpringBoot使用Redis"></a>SpringBoot使用Redis</h3><ol><li>引入spring-boot-starter-data-redis</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line"></span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建RedisConnectionFactory对象，创建RedisTemplate</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisStandaloneConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">redisConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory connectionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"RedisConnectionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">initRedisConnectionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.connectionFactory!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.connectionFactory;</span><br><span class="line">        &#125;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">         <span class="comment">//最大空闲数</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//最大连接数</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//最大等待毫秒数</span></span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//创建Jedis连接工厂</span></span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory(jedisPoolConfig);</span><br><span class="line">        <span class="comment">//获取单机的reidis配置</span></span><br><span class="line">        RedisStandaloneConfiguration rsConf = jedisConnectionFactory.getStandaloneConfiguration();</span><br><span class="line">        rsConf.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        rsConf.setPort(<span class="number">6379</span>);</span><br><span class="line">        rsConf.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">this</span>.connectionFactory =jedisConnectionFactory;</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title">initRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">        <span class="comment">//设置字符串序列化器，这样Spring就会把key值当做字符串处理了</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setConnectionFactory(initRedisConnectionFactory());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.tools.redisConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">maintest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(redisConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        RedisTemplate redisTemplate = (RedisTemplate)context.getBean(<span class="string">"redisTemplate"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"keyTes"</span>,<span class="string">"valTes"</span>);</span><br><span class="line">        redisTemplate.opsForHash().put(<span class="string">"hash"</span>,<span class="string">"field"</span>,<span class="string">"hvalue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-Boot中整合使用Redis"><a href="#Spring-Boot中整合使用Redis" class="headerlink" title="Spring Boot中整合使用Redis"></a>Spring Boot中整合使用Redis</h1><ol><li>applicationContext.yml配置信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        min-idle: <span class="number">5</span></span><br><span class="line">        max-active: <span class="number">10</span></span><br><span class="line">        max-idle: <span class="number">10</span></span><br><span class="line">        max-wait: <span class="number">2000</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    timeout: <span class="number">1000</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改Redis Template的序列化器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demo class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jcx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/04/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.example.sqldata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqldataApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义自定义后初始化方法</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        initRedisTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisSerializer stringSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(stringSerializer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SqldataApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p><strong>Redis是支持一定事务能力的NoSQL，在Redis中使用事务，通常的命令组合是watch..multi..exec.也就是在一个Redis连接中执行多个命令，可以使用SessionCallBack接口达到这个目的</strong></p><ul><li><p>watch： 监控Redis的键</p></li><li><p>multi : 开启事务，开启事务后，该客户端的命令不会马上被执行，而是放在一个队列里，所以此时我们执行一些返回的命令，Redis是不会马上执行的，得到的值为null</p></li><li><p>exec : 执行事务。在队列命令执行前会判断被watch监控的Redis的键的数据是否发生过变化。如果是，Redis就会取消事务，否则就会执行事务。</p></li></ul><h1 id="常见问题-错误"><a href="#常见问题-错误" class="headerlink" title="常见问题/错误"></a>常见问题/错误</h1><p>当对Redis进行操作时出现以下错误。表示设置了认证密码。此时验证密码即可。</p><p><img src="/2020/05/19/Redis/QQ%E6%88%AA%E5%9B%BE20200519142127.png" alt></p><p>密码认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 123456</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;Redis基础数据类型&quot;&gt;&lt;a href=&quot;#Redis基础数据类型&quot; class=&quot;headerlink&quot; title=&quot;Redis基础数据类型&quot;&gt;&lt;/a&gt;Redis基础数据类型&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1. St
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://planeswalker1205.github.io/tags/Redis/"/>
    
      <category term="SpringBoot" scheme="https://planeswalker1205.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://planeswalker1205.github.io/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://planeswalker1205.github.io/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-19T03:23:25.000Z</published>
    <updated>2020-11-04T07:15:26.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrs = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>，<span class="number">2</span>，<span class="number">7</span>，<span class="number">6</span>，<span class="number">4</span>，<span class="number">1</span>，<span class="number">3</span>&#125;;</span><br><span class="line">    algoTest.shellself(arrs);</span><br><span class="line">    System.out.println(<span class="string">"主函数结果:"</span>+ Arrays.toString(arrs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSory</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = arr.length;d&gt;<span class="number">0</span>;d/=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = d;i&lt;arr.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i-d;j&gt;=<span class="number">0</span>;j-=d)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+d])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+d];</span><br><span class="line">                    arr[j+d] = temp ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span>+(k+<span class="number">1</span>)+<span class="string">"次排序结果:"</span>+Arrays.toString(arr));</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1： <strong>最外层For第一次循环</strong></p><p> (1) 第一次d的值为数组长度除以2，即3</p><p> (2) 故分组下标为:[0,3]    [1,4]    [2,5]    [3,6]共四组</p><p> (3) 当下标为3的数小于下标为0的数时，两者交替位置。</p><p> (4) 当下标为6的数小于下标为3，两者交替位置。又由条件“j&gt;=0;j-=d”[j的循环初始值为3，j-=d为3-3=0].故最里层循环会再执行一次下标组[0,3]的对比。</p><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/one.png" alt></p><p>2： <strong>最外层for第二次循环</strong></p><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/two.png" alt></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectsort</span><span class="params">(<span class="keyword">int</span>[] arrs)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrs.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arrs.length; j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(arrs[j]&lt;arrs[minIndex])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arrs[i];</span><br><span class="line">            arrs[i] = arrs[minIndex];</span><br><span class="line">            arrs[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/se-one.png" alt></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>两组有顺序的归并</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] testArr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">"执行前testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line">    algoTest.merge(testArr,<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">    System.out.println(<span class="string">"执行后testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arrs  传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low   数组的起始位置。一般为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle   数组两组有顺序排列的数字的分割点。一般为第一组最后一个数字的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high    数组结束位置。一般为最后一个数字的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arrs,<span class="keyword">int</span> low,<span class="keyword">int</span> middle,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//记录左边部分的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = low;</span><br><span class="line">    <span class="comment">//记录右边部分的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录临时数组的下标</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=middle&amp;&amp;j&lt;=high)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrs[i]&lt;arrs[j])&#123;</span><br><span class="line">            tempArr[index] = arrs[i];</span><br><span class="line">            i++;</span><br><span class="line">            index++;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tempArr[index] = arrs[j];</span><br><span class="line">            j++;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理剩余数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//上述循环结束后左半边部分还剩余</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=middle)&#123;</span><br><span class="line">        tempArr[index] = arrs[i];</span><br><span class="line">        i++;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个循环结束后右半边部分还剩余</span></span><br><span class="line">    <span class="keyword">while</span> ((j&lt;=high))&#123;</span><br><span class="line">        tempArr[index] = arrs[j];</span><br><span class="line">        j++;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将临时数组的数据存入原数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;tempArr.length;k++)&#123;</span><br><span class="line">        arrs[k+low] = tempArr[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>&gt; 流程</strong></p><ol><li>首先将数组分为1,2两个有顺序的数组</li></ol><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge-one.png" alt></p><ol start="2"><li>创建临时数组t。将1组和2组数据从开始下标i和j（<font color="red">i为1组初始下标，j为2组初始下标</font>）进行对比。若1组对应下标i的值小于2组对应下标j的值，则将1组对应下标i的值装入新数组t，并且1组的下标i往后移一位，2组下标j不变。反之，若2组下标j的值小于1组下标i的值，则2组下标j的值装入临时数组t，2组下标往后移一位。</li></ol><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge-two.png" alt></p><ol start="3"><li>当某一组的下标已经结束但是另一组还依然存在没有对比完的值时，直接将这一组剩下的数装入临时数组中。</li></ol><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge-three.png" alt></p><p><strong>使用递归处理无序数组的归并</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] testArr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">"执行前testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line">    algoTest.mergeSort(testArr,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">"执行后testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line"><span class="comment">//high的值最终会变为0，与low相等。此时high和low的下标同样，无法进行对比</span></span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//左边的处理</span></span><br><span class="line">        mergeSort(arr, low, middle);</span><br><span class="line">        <span class="comment">//右边的处理</span></span><br><span class="line">        mergeSort(arr, middle+<span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">//归并</span></span><br><span class="line">        merge(arr, low, middle, high);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] testArr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">52</span>,<span class="number">132</span>,<span class="number">679</span>,<span class="number">25</span>,<span class="number">13</span>,<span class="number">98</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">"执行前testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line">    algoTest.radixSort(testArr);</span><br><span class="line">    System.out.println(<span class="string">"执行后testArr:"</span>+Arrays.toString(testArr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arrs)</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个数用来存放数组中最大的数字</span></span><br><span class="line">    <span class="keyword">int</span> maxNum = Integer.MIN_VALUE;</span><br><span class="line">    <span class="comment">//找出数组中最大的数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arrs.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrs[i]&gt;maxNum)&#123;</span><br><span class="line">            maxNum = arrs[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算出数组中最大数字的位数</span></span><br><span class="line">    <span class="keyword">int</span> times = (maxNum+<span class="string">""</span>).length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义二维数组用来装入每位数的排序结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] tempArrs = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arrs.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义数组用来记录二维数组中每个数组中存放值的数量</span></span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环执行的次数依据数组中最大数字的位数</span></span><br><span class="line"><span class="comment">     * 第一次循环找到的是数组中每个数的个位</span></span><br><span class="line"><span class="comment">     * 第二次循环找到的是数组中每个数的十位</span></span><br><span class="line"><span class="comment">     * 以此类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,n = <span class="number">1</span>; i&lt;times; i++,n*=<span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;arrs.length; k++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到对应位数的数字</span></span><br><span class="line">            <span class="keyword">int</span> sequenceNum = arrs[k]/n%<span class="number">10</span>;</span><br><span class="line">            <span class="comment">//将此位数的数字存放在对应的二维数组中</span></span><br><span class="line">            tempArrs[sequenceNum][counts[sequenceNum]] = arrs[k];</span><br><span class="line">            <span class="comment">//当二维数组中某一个数组中已经添加了一个值，那么下标应该＋1</span></span><br><span class="line">            counts[sequenceNum]++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义原数组下标</span></span><br><span class="line">        <span class="keyword">int</span> oIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;counts.length;l++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(counts[l]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> g = <span class="number">0</span>; g&lt;counts[l];g++)&#123;</span><br><span class="line"></span><br><span class="line">                    arrs[oIdx] = tempArrs[l][g];</span><br><span class="line">                    oIdx++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重置为0</span></span><br><span class="line">                counts[l] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>&gt; 流程</strong></p><ol><li>定义以下数组</li></ol><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/radix-one.png" alt></p><ol start="2"><li>可知最大数为679，位数为3.故一共需进行三次流程</li></ol><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/radix-two.png" alt></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li><p>升序排列使用大顶堆</p></li><li><p>降序排列使用小顶堆</p></li></ul><p><strong>1. 根据传入的节点将此节点所构成的树转换为大顶堆【maxHeap()】</strong></p><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/heap-one.png" alt></p><p><strong>2. 将完全二叉树从最后一个叶子节点的父节开始从后往前遍历，到根节点停止。从而将整个二叉树转换为大顶堆</strong></p><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/heap-two.png" alt></p><p><strong>3. 进行堆排序【heapAsc()】</strong></p><p> 将根节点和数组的最后一个元素替换位置后，将除了最后一个元素的数组从根节点重新转换为大顶堆；再次将根节点和数组的倒数第二个元素替换，将除了倒数第二个和其之后的数据的数组重新替换为大顶堆；以此递减。递减至根节点之前停止。</p><p>全过程:</p><p><img src="/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/heap-three.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">heapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrs = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        heapAsc(arrs);</span><br><span class="line">        <span class="comment">//打印最终结果</span></span><br><span class="line">        System.out.println(Arrays.toString(arrs));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  1. 先将整体数组转换为大顶堆</span></span><br><span class="line"><span class="comment">     *  2. 从根节点开始，将根节点的值放在数组最后一位，再从根节点开始将数组重新转换为</span></span><br><span class="line"><span class="comment">     *  大顶堆(判断的size的值要逐步减去一。即已经将根节点的值放入数组最后的下标不再计</span></span><br><span class="line"><span class="comment">     *  入大顶堆的转化中)。转换后将新获得的根节点的值存入倒数第二位。以此类推。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrs 传入的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAsc</span><span class="params">(<span class="keyword">int</span>[] arrs)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数组转换为大顶堆</span></span><br><span class="line">        <span class="comment">//定义最后一个叶子节点的父节点</span></span><br><span class="line">        <span class="keyword">int</span> finalleafNodeFaIdx = (arrs.length-<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//从最后一个叶子节点的父节点开始向上遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = finalleafNodeFaIdx;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            maxHeap(arrs,arrs.length,i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将根节点的值放在最后一位并向前递进</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arrs.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> tempVal = arrs[<span class="number">0</span>];</span><br><span class="line">            arrs[<span class="number">0</span>] = arrs[i];</span><br><span class="line">            arrs[i] = tempVal;</span><br><span class="line">            <span class="comment">//将第一位和最后一位交替后的数组从根节点开始重新转换为大顶堆</span></span><br><span class="line">            maxHeap(arrs,i,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大顶堆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrs 传入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 代表数组的大小:arr.length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index  选定转换成大顶堆的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxHeap</span><span class="params">(<span class="keyword">int</span>[] arrs,<span class="keyword">int</span> size,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftNodeIdx = index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightNodeIdx = index*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maxIdx = index;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较左子节点和父节点</span></span><br><span class="line">        <span class="keyword">if</span>(leftNodeIdx&lt;size&amp;&amp;arrs[leftNodeIdx] &gt; arrs[maxIdx])&#123;</span><br><span class="line"></span><br><span class="line">            maxIdx = leftNodeIdx;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较右子节点 和 左子节点、父节点中最大的一个</span></span><br><span class="line">        <span class="keyword">if</span>(rightNodeIdx&lt;size&amp;&amp;arrs[rightNodeIdx] &gt; arrs[maxIdx])&#123;</span><br><span class="line"></span><br><span class="line">            maxIdx = rightNodeIdx;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(maxIdx!=index)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arrs[index];</span><br><span class="line">            arrs[index] = arrs[maxIdx];</span><br><span class="line">            arrs[maxIdx] = temp;</span><br><span class="line">            maxHeap(arrs,size,maxIdx);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;h3 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://planeswalker1205.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://planeswalker1205.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>枚举</title>
    <link href="https://planeswalker1205.github.io/2020/04/04/%E6%9E%9A%E4%B8%BE/"/>
    <id>https://planeswalker1205.github.io/2020/04/04/%E6%9E%9A%E4%B8%BE/</id>
    <published>2020-04-04T11:55:42.000Z</published>
    <updated>2020-04-04T12:29:01.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="枚举的常见用法"><a href="#枚举的常见用法" class="headerlink" title="枚举的常见用法"></a>枚举的常见用法</h2><ol><li><strong>定义常量</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> enumT&#123;</span><br><span class="line">        red,orange,yellow,green</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>switch语句</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    enumT e = enumT.red;</span><br><span class="line">    <span class="keyword">switch</span> (e)&#123;</span><br><span class="line">        <span class="keyword">case</span> red:</span><br><span class="line">            System.out.println(enumT.red);</span><br><span class="line">            System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>枚举中添加方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> enumT&#123;</span><br><span class="line">        red(<span class="number">0</span>,<span class="string">"红色"</span>),orange(<span class="number">1</span>,<span class="string">"橘色"</span>),yellow(<span class="number">2</span>,<span class="string">"黄色"</span>),green(<span class="number">3</span>,<span class="string">"绿色"</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">        <span class="keyword">private</span> String cname;</span><br><span class="line">        enumT(<span class="keyword">int</span> cid,String cname)&#123;</span><br><span class="line">            <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            <span class="keyword">this</span>.cname = cname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据枚举id获取枚举</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> enumT <span class="title">getEnumT</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (enumT e:enumT.values()</span><br><span class="line">                 ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(e.getCid() == id)&#123;</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(<span class="keyword">int</span> cid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cname;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCname</span><span class="params">(String cname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cname = cname;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        enumT t = enumT.getEnumT(i);</span><br><span class="line">        System.out.println(t.getCname());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:只有先定义了实例才能自定义构造函数及方法。且最后一个枚举要以分号结束</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;枚举的常见用法&quot;&gt;&lt;a href=&quot;#枚举的常见用法&quot; class=&quot;headerlink&quot; title=&quot;枚举的常见用法&quot;&gt;&lt;/a&gt;枚举的常见用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义常量&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure cla
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://planeswalker1205.github.io/tags/Java/"/>
    
      <category term="枚举" scheme="https://planeswalker1205.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>遇错解错</title>
    <link href="https://planeswalker1205.github.io/2020/03/29/%E9%81%87%E9%94%99%E8%A7%A3%E9%94%99/"/>
    <id>https://planeswalker1205.github.io/2020/03/29/%E9%81%87%E9%94%99%E8%A7%A3%E9%94%99/</id>
    <published>2020-03-29T13:00:22.000Z</published>
    <updated>2020-04-04T07:03:34.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="mysql8-0忘记密码的情况"><a href="#mysql8-0忘记密码的情况" class="headerlink" title="mysql8.0忘记密码的情况"></a>mysql8.0忘记密码的情况</h2><p>参考地址:</p><p><a href="https://blog.csdn.net/weixin_42289383/article/details/98039313?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42289383/article/details/98039313?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p><a href="https://blog.csdn.net/qq_43116788/article/details/84146918" target="_blank" rel="noopener">https://blog.csdn.net/qq_43116788/article/details/84146918</a></p><ol><li><p><strong>当前版本 mysql8.0 的my.ini文件所在目录</strong>:[C:\ProgramData\MySQL\MySQL Server 8.0]</p></li><li><p>进入mysql的bin目录。命令<code>mysqld --console --skip-grant-tables --shared-memory</code>可以无密码进入mysql。</p></li><li><p>管理员身份进入mysql的命令：<code>mysql -u root -p</code></p></li><li><p>如果在mysql中找不到user表。那么可能是没切换到mysql数据库。mysql创建后默认带一个mysql数据库。<code>use mysql;</code></p></li><li><p>修改密码: <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</code></p></li><li><p>在<code>mysqld --console --skip-grant-tables --shared-memory</code>模式可能无法执行，解决方案见下方.</p></li><li><p>重新登录:<code>mysql -u root -p123456;</code></p></li></ol><h2 id="The-MySQL-server-is-running-with-the-–skip-grant-tables-option-so-it-cannot-execute-this-statement"><a href="#The-MySQL-server-is-running-with-the-–skip-grant-tables-option-so-it-cannot-execute-this-statement" class="headerlink" title="The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement"></a>The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement</h2><ol><li><p>表示MYSQL还运行在 –skip-grant-tables模式，无法执行。</p></li><li><p>解决：</p></li></ol><pre><code>mysql&gt; set global read_only=0;（关掉新主库的只读属性）flush privileges;set global read_only=1;(读写属性)flush privileges;</code></pre><h2 id="使用NET-START-MYSQL命令时报错"><a href="#使用NET-START-MYSQL命令时报错" class="headerlink" title="使用NET START MYSQL命令时报错"></a>使用NET START MYSQL命令时报错</h2><p><strong>错误信息：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL服务正在启动...</span><br><span class="line">MYSQL服务无法启动...</span><br><span class="line">服务没有报任何错误</span><br></pre></td></tr></table></figure><ol><li>输入<code>mysqld - -console</code>查看错误详细信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Windows\System32&gt;mysqld --console</span><br><span class="line">2020-04-04T06:53:36.084691Z 0 [System] [MY-010116] [Server] C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe (mysqld 8.0.19) starting as process 6000</span><br><span class="line">2020-04-04T06:53:36.697581Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2020-04-04T06:53:36.704078Z 0 [ERROR] [MY-010262] [Server] Can&#39;t start server: Bind on TCP&#x2F;IP port: 通常每个套接字地址( 协议&#x2F;网络地址&#x2F;端口)只允许使用一次。</span><br></pre></td></tr></table></figure><p>由此可见mysql端口被占用</p><ol start="2"><li>输入<code>netstat -aon|findstr &quot;3306&quot;</code>查看3306端口使用情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       21220</span><br></pre></td></tr></table></figure><ol start="3"><li>杀灭21220进程，重新启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill&#x2F;f &#x2F;pid 21220</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NET START MYSQL</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;NET START MYSQL</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql&quot;&gt;&lt;a href=&quot;#Mysql&quot; class=&quot;headerlink&quot; title=&quot;Mysql&quot;&gt;&lt;/a&gt;Mysql&lt;/h1&gt;&lt;h2 id=&quot;mysql8-0忘记密码的情况&quot;&gt;&lt;a href=&quot;#mysql8-0忘记密码的情况&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://planeswalker1205.github.io/tags/mysql/"/>
    
      <category term="Spring-Boot" scheme="https://planeswalker1205.github.io/tags/Spring-Boot/"/>
    
      <category term="IDE" scheme="https://planeswalker1205.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot学习v3</title>
    <link href="https://planeswalker1205.github.io/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/"/>
    <id>https://planeswalker1205.github.io/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/</id>
    <published>2020-03-29T10:36:13.000Z</published>
    <updated>2020-06-15T06:55:54.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h1><h2 id="1-JdbcTemplate"><a href="#1-JdbcTemplate" class="headerlink" title="1. JdbcTemplate"></a>1. JdbcTemplate</h2><p>在依赖于SpringBoot的spring-boot=starter-data=jpa后。它就会自动配置数据源。但有时候我们需要配置自己的数据源.</p><h3 id="1-1-配置自定义数据源"><a href="#1-1-配置自定义数据源" class="headerlink" title="1.1 配置自定义数据源"></a>1.1 配置自定义数据源</h3><ul><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.properties/application.yml配置数据源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/users?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    tomcat: #tomcat自带的数据库连接池</span><br><span class="line">      max-idle: 0   #最大连接数，0表示没有限制</span><br><span class="line">      max-active: 50  #最大连接活动数</span><br><span class="line">      max-wait: 10000 #最大等待毫秒数，超出报错</span><br><span class="line">      initial-size: 5 #数据库连接池初始化连接数</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver  #驱动类配置</span><br><span class="line">  jpa:</span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>注：使用springboot jpa，项目启动的时候有个warn的log：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">05</span>:<span class="number">59</span>: WARN [main] o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration JpaBaseConfiguration.java:<span class="number">234</span> - spring.jpa.open-in-view is enabled by <span class="keyword">default</span>. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable <span class="keyword">this</span> warning</span><br></pre></td></tr></table></figure><p>在配置文件中加入下面这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.open-in-view&#x3D;false</span><br></pre></td></tr></table></figure><p>原因具体可参考stackoverflow上的解答spring.jpa.open-in-view。</p><p><strong>关于配置完数据源启动后报错可能原因是url地址后需要加上：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;users?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure><h3 id="1-2-JdbcTemplate操作数据库"><a href="#1-2-JdbcTemplate操作数据库" class="headerlink" title="1.2 JdbcTemplate操作数据库"></a>1.2 JdbcTemplate操作数据库</h3><ul><li><p>mysql创建数据库users,创建表</p></li><li><p>定义性别枚举</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> sexEnum &#123;</span><br><span class="line">    MaleENUM(<span class="number">1</span>,<span class="string">"男"</span>),</span><br><span class="line">    FemaleEnum(<span class="number">2</span>,<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    sexEnum(<span class="keyword">int</span> id,String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> sexEnum <span class="title">getSexEnum</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (sexEnum sexenum:sexEnum.values()</span><br><span class="line">             ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sexenum.getId() == id)&#123;</span><br><span class="line">                <span class="keyword">return</span> sexenum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义pojo类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.enumeration.sexEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String uName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uAge = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> sexEnum uSex = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uPhone = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uRemark = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuId</span><span class="params">(<span class="keyword">int</span> uId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uId = uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuName</span><span class="params">(String uName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uName = uName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuAge</span><span class="params">(String uAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> sexEnum <span class="title">getuSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuSex</span><span class="params">(sexEnum uSex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uSex = uSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuPhone</span><span class="params">(String uPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uPhone = uPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuRemark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uRemark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuRemark</span><span class="params">(String uRemark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uRemark = uRemark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"users&#123;"</span> +</span><br><span class="line">                <span class="string">"uId="</span> + uId +</span><br><span class="line">                <span class="string">", uName='"</span> + uName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uAge='"</span> + uAge + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uSex="</span> + uSex +</span><br><span class="line">                <span class="string">", uPhone='"</span> + uPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uRemark='"</span> + uRemark + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义用户服务类接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@id</span></span><br><span class="line"><span class="comment">    * 根据用户id查找用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUsers</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@uName</span></span><br><span class="line"><span class="comment">    * @uRemark</span></span><br><span class="line"><span class="comment">    * 根据用户名称或者备注查找多个用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;users&gt; <span class="title">findUsers</span><span class="params">(String uName, String uRemark)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@USER</span></span><br><span class="line"><span class="comment">    * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inertUser</span><span class="params">(users user)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@user</span></span><br><span class="line"><span class="comment">    * 更改用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(users user)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@id</span></span><br><span class="line"><span class="comment">    * 根据用户id删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户服务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.Service.userService;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.enumeration.sexEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//获取映射关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RowMapper&lt;users&gt; <span class="title">getUserMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RowMapper rowMapper = (ResultSet rs, <span class="keyword">int</span> i) -&gt; &#123;</span><br><span class="line">            users user = <span class="keyword">new</span> users();</span><br><span class="line">            user.setuId(rs.getInt(<span class="string">"uid"</span>));</span><br><span class="line">            user.setuName(rs.getString(<span class="string">"uName"</span>));</span><br><span class="line">            <span class="keyword">int</span> sexCur = rs.getInt(<span class="string">"uSex"</span>);</span><br><span class="line">            user.setuSex(sexEnum.getSexEnum(sexCur));</span><br><span class="line">            user.setuAge(rs.getString(<span class="string">"uAge"</span>));</span><br><span class="line">            user.setuPhone(rs.getString(<span class="string">"uPhone"</span>));</span><br><span class="line">            user.setuRemark(rs.getString(<span class="string">"uRemark"</span>));</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> rowMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUsers</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select * from u_users where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;id&#125;;</span><br><span class="line">        users user = (users) jdbcTemplate.queryForObject(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;users&gt; <span class="title">findUsers</span><span class="params">(String uName, String uRemark)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from u_users where uName like concat('%',?,'%') or uRemark like concat('%',?,'%')"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;uName,uRemark&#125;;</span><br><span class="line">        List&lt;users&gt; uList = jdbcTemplate.query(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> uList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inertUser</span><span class="params">(users user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into u_users(uName,uAge,uSex,uPhone,uRemark) values(?,?,?,?,?)"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;user.getuName(),user.getuAge(),user.getuSex().getId(),user.getuPhone(),user.getuRemark()&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        System.out.println(<span class="string">"sql值:"</span>+sql.toString());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(users user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update u_users set uName = ? where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;user.getuName(),user.getuId()&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from u_users where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;id&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用StatementCallback和ConnectionCallback执行多条sql语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUser2</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        users result = <span class="keyword">this</span>.jdbcTemplate.execute((Statement state) -&gt; &#123;</span><br><span class="line">            String sql1 = <span class="string">"select count(*) as total from u_users where uid = "</span> + id;</span><br><span class="line">            ResultSet rs = state.executeQuery(sql1);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> total = rs.getInt(<span class="string">"total"</span>);</span><br><span class="line">                System.out.println(<span class="string">"个数:"</span>+total);</span><br><span class="line">            &#125;</span><br><span class="line">            String sql2 = <span class="string">"select * from u_users where uid = "</span> + id;<span class="comment">//注意这里查询全部才会给users对象赋值，如果少一个字段会报错，"xxx" not found</span></span><br><span class="line">            ResultSet rs2 = state.executeQuery(sql2);</span><br><span class="line">            users usera = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs2.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> rowNum = rs2.getRow();</span><br><span class="line">                usera = getUserMapper().mapRow(rs2,rowNum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> usera;</span><br><span class="line">        &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此处获取映射关系可以直接使用Lambda表达式，1.8版本以下可使用匿名类。</strong></p><h3 id="1-3-Controller测试"><a href="#1-3-Controller测试" class="headerlink" title="1.3 Controller测试"></a>1.3 Controller测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dataController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    userServiceImpl userService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getControUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        users user = userService.getUsers(id);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>输入地址:<a href="http://localhost:8080/user/data?id=1" target="_blank" rel="noopener">http://localhost:8080/user/data?id=1</a></p><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200404231146.png" alt></p><p><strong>外：关于Lambda表达式</strong></p><ul><li>Java8中Lambda表达式语法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">() -&gt; <span class="number">5</span>;<span class="comment">//无需参数，返回值为5</span></span><br><span class="line"></span><br><span class="line">x -&gt; <span class="number">5</span>;  <span class="comment">//只接收一个参数，可不用圆括号。返回5</span></span><br><span class="line"></span><br><span class="line">(a,b) -&gt; a+b<span class="comment">//表示返回a+b的值，主体只有一条语句可不适用大括号</span></span><br><span class="line"></span><br><span class="line">(String a, String b) -&gt; System.out.println(<span class="string">"a:"</span>+a+<span class="string">"-b:"</span>+b);<span class="comment">//明确a，b的类型。打印a和b的值，不返回</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a*b ;&#125;;<span class="comment">//返回a*b的值，主体有大括号</span></span><br></pre></td></tr></table></figure><ul><li>函数式接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">funTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">methTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数式接口只能定义一个抽象方法，当然不包含重写Object类的方法。</p></blockquote><ul><li>Lambda表达式的使用示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加减乘除操作</span></span><br><span class="line">        test ops = <span class="keyword">new</span> test();</span><br><span class="line">        test1 tAdd = (a,b) -&gt; a+b;</span><br><span class="line">        test1 tSubStraction = (a,b) -&gt; a-b;</span><br><span class="line">        test1 tMulity = (a,b) -&gt; a*b;</span><br><span class="line">        test1 tDevi = (a,b) -&gt; a/b;</span><br><span class="line">        System.out.println(<span class="string">"加法:"</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tAdd));</span><br><span class="line">        System.out.println(<span class="string">"减法："</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tSubStraction));</span><br><span class="line">        System.out.println(<span class="string">"乘法："</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tMulity));</span><br><span class="line">        System.out.println(<span class="string">"除法:"</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tDevi));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">resOps</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,test1 t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.methInt(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">methInt</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后打印值</strong></p><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200329202033.png" alt></p><h2 id="2-整合MyBatis框架"><a href="#2-整合MyBatis框架" class="headerlink" title="2.整合MyBatis框架"></a>2.整合MyBatis框架</h2><h3 id="一-使用MapperFactoryBean装配MyBatis接口"><a href="#一-使用MapperFactoryBean装配MyBatis接口" class="headerlink" title="一.使用MapperFactoryBean装配MyBatis接口"></a>一.使用MapperFactoryBean装配MyBatis接口</h3><ul><li><strong>引入MyBatis的stater</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>pojo中的用户类使用MyBatis别名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *指定别名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Alias</span>(value = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String uage;</span><br><span class="line">    <span class="keyword">private</span> enumSex usex;</span><br><span class="line">    <span class="keyword">private</span> String uphone;</span><br><span class="line">    <span class="keyword">private</span> String uremark;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUage</span><span class="params">(String uage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uage = uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getUsex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsex</span><span class="params">(enumSex usex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usex = usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uphone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUphone</span><span class="params">(String uphone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uphone = uphone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUremark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uremark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUremark</span><span class="params">(String uremark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uremark = uremark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"uid="</span> + uid +</span><br><span class="line">                <span class="string">", uname='"</span> + uname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uage='"</span> + uage + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", usex="</span> + usex +</span><br><span class="line">                <span class="string">", uphone='"</span> + uphone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uremark='"</span> + uremark + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>由于封装的pojo类User中性别是枚举类，在MyBatis中，枚举是可以通过typeHandler转换的</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.typeHander;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.enumSex;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">//声明jdbctype为整型</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes</span>(JdbcType.INTEGER)</span><br><span class="line"><span class="comment">//声明javatype为枚举</span></span><br><span class="line"><span class="meta">@MappedTypes</span>(value = enumSex<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">typeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">enumSex</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, enumSex o, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setInt(i,o.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = resultSet.getInt(s);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = resultSet.getInt(i);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = callableStatement.getInt(i);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义用户映射文件userDao.xml</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">"1.0"</span> encoding = <span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-h//mybatis.org/DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.example.sqldata.dao.userDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUser"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">        select * from u_users where uid = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注:此处的userDao.xml文件最好名称和userDao接口一致。且此xml文件定义在resource中</p></blockquote><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200413220209.png" alt></p><ul><li><strong>定义MyBatis操作接口userDao</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>配置文件和扫描别名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/users?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    tomcat:</span><br><span class="line">      max-idle: <span class="number">0</span></span><br><span class="line">      max-active: <span class="number">50</span></span><br><span class="line">      max-wait: <span class="number">10000</span></span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.sqldata.pojo</span></span><br><span class="line"><span class="comment">  type-handlers-package: com.example.sqldata.typeHander</span></span><br></pre></td></tr></table></figure><h2 id="三-Spring整合Mybatis（3种）"><a href="#三-Spring整合Mybatis（3种）" class="headerlink" title="三.Spring整合Mybatis（3种）"></a>三.Spring整合Mybatis（3种）</h2><h3 id="使用MapperFactoryBean装配MyBatis接口"><a href="#使用MapperFactoryBean装配MyBatis接口" class="headerlink" title="使用MapperFactoryBean装配MyBatis接口"></a>使用MapperFactoryBean装配MyBatis接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapperBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperFactoryBean&lt;userDao&gt; <span class="title">initMybatisUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MapperFactoryBean&lt;userDao&gt; bean = <span class="keyword">new</span> MapperFactoryBean&lt;&gt;();</span><br><span class="line">        bean.setMapperInterface(userDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>写在Springboot启动时可以扫描的地方，或者直接写在@SpringBootApplication所在的类中</p></blockquote><ul><li><strong>定义服务接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>服务接口实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.service.userService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userDao udao = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User u = udao.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>控制器测试</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.service.userService;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.serviceimpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userService userv = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userv.getUser(id);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里@Autowired中定义的都是接口。</p></blockquote><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200413220825.png" alt></p><h3 id="二-使用MapperScannerConfigurer装配MyBatis接口"><a href="#二-使用MapperScannerConfigurer装配MyBatis接口" class="headerlink" title="二.使用MapperScannerConfigurer装配MyBatis接口"></a>二.使用MapperScannerConfigurer装配MyBatis接口</h3><ul><li>修改mapperBean的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapperBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 配置MyBatis接口扫描</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   返回扫描器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义扫描器实例</span></span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载sqlSessionFactory    SpringBoot会自动生成sqlSessionFactory实例</span></span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义扫描的包</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.sqldata.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//限定被标注@Repository的接口才被扫描  所以在userDao接口类中的注解需要是@Repository才能被扫描到</span></span><br><span class="line">        mapperScannerConfigurer.setAnnotationClass(Repository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-使用MapperScan定义扫描"><a href="#三-使用MapperScan定义扫描" class="headerlink" title="三.使用MapperScan定义扫描"></a>三.使用MapperScan定义扫描</h3><ul><li>删除上述<strong>二</strong>代码</li></ul><ul><li>SpringApplication:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(</span><br><span class="line">        <span class="comment">//指定扫描包</span></span><br><span class="line">        basePackages = <span class="string">"com.example.sqldata.*"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionFactory。若sqlSessionTemplate被指定 则作废</span></span><br><span class="line">        sqlSessionFactoryRef = <span class="string">"sqlSessionFactory"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionTemplate  将忽略sqlSessionFactory的配置</span></span><br><span class="line">        sqlSessionTemplateRef = <span class="string">"sqlSessionTemplate"</span>,</span><br><span class="line">        <span class="comment">//限定扫描接口</span></span><br><span class="line">        annotationClass = Repository<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SqldataApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SqldataApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>basePackages：</strong>需要扫描的包，也就是mapper的接口userDao。</p><p><strong>annotationClass = Repository.class:</strong>限定扫描的接口。此处表示扫描的mapper的接口必须是Repository</p><hr><h1 id="数据库事务处理"><a href="#数据库事务处理" class="headerlink" title="数据库事务处理"></a>数据库事务处理</h1><p><strong>mybatis框架最常用的事务管理器是DataSourceTransactionManager</strong></p><p>对于声明式事务，是使用<strong>@Transactional</strong>进行标注的，这个注解可以标注在类或者方法上。当标注在<strong>类</strong>上时，代表这个类所有<strong>公共非静态方法</strong>都将启用事务功能。</p><h2 id="事务的使用"><a href="#事务的使用" class="headerlink" title="事务的使用"></a>事务的使用</h2><ol><li><strong>pom.xml引入mysql，mybatis的依赖</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>application.yml文件配置数据源，Mapper扫描路径等</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/users?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    tomcat:</span><br><span class="line">      max-idle: <span class="number">0</span></span><br><span class="line">      max-active: <span class="number">50</span></span><br><span class="line">      max-wait: <span class="number">10000</span></span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.spdemo.myspring.pojo</span></span><br><span class="line"><span class="comment">  type-handlers-package: com.example.spdemo.myspring.typeHandler</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>定义dao接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spdemo.myspring.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span> </span>&#123;</span><br><span class="line">     <span class="function">User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>userDao的xml文件</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">"1.0"</span> encoding = <span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-h//mybatis.org/DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.example.spdemo.myspring.dao.userDao"</span>&gt;</span><br><span class="line">   </span><br><span class="line"> &lt;select id=<span class="string">"getUser"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line"></span><br><span class="line">        select * from u_users where uid = #&#123;uid&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"insertUser"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="function">insert into <span class="title">u_users</span><span class="params">(uName , uAge , uSex , uPhone , uRemark)</span> <span class="title">values</span><span class="params">(#&#123;uName&#125; , #&#123;uAge&#125; , #&#123;uSex&#125; , #&#123;uPhone&#125; , #&#123;uRemark&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:此处的resultType的值要么是全路径，要么是pojo类的别名</strong></p><ol start="5"><li><strong>service接口及实现</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spdemo.myspring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">     <span class="function">User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@int</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spdemo.myspring.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.service.userService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    userDao udao = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(isolation = Isolation.READ_COMMITTED , timeout = <span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> udao.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(isolation = Isolation.READ_COMMITTED , timeout = <span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> udao.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此处仅仅使用@Transactional注解，标识insertUser方法需要启动事务处理机制。Spring会自动把insertUser的方法织入到约定的流程中，这样就可以减少大量打吗，同时代码也更具备可读性和可维护性</strong></p><ol start="6"><li><strong>controller类测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spdemo.myspring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.enums.sexEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.service.userService;</span><br><span class="line"><span class="keyword">import</span> com.example.spdemo.myspring.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testcon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    userService usera = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUsert</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usera.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">insertUser</span><span class="params">(String uName , String uAge , <span class="keyword">int</span> uSex , String uPhone , String uRemark)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setuName(uName);</span><br><span class="line">        user.setuAge(uAge);</span><br><span class="line">        user.setuSex(sexEnum.getSexEnumCur(uSex));</span><br><span class="line">        user.setuPhone(uPhone);</span><br><span class="line">        user.setuRemark(uRemark);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = usera.insertUser(user);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; userMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        userMap.put(<span class="string">"success"</span> , result == <span class="number">1</span>);</span><br><span class="line">        userMap.put(<span class="string">"user"</span> , user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>启动文件</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spdemo.myspring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(</span><br><span class="line">        <span class="comment">//指定扫描包</span></span><br><span class="line">        basePackages = <span class="string">"com.example.spdemo.myspring.*"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionFactory。若sqlSessionTemplate被指定 则作废</span></span><br><span class="line">        sqlSessionFactoryRef = <span class="string">"sqlSessionFactory"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionTemplate  将忽略sqlSessionFactory的配置</span></span><br><span class="line">        sqlSessionTemplateRef = <span class="string">"sqlSessionTemplate"</span>,</span><br><span class="line">        <span class="comment">//限定扫描接口</span></span><br><span class="line">        annotationClass = Repository<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyspringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyspringApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注入事务管理器，由SpringBoot自动生成</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PlatformTransactionManager transactionManager = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用后初始化方法，观察自动生成的事务管理器</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewTransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(transactionManager.getClass().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;访问数据库&quot;&gt;&lt;a href=&quot;#访问数据库&quot; class=&quot;headerlink&quot; title=&quot;访问数据库&quot;&gt;&lt;/a&gt;访问数据库&lt;/h1&gt;&lt;h2 id=&quot;1-JdbcTemplate&quot;&gt;&lt;a href=&quot;#1-JdbcTemplate&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="https://planeswalker1205.github.io/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="https://planeswalker1205.github.io/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot学习v2</title>
    <link href="https://planeswalker1205.github.io/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/"/>
    <id>https://planeswalker1205.github.io/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/</id>
    <published>2020-02-09T12:10:09.000Z</published>
    <updated>2020-03-22T06:39:17.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定编程–Spring-AOP"><a href="#约定编程–Spring-AOP" class="headerlink" title="约定编程–Spring AOP"></a>约定编程–Spring AOP</h2><h3 id="简单实现约定编程"><a href="#简单实现约定编程" class="headerlink" title="简单实现约定编程"></a>简单实现约定编程</h3><ol><li><strong>简单接口HelloService</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.interfece;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>HelloService实现类HelloServiceImpl</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span>||name.trim()==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Hello,"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此代码清单表示如果参数为空的话就会抛出异常。抛出异常后之后的代码不会执行。</p></blockquote><ol start="3"><li><strong>定义拦截器接口Interceptor</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.interfece;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//事前方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取代原有事件的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation --回调参数，可以通过它的proceed方法，回调原有事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  原有事件返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.lang.reflect.InvocationTargetException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(Invocation invocation)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="comment">//事后返回方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后异常方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//是否使用around方法取代原有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">useAround</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>拦截器接口实现MyInterceptor</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before....之前"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after....之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"around before..."</span>);</span><br><span class="line">        Object object = invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">"around after ....."</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterReturning....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterThrowing...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">useAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invocation类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invocation</span><span class="params">(Object target,Method method,Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">        <span class="keyword">this</span>.method=method;</span><br><span class="line">        <span class="keyword">this</span>.params=params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.method.invoke(target,params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter/setter</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码的proceed方法会以反射的形式去调用原有的方法</p></blockquote><p>当有了以上服务类和拦截方法时我们就需要一个代理对象(proxy)，可以使用target对象实现的接口类型对其强制转换。当调用代理对象(proxy)的方法时，执行流程如下:</p><ul><li><p>使用proxy调用方法时会先执行拦截器的before方法</p></li><li><p>如果拦截器的useAround方法返回true，则执行拦截器的around方法，而不调用target对象对应的方法，然而由于around方法中Invocation对象存在proceed方法，它可以调用target对象对应的方法。如果useAround方法返回false，则直接调用target对象的事件方法。</p></li><li><p>无论如何，在完成之前的事件方法后，都会执行拦截器的after方法。</p></li><li><p>在执行around方法或者回调target的事件方法时，如果发生异常，执行拦截器的afterThrowing方法，否则执行afterReturning方法。</p></li></ul><ol start="5"><li><strong>ProxyBean类的实现</strong></li></ol><p>如果要将服务类和拦截方法织入对应的流程，需要一个类ProxyBean，此类中会有一个方法getProxyBean。在此方法中生成代理对象，而代理对象的生成，则需要Proxy类中的静态方法–newProxyInstance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader classloader, Class[] interfaces, InvocationHandler invocationHandler)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>classloader：类加载器</p></li><li><p>interfaces:绑定的接口。就是把代理对象绑定到那些接口下，可以是多个</p></li><li><p>invocationHandler:绑定代理对象逻辑实现。它是一个接口InvocationHandler对象，定义了invoke方法，这个方法就是实现代理对象的逻辑。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBean</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target=<span class="keyword">null</span>;<span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Interceptor interceptor=<span class="keyword">null</span>;<span class="comment">//拦截接口</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyBean</span><span class="params">(Object target,Interceptor interceptor)</span></span>&#123;</span><br><span class="line">        ProxyBean proxyBean = <span class="keyword">new</span> ProxyBean();</span><br><span class="line">        proxyBean.setTarget(target);</span><br><span class="line">        proxyBean.setInterceptor(interceptor);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),proxyBean);</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@retObj</span> 调用的方法的返回结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//是否异常标识</span></span><br><span class="line">        <span class="keyword">boolean</span> excepFlag = <span class="keyword">false</span>;</span><br><span class="line">        Invocation invocation = <span class="keyword">new</span> Invocation(target,method,args);</span><br><span class="line">        <span class="keyword">this</span>.interceptor.before();</span><br><span class="line">        Object retObj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.interceptor.useAround())&#123;</span><br><span class="line">                retObj = <span class="keyword">this</span>.interceptor.around(invocation);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                method.invoke(target,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            excepFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.interceptor.after();</span><br><span class="line">        <span class="keyword">if</span>(excepFlag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterThrowing();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterReturning();</span><br><span class="line">            <span class="keyword">return</span> retObj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Interceptor <span class="title">getInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterceptor</span><span class="params">(Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interceptor = interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码因为继承了接口InvocationHandler，因此就可以定义invoke方法。</p></blockquote><ol start="6"><li><strong>测试方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      HelloService helloService = <span class="keyword">new</span> HelloServiceImpl();</span><br><span class="line">      <span class="comment">//按约定获取proxy</span></span><br><span class="line">      HelloService proxy = (HelloService) ProxyBean.getProxyBean(helloService,<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">      proxy.sayHello(<span class="string">"LWT"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出如下:<br><img src="/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/consoleout.png" alt="输出"></p><p><strong>重点方法:</strong><code>getProxyBean</code>和<code>invoke</code>。</p><h3 id="AOP术语和流程"><a href="#AOP术语和流程" class="headerlink" title="AOP术语和流程"></a>AOP术语和流程</h3><ol><li><p><strong>连接点（join point）</strong>:对应的是具体被拦截的对象。因为Spring只能支持方法。故呗拦截的对象往往就是指特定的方法。</p></li><li><p><strong>切点(point cut)</strong>：通过正则式和指示器的规则定义，从而适配连接点。切点就是提供这样一个功能的概念。</p></li><li><p><strong>通知(advice)</strong>：按照约定的流程下的方法。</p></li><li><p><strong>目标对象(target)</strong>：即被代理对象。—–getProxyBean方法。</p></li><li><p><strong>引入(introduction)</strong>:指引入的新的类和其方法</p></li><li><p><strong>织入(weaving)</strong>:通过动态代理技术，为原有服务对象生成代理对象，然后将与切点定义匹配的连接点拦截，并按约定将各类通知织入约定流程的过程。</p></li><li><p><strong>切面(aspect)</strong>：是一个可以定义切点，各类通知引入的内容。</p></li></ol><h2 id="AOP实例详解"><a href="#AOP实例详解" class="headerlink" title="AOP实例详解"></a>AOP实例详解</h2><ul><li>确定连接点（用户服务接口）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.HelloInter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">printUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">（实现方法）</span><br><span class="line">```Java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.IntercepImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.printUser;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"auser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">printUserImpl</span> <span class="keyword">implements</span> <span class="title">printUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"所得用户为空"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        Logger log = Logger.getLogger(<span class="string">"日志"</span>);</span><br><span class="line">        log.info(<span class="string">"用户姓名:"</span>+user.getUserName());</span><br><span class="line">        log.warning(<span class="string">"用户Id:"</span>+user.getId());</span><br><span class="line">        log.fine(<span class="string">"用户年龄:"</span>+user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引入依赖，定义切面</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置返回方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置错误方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上定义切面可简化为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置返回方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置错误方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上正则表达式的含义:</strong></p><ol><li><p>execution:表示在执行的时候，拦截里面的正则匹配的方法</p></li><li><p>*： 表示返回任何类型的方法</p></li><li><p>com.example.springaop.aopdemo.IntercepImpl.printUserImpl：制定目标对象的全限定名称</p></li><li><p>printUser:指定目标对象的方法</p></li><li><p>(..):表示任意参数进行匹配</p></li></ol><ul><li>控制器–aspectController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.testController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.IntercepImpl.printUserImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> printUserImpl auser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">printUsers</span><span class="params">(<span class="keyword">int</span> Id,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(Id);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        auser.PrintUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringBoot配置启动文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.Aspect.aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopdemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"aspectA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> aspect <span class="title">myAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aspect();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AopdemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后在浏览器地址栏中输入请求地址:<a href="http://localhost:8080/user/print?id=1&amp;userName=userName&amp;age=3" target="_blank" rel="noopener">http://localhost:8080/user/print?id=1&amp;userName=userName&amp;age=3</a></p></blockquote><ul><li>环绕通知i</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint p)</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">         p.proceed();</span><br><span class="line">         System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">         throwable.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再次测试查看日志:</p><p><img src="/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/QQ%E6%88%AA%E5%9B%BE20200322111102.png" alt></p><p><strong>注意此处“前置方法”打印在“环绕前”之后，可能是什么版本差异的bug</strong></p><ul><li>引入</li></ul><p>上述切面中，如果我们传的user类的值为null的话，那么就会打印AfterThrowing的内容。那么如何在不改变原有Service类的情况下判断user值为空的话就不去调用 auser.PrintUser(user);的方法呢。</p><ol><li>定义新的Servicec类，用来判断user对象是否为null</li></ol><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.HelloInter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userValidtor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userIsNull</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.IntercepImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.userValidtor;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userValidatorImpl</span> <span class="keyword">implements</span> <span class="title">userValidtor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userIsNull</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>切面引入新的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeclareParents</span>(value = <span class="string">"com.example.springaop.aopdemo.IntercepImpl.printUserImpl+"</span>,defaultImpl = userValidatorImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">userValidtor</span> <span class="title">uValidator</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>@DeclareParents注解表示引入新的类来增强服务。它有两个必须配置的属性：value和deefaultImpl</p></blockquote><p><strong>value</strong>属性指向的是你要增强功能的目标对象，比如这里要增强的是printUserImpl，故配置为value = “com.example.springaop.aopdemo.IntercepImpl.printUserImpl+”。</p><p><strong>defaultImpl</strong>表示的是引入增强功能的类，这里配置的是defaultImpl = userValidatorImpl.class。</p><p>注意两个属性都是实现的类而不是接口。</p><p>3.Controller中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.testController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.userValidtor;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.IntercepImpl.printUserImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> printUserImpl auser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">printUsers</span><span class="params">(<span class="keyword">int</span> Id,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(Id);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        userValidtor uVal = (userValidtor)auser;</span><br><span class="line">        <span class="keyword">if</span>(!uVal.userIsNull(user))&#123;</span><br><span class="line">            auser.PrintUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">        auser.PrintUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>userValidtor uVal = (userValidtor)auser;</code></p><p>userVlidtor为引入的类的接口。将auser强制转换为userValidtor类型。然后调用userIsNull方法判断当前对象是否为null。如果为null。则不执行打印方法。00                  </p><ul><li>通知获取参数</li></ul><p>前置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"pointCut() &amp;&amp; args(user)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point,User user)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"point的args:"</span>+point.getArgs());</span><br><span class="line">      System.out.println(<span class="string">"User:"</span>+user.getUserName());</span><br><span class="line">      System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>以上AOP的实现都是采用接口+实现类的模式，这是Spring推荐的模式。但是对于是否拥有接口则并不是SpringBoot的强制要求。当你需要使用AOP的类拥有接口时，它会以JDK动态代理运行，否则以CGLIB运行。</strong></p><h2 id="多个切面"><a href="#多个切面" class="headerlink" title="多个切面"></a>多个切面</h2><p>Spring可以支持多个切面的运行，在组织多个切面时，需要知道其顺序。</p><p>如：</p><p><strong>第一个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect2</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect3</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果三个切面同时拦截一个方法，那么这三个切面将会以顺序进行拦截。如果没有@Order这个注解的话。切面拦截的顺序将会是混乱的。</p><h2 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h2><p>本章主要记录了SpringBoot中Spring AOP的主要写法和其示例。便于以后得到快速学习复习。</p><ol><li><p>AOP 术语：连接点，通常指被拦截的方法;切点，指通过正则式或者指示器的规则定义，从而适配连接点;通知，按照约定流程的方法；目标对象，指被代理的对象；引入，当一个服务类不能满足需求但有不能更改这个服务类时可以引入另一个服务类增强原有服务类的实现；织入，将各类通知织入约定流程；切面，定义各类切点，通知和引入的内容</p></li><li><p>定义切面：关键注解： @Aspect</p></li><li><p>定义切点：关键注解： @PointCut</p></li><li><p>引入新的接口：关键注解： @DeclareParents(value,dedfaultImpl)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;约定编程–Spring-AOP&quot;&gt;&lt;a href=&quot;#约定编程–Spring-AOP&quot; class=&quot;headerlink&quot; title=&quot;约定编程–Spring AOP&quot;&gt;&lt;/a&gt;约定编程–Spring AOP&lt;/h2&gt;&lt;h3 id=&quot;简单实现约定编程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="https://planeswalker1205.github.io/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="https://planeswalker1205.github.io/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
</feed>
