<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇迹师ori</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-04T12:29:01.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举</title>
    <link href="http://yoursite.com/2020/04/04/%E6%9E%9A%E4%B8%BE/"/>
    <id>http://yoursite.com/2020/04/04/%E6%9E%9A%E4%B8%BE/</id>
    <published>2020-04-04T11:55:42.000Z</published>
    <updated>2020-04-04T12:29:01.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="枚举的常见用法"><a href="#枚举的常见用法" class="headerlink" title="枚举的常见用法"></a>枚举的常见用法</h2><ol><li><strong>定义常量</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> enumT&#123;</span><br><span class="line">        red,orange,yellow,green</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>switch语句</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    enumT e = enumT.red;</span><br><span class="line">    <span class="keyword">switch</span> (e)&#123;</span><br><span class="line">        <span class="keyword">case</span> red:</span><br><span class="line">            System.out.println(enumT.red);</span><br><span class="line">            System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>枚举中添加方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> enumT&#123;</span><br><span class="line">        red(<span class="number">0</span>,<span class="string">"红色"</span>),orange(<span class="number">1</span>,<span class="string">"橘色"</span>),yellow(<span class="number">2</span>,<span class="string">"黄色"</span>),green(<span class="number">3</span>,<span class="string">"绿色"</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">        <span class="keyword">private</span> String cname;</span><br><span class="line">        enumT(<span class="keyword">int</span> cid,String cname)&#123;</span><br><span class="line">            <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            <span class="keyword">this</span>.cname = cname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据枚举id获取枚举</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> enumT <span class="title">getEnumT</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (enumT e:enumT.values()</span><br><span class="line">                 ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(e.getCid() == id)&#123;</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(<span class="keyword">int</span> cid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cname;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCname</span><span class="params">(String cname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cname = cname;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        enumT t = enumT.getEnumT(i);</span><br><span class="line">        System.out.println(t.getCname());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:只有先定义了实例才能自定义构造函数及方法。且最后一个枚举要以分号结束</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;枚举的常见用法&quot;&gt;&lt;a href=&quot;#枚举的常见用法&quot; class=&quot;headerlink&quot; title=&quot;枚举的常见用法&quot;&gt;&lt;/a&gt;枚举的常见用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义常量&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure cla
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="枚举" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>遇错解错</title>
    <link href="http://yoursite.com/2020/03/29/%E9%81%87%E9%94%99%E8%A7%A3%E9%94%99/"/>
    <id>http://yoursite.com/2020/03/29/%E9%81%87%E9%94%99%E8%A7%A3%E9%94%99/</id>
    <published>2020-03-29T13:00:22.000Z</published>
    <updated>2020-04-04T07:03:34.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="mysql8-0忘记密码的情况"><a href="#mysql8-0忘记密码的情况" class="headerlink" title="mysql8.0忘记密码的情况"></a>mysql8.0忘记密码的情况</h2><p>参考地址:</p><p><a href="https://blog.csdn.net/weixin_42289383/article/details/98039313?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42289383/article/details/98039313?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p><a href="https://blog.csdn.net/qq_43116788/article/details/84146918" target="_blank" rel="noopener">https://blog.csdn.net/qq_43116788/article/details/84146918</a></p><ol><li><p><strong>当前版本 mysql8.0 的my.ini文件所在目录</strong>:[C:\ProgramData\MySQL\MySQL Server 8.0]</p></li><li><p>进入mysql的bin目录。命令<code>mysqld --console --skip-grant-tables --shared-memory</code>可以无密码进入mysql。</p></li><li><p>管理员身份进入mysql的命令：<code>mysql -u root -p</code></p></li><li><p>如果在mysql中找不到user表。那么可能是没切换到mysql数据库。mysql创建后默认带一个mysql数据库。<code>use mysql;</code></p></li><li><p>修改密码: <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</code></p></li><li><p>在<code>mysqld --console --skip-grant-tables --shared-memory</code>模式可能无法执行，解决方案见下方.</p></li><li><p>重新登录:<code>mysql -u root -p123456;</code></p></li></ol><h2 id="The-MySQL-server-is-running-with-the-–skip-grant-tables-option-so-it-cannot-execute-this-statement"><a href="#The-MySQL-server-is-running-with-the-–skip-grant-tables-option-so-it-cannot-execute-this-statement" class="headerlink" title="The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement"></a>The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement</h2><ol><li><p>表示MYSQL还运行在 –skip-grant-tables模式，无法执行。</p></li><li><p>解决：</p></li></ol><pre><code>mysql&gt; set global read_only=0;（关掉新主库的只读属性）flush privileges;set global read_only=1;(读写属性)flush privileges;</code></pre><h2 id="使用NET-START-MYSQL命令时报错"><a href="#使用NET-START-MYSQL命令时报错" class="headerlink" title="使用NET START MYSQL命令时报错"></a>使用NET START MYSQL命令时报错</h2><p><strong>错误信息：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL服务正在启动...</span><br><span class="line">MYSQL服务无法启动...</span><br><span class="line">服务没有报任何错误</span><br></pre></td></tr></table></figure><ol><li>输入<code>mysqld - -console</code>查看错误详细信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Windows\System32&gt;mysqld --console</span><br><span class="line">2020-04-04T06:53:36.084691Z 0 [System] [MY-010116] [Server] C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe (mysqld 8.0.19) starting as process 6000</span><br><span class="line">2020-04-04T06:53:36.697581Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2020-04-04T06:53:36.704078Z 0 [ERROR] [MY-010262] [Server] Can&#39;t start server: Bind on TCP&#x2F;IP port: 通常每个套接字地址( 协议&#x2F;网络地址&#x2F;端口)只允许使用一次。</span><br></pre></td></tr></table></figure><p>由此可见mysql端口被占用</p><ol start="2"><li>输入<code>netstat -aon|findstr &quot;3306&quot;</code>查看3306端口使用情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       21220</span><br></pre></td></tr></table></figure><ol start="3"><li>杀灭21220进程，重新启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill&#x2F;f &#x2F;pid 21220</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NET START MYSQL</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;NET START MYSQL</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql&quot;&gt;&lt;a href=&quot;#Mysql&quot; class=&quot;headerlink&quot; title=&quot;Mysql&quot;&gt;&lt;/a&gt;Mysql&lt;/h1&gt;&lt;h2 id=&quot;mysql8-0忘记密码的情况&quot;&gt;&lt;a href=&quot;#mysql8-0忘记密码的情况&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="Spring-Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="IDE" scheme="http://yoursite.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot学习v3</title>
    <link href="http://yoursite.com/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/"/>
    <id>http://yoursite.com/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/</id>
    <published>2020-03-29T10:36:13.000Z</published>
    <updated>2020-04-19T04:57:42.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h1><h2 id="1-JdbcTemplate"><a href="#1-JdbcTemplate" class="headerlink" title="1. JdbcTemplate"></a>1. JdbcTemplate</h2><p>在依赖于SpringBoot的spring-boot=starter-data=jpa后。它就会自动配置数据源。但有时候我们需要配置自己的数据源.</p><h3 id="1-1-配置自定义数据源"><a href="#1-1-配置自定义数据源" class="headerlink" title="1.1 配置自定义数据源"></a>1.1 配置自定义数据源</h3><ul><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.properties/application.yml配置数据源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/users?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    tomcat: #tomcat自带的数据库连接池</span><br><span class="line">      max-idle: 0   #最大连接数，0表示没有限制</span><br><span class="line">      max-active: 50  #最大连接活动数</span><br><span class="line">      max-wait: 10000 #最大等待毫秒数，超出报错</span><br><span class="line">      initial-size: 5 #数据库连接池初始化连接数</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver  #驱动类配置</span><br><span class="line">  jpa:</span><br><span class="line">    open-in-view: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>注：使用springboot jpa，项目启动的时候有个warn的log：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">05</span>:<span class="number">59</span>: WARN [main] o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration JpaBaseConfiguration.java:<span class="number">234</span> - spring.jpa.open-in-view is enabled by <span class="keyword">default</span>. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable <span class="keyword">this</span> warning</span><br></pre></td></tr></table></figure><p>在配置文件中加入下面这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.open-in-view&#x3D;false</span><br></pre></td></tr></table></figure><p>原因具体可参考stackoverflow上的解答spring.jpa.open-in-view。</p><p><strong>关于配置完数据源启动后报错可能原因是url地址后需要加上：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;users?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure><h3 id="1-2-JdbcTemplate操作数据库"><a href="#1-2-JdbcTemplate操作数据库" class="headerlink" title="1.2 JdbcTemplate操作数据库"></a>1.2 JdbcTemplate操作数据库</h3><ul><li><p>mysql创建数据库users,创建表</p></li><li><p>定义性别枚举</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> sexEnum &#123;</span><br><span class="line">    MaleENUM(<span class="number">1</span>,<span class="string">"男"</span>),</span><br><span class="line">    FemaleEnum(<span class="number">2</span>,<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    sexEnum(<span class="keyword">int</span> id,String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> sexEnum <span class="title">getSexEnum</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (sexEnum sexenum:sexEnum.values()</span><br><span class="line">             ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sexenum.getId() == id)&#123;</span><br><span class="line">                <span class="keyword">return</span> sexenum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义pojo类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.enumeration.sexEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String uName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uAge = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> sexEnum uSex = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uPhone = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String uRemark = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuId</span><span class="params">(<span class="keyword">int</span> uId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uId = uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuName</span><span class="params">(String uName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uName = uName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuAge</span><span class="params">(String uAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> sexEnum <span class="title">getuSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuSex</span><span class="params">(sexEnum uSex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uSex = uSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuPhone</span><span class="params">(String uPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uPhone = uPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuRemark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uRemark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setuRemark</span><span class="params">(String uRemark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uRemark = uRemark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"users&#123;"</span> +</span><br><span class="line">                <span class="string">"uId="</span> + uId +</span><br><span class="line">                <span class="string">", uName='"</span> + uName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uAge='"</span> + uAge + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uSex="</span> + uSex +</span><br><span class="line">                <span class="string">", uPhone='"</span> + uPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uRemark='"</span> + uRemark + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义用户服务类接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@id</span></span><br><span class="line"><span class="comment">    * 根据用户id查找用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUsers</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@uName</span></span><br><span class="line"><span class="comment">    * @uRemark</span></span><br><span class="line"><span class="comment">    * 根据用户名称或者备注查找多个用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;users&gt; <span class="title">findUsers</span><span class="params">(String uName, String uRemark)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@USER</span></span><br><span class="line"><span class="comment">    * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inertUser</span><span class="params">(users user)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@user</span></span><br><span class="line"><span class="comment">    * 更改用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(users user)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@id</span></span><br><span class="line"><span class="comment">    * 根据用户id删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户服务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.Service.userService;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.enumeration.sexEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//获取映射关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RowMapper&lt;users&gt; <span class="title">getUserMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RowMapper rowMapper = (ResultSet rs, <span class="keyword">int</span> i) -&gt; &#123;</span><br><span class="line">            users user = <span class="keyword">new</span> users();</span><br><span class="line">            user.setuId(rs.getInt(<span class="string">"uid"</span>));</span><br><span class="line">            user.setuName(rs.getString(<span class="string">"uName"</span>));</span><br><span class="line">            <span class="keyword">int</span> sexCur = rs.getInt(<span class="string">"uSex"</span>);</span><br><span class="line">            user.setuSex(sexEnum.getSexEnum(sexCur));</span><br><span class="line">            user.setuAge(rs.getString(<span class="string">"uAge"</span>));</span><br><span class="line">            user.setuPhone(rs.getString(<span class="string">"uPhone"</span>));</span><br><span class="line">            user.setuRemark(rs.getString(<span class="string">"uRemark"</span>));</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> rowMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUsers</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select * from u_users where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;id&#125;;</span><br><span class="line">        users user = (users) jdbcTemplate.queryForObject(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;users&gt; <span class="title">findUsers</span><span class="params">(String uName, String uRemark)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from u_users where uName like concat('%',?,'%') or uRemark like concat('%',?,'%')"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;uName,uRemark&#125;;</span><br><span class="line">        List&lt;users&gt; uList = jdbcTemplate.query(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> uList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inertUser</span><span class="params">(users user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into u_users(uName,uAge,uSex,uPhone,uRemark) values(?,?,?,?,?)"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;user.getuName(),user.getuAge(),user.getuSex().getId(),user.getuPhone(),user.getuRemark()&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        System.out.println(<span class="string">"sql值:"</span>+sql.toString());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(users user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update u_users set uName = ? where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;user.getuName(),user.getuId()&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from u_users where uid = ?"</span>;</span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;id&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = jdbcTemplate.update(sql,params);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用StatementCallback和ConnectionCallback执行多条sql语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getUser2</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        users result = <span class="keyword">this</span>.jdbcTemplate.execute((Statement state) -&gt; &#123;</span><br><span class="line">            String sql1 = <span class="string">"select count(*) as total from u_users where uid = "</span> + id;</span><br><span class="line">            ResultSet rs = state.executeQuery(sql1);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> total = rs.getInt(<span class="string">"total"</span>);</span><br><span class="line">                System.out.println(<span class="string">"个数:"</span>+total);</span><br><span class="line">            &#125;</span><br><span class="line">            String sql2 = <span class="string">"select * from u_users where uid = "</span> + id;<span class="comment">//注意这里查询全部才会给users对象赋值，如果少一个字段会报错，"xxx" not found</span></span><br><span class="line">            ResultSet rs2 = state.executeQuery(sql2);</span><br><span class="line">            users usera = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs2.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> rowNum = rs2.getRow();</span><br><span class="line">                usera = getUserMapper().mapRow(rs2,rowNum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> usera;</span><br><span class="line">        &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此处获取映射关系可以直接使用Lambda表达式，1.8版本以下可使用匿名类。</strong></p><h3 id="1-3-Controller测试"><a href="#1-3-Controller测试" class="headerlink" title="1.3 Controller测试"></a>1.3 Controller测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdata.demodata.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.pojo.users;</span><br><span class="line"><span class="keyword">import</span> com.example.testdata.demodata.serviceImpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dataController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    userServiceImpl userService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> users <span class="title">getControUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        users user = userService.getUsers(id);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>输入地址:<a href="http://localhost:8080/user/data?id=1" target="_blank" rel="noopener">http://localhost:8080/user/data?id=1</a></p><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200404231146.png" alt></p><p><strong>外：关于Lambda表达式</strong></p><ul><li>Java8中Lambda表达式语法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">() -&gt; <span class="number">5</span>;<span class="comment">//无需参数，返回值为5</span></span><br><span class="line"></span><br><span class="line">x -&gt; <span class="number">5</span>;  <span class="comment">//只接收一个参数，可不用圆括号。返回5</span></span><br><span class="line"></span><br><span class="line">(a,b) -&gt; a+b<span class="comment">//表示返回a+b的值，主体只有一条语句可不适用大括号</span></span><br><span class="line"></span><br><span class="line">(String a, String b) -&gt; System.out.println(<span class="string">"a:"</span>+a+<span class="string">"-b:"</span>+b);<span class="comment">//明确a，b的类型。打印a和b的值，不返回</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a*b ;&#125;;<span class="comment">//返回a*b的值，主体有大括号</span></span><br></pre></td></tr></table></figure><ul><li>函数式接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">funTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">methTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数式接口只能定义一个抽象方法，当然不包含重写Object类的方法。</p></blockquote><ul><li>Lambda表达式的使用示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加减乘除操作</span></span><br><span class="line">        test ops = <span class="keyword">new</span> test();</span><br><span class="line">        test1 tAdd = (a,b) -&gt; a+b;</span><br><span class="line">        test1 tSubStraction = (a,b) -&gt; a-b;</span><br><span class="line">        test1 tMulity = (a,b) -&gt; a*b;</span><br><span class="line">        test1 tDevi = (a,b) -&gt; a/b;</span><br><span class="line">        System.out.println(<span class="string">"加法:"</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tAdd));</span><br><span class="line">        System.out.println(<span class="string">"减法："</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tSubStraction));</span><br><span class="line">        System.out.println(<span class="string">"乘法："</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tMulity));</span><br><span class="line">        System.out.println(<span class="string">"除法:"</span>+ops.resOps(<span class="number">5</span>,<span class="number">1</span>,tDevi));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">resOps</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,test1 t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.methInt(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">methInt</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后打印值</strong></p><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200329202033.png" alt></p><h2 id="2-整合MyBatis框架"><a href="#2-整合MyBatis框架" class="headerlink" title="2.整合MyBatis框架"></a>2.整合MyBatis框架</h2><h3 id="一-使用MapperFactoryBean装配MyBatis接口"><a href="#一-使用MapperFactoryBean装配MyBatis接口" class="headerlink" title="一.使用MapperFactoryBean装配MyBatis接口"></a>一.使用MapperFactoryBean装配MyBatis接口</h3><ul><li><strong>引入MyBatis的stater</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>pojo中的用户类使用MyBatis别名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *指定别名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Alias</span>(value = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String uage;</span><br><span class="line">    <span class="keyword">private</span> enumSex usex;</span><br><span class="line">    <span class="keyword">private</span> String uphone;</span><br><span class="line">    <span class="keyword">private</span> String uremark;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUage</span><span class="params">(String uage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uage = uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getUsex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsex</span><span class="params">(enumSex usex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usex = usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uphone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUphone</span><span class="params">(String uphone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uphone = uphone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUremark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uremark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUremark</span><span class="params">(String uremark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uremark = uremark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"uid="</span> + uid +</span><br><span class="line">                <span class="string">", uname='"</span> + uname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uage='"</span> + uage + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", usex="</span> + usex +</span><br><span class="line">                <span class="string">", uphone='"</span> + uphone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", uremark='"</span> + uremark + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>由于封装的pojo类User中性别是枚举类，在MyBatis中，枚举是可以通过typeHandler转换的</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.typeHander;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.enumSex;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">//声明jdbctype为整型</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes</span>(JdbcType.INTEGER)</span><br><span class="line"><span class="comment">//声明javatype为枚举</span></span><br><span class="line"><span class="meta">@MappedTypes</span>(value = enumSex<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">typeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">enumSex</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, enumSex o, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setInt(i,o.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = resultSet.getInt(s);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = resultSet.getInt(i);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> enumSex <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sexId = callableStatement.getInt(i);</span><br><span class="line">        <span class="keyword">if</span>(sexId != <span class="number">1</span> &amp;&amp; sexId != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumSex.getEnum(sexId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义用户映射文件userDao.xml</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">"1.0"</span> encoding = <span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-h//mybatis.org/DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.example.sqldata.dao.userDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUser"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">        select * from u_users where uid = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注:此处的userDao.xml文件最好名称和userDao接口一致。且此xml文件定义在resource中</p></blockquote><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200413220209.png" alt></p><ul><li><strong>定义MyBatis操作接口userDao</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>配置文件和扫描别名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/users?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    tomcat:</span><br><span class="line">      max-idle: <span class="number">0</span></span><br><span class="line">      max-active: <span class="number">50</span></span><br><span class="line">      max-wait: <span class="number">10000</span></span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.sqldata.pojo</span></span><br><span class="line"><span class="comment">  type-handlers-package: com.example.sqldata.typeHander</span></span><br></pre></td></tr></table></figure><h2 id="三-Spring整合Mybatis（3种）"><a href="#三-Spring整合Mybatis（3种）" class="headerlink" title="三.Spring整合Mybatis（3种）"></a>三.Spring整合Mybatis（3种）</h2><h3 id="使用MapperFactoryBean装配MyBatis接口"><a href="#使用MapperFactoryBean装配MyBatis接口" class="headerlink" title="使用MapperFactoryBean装配MyBatis接口"></a>使用MapperFactoryBean装配MyBatis接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapperBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperFactoryBean&lt;userDao&gt; <span class="title">initMybatisUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MapperFactoryBean&lt;userDao&gt; bean = <span class="keyword">new</span> MapperFactoryBean&lt;&gt;();</span><br><span class="line">        bean.setMapperInterface(userDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>写在Springboot启动时可以扫描的地方，或者直接写在@SpringBootApplication所在的类中</p></blockquote><ul><li><strong>定义服务接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>服务接口实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.service.userService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userDao udao = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User u = udao.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>控制器测试</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.service.userService;</span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.serviceimpl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> userService userv = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userv.getUser(id);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里@Autowired中定义的都是接口。</p></blockquote><p><img src="/2020/03/29/Spring-Boot%E5%AD%A6%E4%B9%A0v3/QQ%E6%88%AA%E5%9B%BE20200413220825.png" alt></p><h3 id="二-使用MapperScannerConfigurer装配MyBatis接口"><a href="#二-使用MapperScannerConfigurer装配MyBatis接口" class="headerlink" title="二.使用MapperScannerConfigurer装配MyBatis接口"></a>二.使用MapperScannerConfigurer装配MyBatis接口</h3><ul><li>修改mapperBean的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldata.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sqldata.dao.userDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapperBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 配置MyBatis接口扫描</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   返回扫描器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义扫描器实例</span></span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载sqlSessionFactory    SpringBoot会自动生成sqlSessionFactory实例</span></span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义扫描的包</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.sqldata.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//限定被标注@Repository的接口才被扫描  所以在userDao接口类中的注解需要是@Repository才能被扫描到</span></span><br><span class="line">        mapperScannerConfigurer.setAnnotationClass(Repository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-使用MapperScan定义扫描"><a href="#三-使用MapperScan定义扫描" class="headerlink" title="三.使用MapperScan定义扫描"></a>三.使用MapperScan定义扫描</h3><ul><li>删除上述<strong>二</strong>代码</li></ul><ul><li>SpringApplication:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(</span><br><span class="line">        <span class="comment">//指定扫描包</span></span><br><span class="line">        basePackages = <span class="string">"com.example.sqldata.*"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionFactory。若sqlSessionTemplate被指定 则作废</span></span><br><span class="line">        sqlSessionFactoryRef = <span class="string">"sqlSessionFactory"</span>,</span><br><span class="line">        <span class="comment">//指定sqlSessionTemplate  将忽略sqlSessionFactory的配置</span></span><br><span class="line">        sqlSessionTemplateRef = <span class="string">"sqlSessionTemplate"</span>,</span><br><span class="line">        <span class="comment">//限定扫描接口</span></span><br><span class="line">        annotationClass = Repository<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SqldataApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SqldataApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>basePackages：</strong>需要扫描的包，也就是mapper的接口userDao。</p><p><strong>annotationClass = Repository.class:</strong>限定扫描的接口。此处表示扫描的mapper的接口必须是Repository</p><hr><h1 id="数据库事务处理"><a href="#数据库事务处理" class="headerlink" title="数据库事务处理"></a>数据库事务处理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;访问数据库&quot;&gt;&lt;a href=&quot;#访问数据库&quot; class=&quot;headerlink&quot; title=&quot;访问数据库&quot;&gt;&lt;/a&gt;访问数据库&lt;/h1&gt;&lt;h2 id=&quot;1-JdbcTemplate&quot;&gt;&lt;a href=&quot;#1-JdbcTemplate&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="http://yoursite.com/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot学习v2</title>
    <link href="http://yoursite.com/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/"/>
    <id>http://yoursite.com/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/</id>
    <published>2020-02-09T12:10:09.000Z</published>
    <updated>2020-03-22T06:39:17.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定编程–Spring-AOP"><a href="#约定编程–Spring-AOP" class="headerlink" title="约定编程–Spring AOP"></a>约定编程–Spring AOP</h2><h3 id="简单实现约定编程"><a href="#简单实现约定编程" class="headerlink" title="简单实现约定编程"></a>简单实现约定编程</h3><ol><li><strong>简单接口HelloService</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.interfece;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>HelloService实现类HelloServiceImpl</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span>||name.trim()==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Hello,"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此代码清单表示如果参数为空的话就会抛出异常。抛出异常后之后的代码不会执行。</p></blockquote><ol start="3"><li><strong>定义拦截器接口Interceptor</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.interfece;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//事前方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取代原有事件的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation --回调参数，可以通过它的proceed方法，回调原有事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  原有事件返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.lang.reflect.InvocationTargetException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(Invocation invocation)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="comment">//事后返回方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后异常方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//是否使用around方法取代原有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">useAround</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>拦截器接口实现MyInterceptor</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before....之前"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after....之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"around before..."</span>);</span><br><span class="line">        Object object = invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">"around after ....."</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterReturning....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterThrowing...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">useAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invocation类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invocation</span><span class="params">(Object target,Method method,Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">        <span class="keyword">this</span>.method=method;</span><br><span class="line">        <span class="keyword">this</span>.params=params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.method.invoke(target,params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter/setter</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码的proceed方法会以反射的形式去调用原有的方法</p></blockquote><p>当有了以上服务类和拦截方法时我们就需要一个代理对象(proxy)，可以使用target对象实现的接口类型对其强制转换。当调用代理对象(proxy)的方法时，执行流程如下:</p><ul><li><p>使用proxy调用方法时会先执行拦截器的before方法</p></li><li><p>如果拦截器的useAround方法返回true，则执行拦截器的around方法，而不调用target对象对应的方法，然而由于around方法中Invocation对象存在proceed方法，它可以调用target对象对应的方法。如果useAround方法返回false，则直接调用target对象的事件方法。</p></li><li><p>无论如何，在完成之前的事件方法后，都会执行拦截器的after方法。</p></li><li><p>在执行around方法或者回调target的事件方法时，如果发生异常，执行拦截器的afterThrowing方法，否则执行afterReturning方法。</p></li></ul><ol start="5"><li><strong>ProxyBean类的实现</strong></li></ol><p>如果要将服务类和拦截方法织入对应的流程，需要一个类ProxyBean，此类中会有一个方法getProxyBean。在此方法中生成代理对象，而代理对象的生成，则需要Proxy类中的静态方法–newProxyInstance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader classloader, Class[] interfaces, InvocationHandler invocationHandler)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>classloader：类加载器</p></li><li><p>interfaces:绑定的接口。就是把代理对象绑定到那些接口下，可以是多个</p></li><li><p>invocationHandler:绑定代理对象逻辑实现。它是一个接口InvocationHandler对象，定义了invoke方法，这个方法就是实现代理对象的逻辑。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBean</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target=<span class="keyword">null</span>;<span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Interceptor interceptor=<span class="keyword">null</span>;<span class="comment">//拦截接口</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyBean</span><span class="params">(Object target,Interceptor interceptor)</span></span>&#123;</span><br><span class="line">        ProxyBean proxyBean = <span class="keyword">new</span> ProxyBean();</span><br><span class="line">        proxyBean.setTarget(target);</span><br><span class="line">        proxyBean.setInterceptor(interceptor);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),proxyBean);</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@retObj</span> 调用的方法的返回结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//是否异常标识</span></span><br><span class="line">        <span class="keyword">boolean</span> excepFlag = <span class="keyword">false</span>;</span><br><span class="line">        Invocation invocation = <span class="keyword">new</span> Invocation(target,method,args);</span><br><span class="line">        <span class="keyword">this</span>.interceptor.before();</span><br><span class="line">        Object retObj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.interceptor.useAround())&#123;</span><br><span class="line">                retObj = <span class="keyword">this</span>.interceptor.around(invocation);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                method.invoke(target,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            excepFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.interceptor.after();</span><br><span class="line">        <span class="keyword">if</span>(excepFlag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterThrowing();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterReturning();</span><br><span class="line">            <span class="keyword">return</span> retObj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Interceptor <span class="title">getInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterceptor</span><span class="params">(Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interceptor = interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码因为继承了接口InvocationHandler，因此就可以定义invoke方法。</p></blockquote><ol start="6"><li><strong>测试方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      HelloService helloService = <span class="keyword">new</span> HelloServiceImpl();</span><br><span class="line">      <span class="comment">//按约定获取proxy</span></span><br><span class="line">      HelloService proxy = (HelloService) ProxyBean.getProxyBean(helloService,<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">      proxy.sayHello(<span class="string">"LWT"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出如下:<br><img src="/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/consoleout.png" alt="输出"></p><p><strong>重点方法:</strong><code>getProxyBean</code>和<code>invoke</code>。</p><h3 id="AOP术语和流程"><a href="#AOP术语和流程" class="headerlink" title="AOP术语和流程"></a>AOP术语和流程</h3><ol><li><p><strong>连接点（join point）</strong>:对应的是具体被拦截的对象。因为Spring只能支持方法。故呗拦截的对象往往就是指特定的方法。</p></li><li><p><strong>切点(point cut)</strong>：通过正则式和指示器的规则定义，从而适配连接点。切点就是提供这样一个功能的概念。</p></li><li><p><strong>通知(advice)</strong>：按照约定的流程下的方法。</p></li><li><p><strong>目标对象(target)</strong>：即被代理对象。—–getProxyBean方法。</p></li><li><p><strong>引入(introduction)</strong>:指引入的新的类和其方法</p></li><li><p><strong>织入(weaving)</strong>:通过动态代理技术，为原有服务对象生成代理对象，然后将与切点定义匹配的连接点拦截，并按约定将各类通知织入约定流程的过程。</p></li><li><p><strong>切面(aspect)</strong>：是一个可以定义切点，各类通知引入的内容。</p></li></ol><h2 id="AOP实例详解"><a href="#AOP实例详解" class="headerlink" title="AOP实例详解"></a>AOP实例详解</h2><ul><li>确定连接点（用户服务接口）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.HelloInter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">printUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">（实现方法）</span><br><span class="line">```Java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.IntercepImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.printUser;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"auser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">printUserImpl</span> <span class="keyword">implements</span> <span class="title">printUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"所得用户为空"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        Logger log = Logger.getLogger(<span class="string">"日志"</span>);</span><br><span class="line">        log.info(<span class="string">"用户姓名:"</span>+user.getUserName());</span><br><span class="line">        log.warning(<span class="string">"用户Id:"</span>+user.getId());</span><br><span class="line">        log.fine(<span class="string">"用户年龄:"</span>+user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引入依赖，定义切面</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置返回方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置错误方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上定义切面可简化为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.springaop.aopdemo.IntercepImpl.printUserImpl.PrintUser(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置返回方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置错误方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上正则表达式的含义:</strong></p><ol><li><p>execution:表示在执行的时候，拦截里面的正则匹配的方法</p></li><li><p>*： 表示返回任何类型的方法</p></li><li><p>com.example.springaop.aopdemo.IntercepImpl.printUserImpl：制定目标对象的全限定名称</p></li><li><p>printUser:指定目标对象的方法</p></li><li><p>(..):表示任意参数进行匹配</p></li></ol><ul><li>控制器–aspectController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.testController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.IntercepImpl.printUserImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> printUserImpl auser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">printUsers</span><span class="params">(<span class="keyword">int</span> Id,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(Id);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        auser.PrintUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringBoot配置启动文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.Aspect.aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopdemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"aspectA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> aspect <span class="title">myAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aspect();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AopdemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后在浏览器地址栏中输入请求地址:<a href="http://localhost:8080/user/print?id=1&amp;userName=userName&amp;age=3" target="_blank" rel="noopener">http://localhost:8080/user/print?id=1&amp;userName=userName&amp;age=3</a></p></blockquote><ul><li>环绕通知i</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint p)</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">         p.proceed();</span><br><span class="line">         System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">         throwable.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再次测试查看日志:</p><p><img src="/2020/02/09/Spring-Boot%E5%AD%A6%E4%B9%A0v2/QQ%E6%88%AA%E5%9B%BE20200322111102.png" alt></p><p><strong>注意此处“前置方法”打印在“环绕前”之后，可能是什么版本差异的bug</strong></p><ul><li>引入</li></ul><p>上述切面中，如果我们传的user类的值为null的话，那么就会打印AfterThrowing的内容。那么如何在不改变原有Service类的情况下判断user值为空的话就不去调用 auser.PrintUser(user);的方法呢。</p><ol><li>定义新的Servicec类，用来判断user对象是否为null</li></ol><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.HelloInter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userValidtor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userIsNull</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.IntercepImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.userValidtor;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userValidatorImpl</span> <span class="keyword">implements</span> <span class="title">userValidtor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userIsNull</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>切面引入新的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeclareParents</span>(value = <span class="string">"com.example.springaop.aopdemo.IntercepImpl.printUserImpl+"</span>,defaultImpl = userValidatorImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">userValidtor</span> <span class="title">uValidator</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>@DeclareParents注解表示引入新的类来增强服务。它有两个必须配置的属性：value和deefaultImpl</p></blockquote><p><strong>value</strong>属性指向的是你要增强功能的目标对象，比如这里要增强的是printUserImpl，故配置为value = “com.example.springaop.aopdemo.IntercepImpl.printUserImpl+”。</p><p><strong>defaultImpl</strong>表示的是引入增强功能的类，这里配置的是defaultImpl = userValidatorImpl.class。</p><p>注意两个属性都是实现的类而不是接口。</p><p>3.Controller中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springaop.aopdemo.testController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.HelloInter.userValidtor;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.IntercepImpl.printUserImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springaop.aopdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aspectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> printUserImpl auser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">printUsers</span><span class="params">(<span class="keyword">int</span> Id,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(Id);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        userValidtor uVal = (userValidtor)auser;</span><br><span class="line">        <span class="keyword">if</span>(!uVal.userIsNull(user))&#123;</span><br><span class="line">            auser.PrintUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">        auser.PrintUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>userValidtor uVal = (userValidtor)auser;</code></p><p>userVlidtor为引入的类的接口。将auser强制转换为userValidtor类型。然后调用userIsNull方法判断当前对象是否为null。如果为null。则不执行打印方法。00                  </p><ul><li>通知获取参数</li></ul><p>前置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"pointCut() &amp;&amp; args(user)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point,User user)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"point的args:"</span>+point.getArgs());</span><br><span class="line">      System.out.println(<span class="string">"User:"</span>+user.getUserName());</span><br><span class="line">      System.out.println(<span class="string">"前置方法..."</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>以上AOP的实现都是采用接口+实现类的模式，这是Spring推荐的模式。但是对于是否拥有接口则并不是SpringBoot的强制要求。当你需要使用AOP的类拥有接口时，它会以JDK动态代理运行，否则以CGLIB运行。</strong></p><h2 id="多个切面"><a href="#多个切面" class="headerlink" title="多个切面"></a>多个切面</h2><p>Spring可以支持多个切面的运行，在组织多个切面时，需要知道其顺序。</p><p>如：</p><p><strong>第一个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect2</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三个切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect3</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果三个切面同时拦截一个方法，那么这三个切面将会以顺序进行拦截。如果没有@Order这个注解的话。切面拦截的顺序将会是混乱的。</p><h2 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h2><p>本章主要记录了SpringBoot中Spring AOP的主要写法和其示例。便于以后得到快速学习复习。</p><ol><li><p>AOP 术语：连接点，通常指被拦截的方法;切点，指通过正则式或者指示器的规则定义，从而适配连接点;通知，按照约定流程的方法；目标对象，指被代理的对象；引入，当一个服务类不能满足需求但有不能更改这个服务类时可以引入另一个服务类增强原有服务类的实现；织入，将各类通知织入约定流程；切面，定义各类切点，通知和引入的内容</p></li><li><p>定义切面：关键注解： @Aspect</p></li><li><p>定义切点：关键注解： @PointCut</p></li><li><p>引入新的接口：关键注解： @DeclareParents(value,dedfaultImpl)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;约定编程–Spring-AOP&quot;&gt;&lt;a href=&quot;#约定编程–Spring-AOP&quot; class=&quot;headerlink&quot; title=&quot;约定编程–Spring AOP&quot;&gt;&lt;/a&gt;约定编程–Spring AOP&lt;/h2&gt;&lt;h3 id=&quot;简单实现约定编程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="http://yoursite.com/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>记录Spring Boot中遇到的问题</title>
    <link href="http://yoursite.com/2020/02/01/%E8%AE%B0%E5%BD%95Spring-Boot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/01/%E8%AE%B0%E5%BD%95Spring-Boot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-01T14:34:44.000Z</published>
    <updated>2020-02-01T16:32:47.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录Spring-Boot学习中遇到的一些错误及解决方案"><a href="#记录Spring-Boot学习中遇到的一些错误及解决方案" class="headerlink" title="记录Spring Boot学习中遇到的一些错误及解决方案"></a>记录Spring Boot学习中遇到的一些错误及解决方案</h2><ul><li><strong>关于SpringBoot项目中@Controller无法引入的问题</strong></li></ul><p><img src="/2020/02/01/%E8%AE%B0%E5%BD%95Spring-Boot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/QQ%E6%88%AA%E5%9B%BE20200201223809.png" alt="controller无法引入"></p><p>一般在工程中无法引入jar文件或者Dependencies报错只需以下操作:</p><ol><li><p>工程中clean再install</p></li><li><p>找到本地仓库删除对应包，然后到工程中clean/install</p></li><li><p>打开项目 pom.xml 文件，右键 maven –&gt; reimport ，等待maven重新加载依赖。</p></li><li><p>将对应<dependency></dependency>标签删除，保存后,点击Reimport All Maven Project。然后再从pom.xml撤销刚刚的删除操作，然后再点击Reimport All Maven Project</p></li></ol><p>然而这些方案依然解决不了@Controller无法引入的问题，几经波折后，在百度上找到以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>@Controller(org.springframework.stereotype.Controller)确实是正常引入了，但SpringBootApplication类启动报错。原因是jar包冲突。</p><p>再再几经波折后，发现其实是maven版本不对应，因为Intellij IDEA是最新下载的版本，而maven还是使用的以前的apache-maven-3.5.0，换成apache-maven-3.6.3就好了。@Controller便可正常引入。</p><ul><li><strong>错误:Could not transfer artifact org.apache.maven.plugins:maven-resources-plugin</strong></li><li><strong>错误:Cannot resolve symbol ‘SpringApplication异常</strong></li></ul><ol><li><p>找到本地库文件</p></li><li><p>找到报错的对应包（第二个错误对应包是:repository\org\springframework\boot目录下的spring-boot-autoconfigure）</p></li><li><p>删除包，然后到工程中reimport</p></li></ol><ul><li><strong>错误:Failed to execute goal org.apache.maven.plugins:maven-war-plugin:3.2.2:war</strong></li></ul><p>以下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line"> &lt;plugin&gt; </span><br><span class="line"> &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;maven-war-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;version&gt;3.0.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;configuration&gt; &lt;failOnMissingWebXml&gt;false&lt;&#x2F;failOnMissingWebXml&gt; &lt;&#x2F;configuration&gt;</span><br><span class="line"> &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记录Spring-Boot学习中遇到的一些错误及解决方案&quot;&gt;&lt;a href=&quot;#记录Spring-Boot学习中遇到的一些错误及解决方案&quot; class=&quot;headerlink&quot; title=&quot;记录Spring Boot学习中遇到的一些错误及解决方案&quot;&gt;&lt;/a&gt;记录
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="Error，Learn" scheme="http://yoursite.com/tags/Error%EF%BC%8CLearn/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习v1</title>
    <link href="http://yoursite.com/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/"/>
    <id>http://yoursite.com/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/</id>
    <published>2020-01-28T07:55:03.000Z</published>
    <updated>2020-02-03T13:55:09.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单搭建Spring-Boot开发环境"><a href="#简单搭建Spring-Boot开发环境" class="headerlink" title="简单搭建Spring Boot开发环境"></a>简单搭建Spring Boot开发环境</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><p>启动Intellij IDEA，选择Create New Project，看到了一个新的窗口之后，选择Spring Initializr，将JDK切换为你想要的版本。</p></li><li><p>点击Next，进行一定的配置</p></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128160719.png" alt="config1"></p><ol start="3"><li><p>点击Next，可以根据自己的需要选择对应的starter进行依赖。</p></li><li><p>建好后，工程目录可以看到一个已经建好的类Spbotdemo1Application、ServletInitializer和Maven的pom.xml文件。运行Spbotdemo1Application就可以启动Spring Boot的工程，而pom.xml则配置好了你选中的starter依赖，这样就能够基于Intellij IDEA开发Spring Boot工程了。</p></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128161252.png" alt="config1"></p><ol start="5"><li>自定义配置:在新建的工程中可以看到一个属性文件application.properties文件，通过它可以根据自己的需要实现自定义。如图:</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128161536.png" alt="config1"></p><h3 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h3><ol><li>新增JSP和JSTL的Maven依赖配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.0.24&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>application.properties文件定义视图前后缀</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8090</span><br><span class="line">spring.mvc.view.prefix&#x3D;&#x2F;WEB-INF&#x2F;jsp&#x2F;</span><br><span class="line">spring.mvc.view.suffix&#x3D;.jsp</span><br></pre></td></tr></table></figure><ol start="3"><li>开发控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>开发视图</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">acer</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">1</span>/<span class="attr">28</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">15:07</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsp文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试视图解析器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>运行application文件，打开浏览器访问<code>http://localhost:8090/index</code></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128162325.png" alt="config1"></p><p><strong>注:Application启动类要放在最外侧，即包含所有的子包。因为Spring Boot会自动加载启动类所在包下及其子包下的所有组件</strong></p><p>如果@Controller注解报错失效的话添加以下依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><p>定义：<strong>在Spring中把每一个需要管理的对象成为Spring Bean(简称Bean)，而Spring管理这些Bean的容器，被我们成为Spring IoC容器(简称IoC容器)。</strong></p><blockquote><p>Spring IoC容器是一个管理Bean的容器，在Spring的定义中，所有的IoC容器都需要实现接口BeanFactory，它是顶级容器接口。而由于BeanFactory的功能还不够强大，因此Spring在BeanFactory的基础上，还设计了更为高级的接口ApplicationContext，它是BeanFactory的子接口之一，在现实中我们使用的大部分Spring IoC容器是ApplicationContext接口的实现类。</p></blockquote><p>以下示例是基于注解的IoC容器AnnotationConfigApplicationContext。</p><ul><li><strong>第一个装配Bean的方法</strong></li></ul><ol><li>定义User实体</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128210557.png" alt="User"></p><ol start="2"><li>定义Java配置文件</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128210935.png" alt="config"></p><blockquote><p>注解<code>@Configuration</code>代表这是一个Java配置文件，Spring的容器会根据它来生成IoC容器去装配Bean；<code>@Bean</code>代表将initUser方法返回的pojo装配到IoC容器中，属性name表示这个Bean的名称，如果没有配置它，默认是方法名称”initUser”.</p></blockquote><ol start="3"><li>使用AnnotationConfigApplicationContext构建IoC容器。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128211358.png" alt="config"></p><ul><li><strong>通过扫描装配Bean</strong></li></ul><blockquote><p>如果Bean使用注解<code>@Bean</code>一个个注入到IoC容器中，将使一个非常麻烦的事情。Spring允许我们进行扫描装配Bean到IoC容器中。对于扫描装配而言使用的注解是<code>@Component</code>和<code>@ComponentScan</code>。<code>@Component</code>是表明哪个类被扫描进入Spring IoC容器，而<code>@ComponentScan</code>是标明采用何种策略去扫描装配Bean。</p></blockquote><ol><li>首先移动User类到conf包下，这是因为注解了<code>@ComponentScan</code>的类默认扫描该类所在的当前包和其子包。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128212945.png" alt="config"></p><ol start="2"><li>User类加入注解@Component</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"016"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"LWX"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"note1"</span>)</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//GET&amp;SET...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Component</code>表示这个类将被Spring IoC容器扫描装配，“user”是作为Bean的名称，不配置“user”的话默认会把类名的第一个字母作为小写，其他不变作为Bean名称放入到IoC容器中。<code>@Value</code>指具体的值。</p></blockquote><ol start="3"><li>AppConfig类加入注解<code>@ComponentScan</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.conf;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appconfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解<code>@ComponentScan</code>表示它会进行扫描，且默认知会扫描类Appconfig所在的当前包以及子包。</p></blockquote><ol start="4"><li>测试扫描</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sbtest.onespbot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoCTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(IoCTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Appconfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        logger.info(<span class="string">"用户的id是:"</span>+user.getId());</span><br><span class="line">        logger.info(<span class="string">"用户姓名是:"</span>+user.getUserName());</span><br><span class="line">        logger.info(<span class="string">"便签是:"</span>+user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，可以正常输出日志信息。</p><p>上述方法2为了能使User类能够被扫描而把它迁移到了其他的包中，这显然是不合理的，为了更加合理，<code>@ComponentScan</code>允许我们自定义扫描的包。</p><ul><li><strong>自定义扫描包</strong></li></ul><p>可以通过配置项<strong>basePackages</strong>定义扫描的包名，其中还有<strong>includeFilters</strong>和<strong>excludeFilters</strong>。前者是定义满足过滤器条件的Bean才去扫描，后者则是排除过滤器条件的Bean</p><ol><li>重新把类User放到pojo包下。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128214250.png" alt="diyBean"></p><ol start="2"><li>把Appconfig中的注解修改为:</li></ol><p>(1)<code>@ComponentScan(&quot;com.example.sbtest.onespbot.pojo&quot;)</code>或<code>@ComponentScan(&quot;com.example.sbtest.onespbot.*&quot;)</code></p><p>这样就可以扫描到pojo包下的类或者是onespbot下所有的包。注意，这里的地址不能直接写到类的位置。</p><p>(2) <code>@ComponentScan(basePackages={&quot;com.example.sbtest.onespbot.pojo&quot;})</code></p><p>(3) <code>@ComponentScan(basePackageClasses = {User.class})</code></p><blockquote><p>当你扫描的包下面包含了标注了<code>@Service</code>(该标准注入了@Component，默认情况下会被Spring扫描装配到IoC容器中)的服务类而你又不想服务类被扫描装配的话，需要把扫描策略修改为:</p></blockquote><p><code>@ComponentScan(basePackages = &quot;com.example.sbtest.onespbot.*&quot;,excludeFilters = {@Filter(classes = {UserService.class})})</code>。</p><p>这样，就可以把服务类UserService排除到SpringIoC容器之外了。事实上，之前的Spring Boot注解<code>@SpringBootApplication</code>也注入了<code>@ComponentScan</code>。所以如果标注了<code>@Component</code>的pojo类在标注了<code>@SpringBootApplication</code>的类所在的包或子包下，可以不用在类上标注<code>@ComponentScan</code>(OnespbotApplication是标注了@SpringBootApplication的启动类。):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(OnespbotApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        logger.info(<span class="string">"用户的id是:"</span>+user.getId());</span><br><span class="line">        logger.info(<span class="string">"用户姓名是:"</span>+user.getUserName());</span><br><span class="line">        logger.info(<span class="string">"便签是:"</span>+user.getNote());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以被</strong><code>@ComponentScan</code><strong>扫描到的类的标注有:</strong></p><p><code>@Controller</code>，<code>@Repository</code>，<code>@Service</code>或<code>@Component</code></p><h2 id="自定义第三方Bean"><a href="#自定义第三方Bean" class="headerlink" title="自定义第三方Bean"></a>自定义第三方Bean</h2><p>现实的Java应用往往需要引入第三方的包，并且想要把第三方包的类对象放图到Spring IoC容器中。这时就可以使用@Bean注解:</p><ul><li>定义DBCP数据源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-dbcp2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>使用DBCP生成数据源:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.setProperty(<span class="string">"driver"</span>,<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">props.setProperty(<span class="string">"url"</span>,<span class="string">"jdbc:mysql://localhost:3306/currDemo"</span>);</span><br><span class="line">props.setProperty(<span class="string">"username"</span>,<span class="string">"root"</span>);</span><br><span class="line">props.setProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">dataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上，便可以将第三方包的类装配到Spring IoC容器中。</p><h2 id="依赖注入Autowired"><a href="#依赖注入Autowired" class="headerlink" title="依赖注入Autowired"></a>依赖注入Autowired</h2><p>Spring IoC中Bean之间可以相互依赖，即依赖注入(Dependency Injection,DI)</p><p>如下例子:</p><p>定义人类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//动物类行为</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//动物类设置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义动物接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//动物类使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>人类实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class oneperson implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Animal cat = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal.use();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动物实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Cat implements <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一只cat"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Dog implements <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一只dog"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Appconf<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Person person = context.getBean(<span class="string">"person"</span>);</span><br><span class="line">person.service();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终打印结果为<code>这是一只cat</code>。</p><p>注意：<strong>如果依赖的类属性名称是</strong><code>Animals animal = null</code><strong>或者其他不相干的属性名称的话，那么运行测试类的结果是报错，因为你所定义的动物类不止一个，Spring IoC无法确定要注入哪一个，故而报错。如果将属性名称改为</strong><code>dog</code><strong>或者</strong><code>cat</code><strong>的话，测试类正常运行，原因在于@Autowired首先会根据类型找到对应的Bean，如果其不是唯一的，那么会根据属性名称和Bean的名称进行匹配。</strong></p><p>那么是否有其他的方法确定依赖注入的类到底是哪个呢:</p><p><strong>消除歧义性:@Primary和@Qualifier</strong></p><p>@Primary:它是一个修改优先权的注解，把它定义在其中一个类的上面，那么当Spring IoC发现有多个同样类型的Bean时，会优先使用它进行注入，当有多个此注解时该报错还是报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Dog implements <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一只dog"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier:表限定，具体使用哪一个Bean注入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class oneperson implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"dog"</span>)</span><br><span class="line"><span class="keyword">private</span> Animal cat = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal.use();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Autowired还可以使用在方法上</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class oneperson implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Animal cat = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal.use();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>也可以用在参数中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class oneperson implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Animal cat = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">oneperson</span><span class="params">(@Autowired @Qualifier(<span class="string">"dog"</span>)</span> Animal animal)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal.use();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解@lazyInit</strong></p><p>在ComponentScan中还有一个配置项是lazyInit，只可以配置Boolean值，默认是false，也就是默认不延迟初始化，因此，在默认的情况下Spring会对Bean进行实例化和依赖注入对应的属性值。</p><blockquote><p>在默认为false的情况下，SpringIoC容器初始化时执行了实例化和依赖注入，而为了改变这种情况，我们可以在配置类的@ComponentScan中加入lazyInit配置。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@ComponentScan(lazyInit&#x3D;true)</span><br></pre></td></tr></table></figure><p>这样的话就会在Bean实力化之后进行初始化（依赖注入）。</p><h2 id="使用属性文件"><a href="#使用属性文件" class="headerlink" title="使用属性文件"></a>使用属性文件</h2><p><strong>可以采用默认的application.properties文件。</strong></p><ol><li>添加属性文件依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>application.properties文件属性配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">database.driverName: com.mysql.jdbc.Driver</span><br><span class="line">database.url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;sprbot</span><br><span class="line">database.username: root</span><br><span class="line">database.password: 123456</span><br></pre></td></tr></table></figure><ol start="3"><li>使用属性配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;database.driverName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverName=<span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;database.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverName</span><span class="params">(String driverName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;database.username&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"username的值是:"</span>+username);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;database.password&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前密码是:"</span>+password);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过Value注解，使用${…}占位符读取配置。这里的@Value注解，可以加在属性，也可以加在方法上。</p><p>启动SpringBoot，由于我们已经知道了如果没有在ComponentScan中配置lazyInit属性值为true的话，默认在定义bean的时候就实例化(依赖注入)，所以我们可以看到以下打印信息。</p><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200203172450.png" alt="console"></p><p><strong>@ConfigurationProperties读取配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"database"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverName=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String url=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverName</span><span class="params">(String driverName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"driverName的值是:"</span>+driverName);</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"url的值是:"</span>+url);</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"username的值是:"</span>+username);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前密码是:"</span>+password);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里注解@ConfigurationProperties中配置的字符串database，将于POJO的属性名称组成属性的全限定名去配置文件中查找，这样就可以将对应的属性读入POJO当中。<strong>注意，POJO的属性名称要与.properties/.yml文件中的名称相同。</strong></p><p>也可以自定义配置属性文件:</p><ol><li>新建jdbc.properties文件,将application.properties文件的内容迁移至jdbc.properties中:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">database.driverName: com.mysql.jdbc.Driver</span><br><span class="line">database.url: jdbc:mysql:<span class="comment">//localhost:3306/sprbot</span></span><br><span class="line">database.username: root</span><br><span class="line">database.password: <span class="number">654321</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用@PropertySource注解:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:jdbc.yml"</span>&#125;,ignoreResourceNotFound = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprbotApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SprbotApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value可以配置多个配置文件，使用classpath前缀，意味着去类文件路径下找到属性文件。ignoreResourceNotFound则是是否忽略配置文件找不到的问题，如果为true，就表示没有该配置文件的话就忽略，不会报错。为false或不配置的话表示如果没有该属性文件会报错。</p><h2 id="条件装配Bean"><a href="#条件装配Bean" class="headerlink" title="条件装配Bean"></a>条件装配Bean</h2><p>某些情况下可能会使一些Bean无法初始化，比如，在数据库连接池配置中漏掉一些配置会造成数据源不能连接上。在这样的情况下，如果IoC还进行数据源的装配，系统将会跑出异常，这时我们希望IoC容器不去装配数据源。</p><p>Spring提供了@Conditional注解，此注解需要配合另外一个借口Condition(org.springframework.context.annotation.Condition)来完成对应的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"database"</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(Databaseconditional<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverName=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String url=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverName</span><span class="params">(String driverName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"driverName的值是:"</span>+driverName);</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"url的值是:"</span>+url);</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"username的值是:"</span>+username);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前密码是:"</span>+password);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DataBaseProperties&#123;"</span> +</span><br><span class="line">                <span class="string">"driverName='"</span> + driverName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", url='"</span> + url + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Databaseconditional类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Databaseconditional</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取出环境配置</span></span><br><span class="line">        Environment env = conditionContext.getEnvironment();</span><br><span class="line">        <span class="comment">//判断属性文件是否存在对应的数据库配置</span></span><br><span class="line">        <span class="keyword">return</span> env.containsProperty(<span class="string">"database.driverName"</span>)&amp;&amp;env.containsProperty(<span class="string">"database.url"</span>)</span><br><span class="line">                &amp;&amp;env.containsProperty(<span class="string">"database.username"</span>)&amp;&amp;env.containsProperty(<span class="string">"database.password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>matches方法首先读取上下文环境，然后判断是否已经配置了对应的数据库信息，这样，当所有配置信息都配置好的话返回true，这个时候Spring会装配数据库连接池的Bean，否则是不装配的。</p></blockquote><p>以此，当配置属性文件中不存在某个配置的话，启动springapplication将不会打印一下信息。</p><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200203204506.png" alt="println"></p><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>singleton</p><p>prototype</p><p>session</p><p>application</p><p>request</p><p>globalSession</p><h2 id="引入XML配置Bean"><a href="#引入XML配置Bean" class="headerlink" title="引入XML配置Bean"></a>引入XML配置Bean</h2><p>在某些情况下我们还是想引入xml来配置Bean</p><ol><li>创建一个类（此类不会标注@Component注解，且不在springapplication所在包及其子包，不会被扫描到）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.interfece.Animals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squirrel</span> <span class="keyword">implements</span> <span class="title">Animals</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一只松鼠:"</span>+Squirrel<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义xml文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;squirrel&quot; class&#x3D;&quot;com.example.sprbot.pojo.Squirrel&quot;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>装配xml定义的Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource</span>(value=&#123;<span class="string">"classpath:spring-other.xml"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sprbot.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.pojo.Squirrel;</span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.sprbot.service.Oneperson;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Squirrel sq = (Squirrel)context.getBean(<span class="string">"squirrel"</span>);</span><br><span class="line">        sq.use();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行正常。</p><h2 id="Spring-EL"><a href="#Spring-EL" class="headerlink" title="Spring EL"></a>Spring EL</h2><h2 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h2><blockquote><p>本章主要介绍了Spring IoC容器，以及Bean装配的各种方式，依赖注入等等。</p></blockquote><ol><li><p>@Bean注解来装配Bean</p></li><li><p>@ComponentScan及@Component扫描装配Bean。@ComponentScan默认只扫描所在类的包及其子包，如果想要扫描到其他的包，可以使用basePackage或basePackageClasses定义扫描范围。</p></li><li><p>依赖注入@Autowired，Bean与Bean之间可以相互依赖。如果依赖的父类接口存在多个子类的话，除了定义的名称为子类Bean的名称外，还可以使用@Primary优先级和@Qualifier限定。</p></li><li><p>@lazyInit。默认情况下，当运行的时候SpringIoC会在定义Bean的时候就会实例化(依赖注入)，想要在实例化Bean之后再依赖注入可以<code>@ComponentScan(lazyInit=true)</code></p></li><li><p>使用属性文件。@ConfigurationProperties读取配置文件。在自定义创建一个配置文件的话，可以使用<code>@PropertySource</code>定义读取哪个配置文件，属性<code>ignoreResourceNotFound</code>表示如果不存在该属性文件是否忽略</p></li><li><p>引入xml配置Bean<code>@ImportResource(value={&quot;classpath:spring-other.xml&quot;})</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单搭建Spring-Boot开发环境&quot;&gt;&lt;a href=&quot;#简单搭建Spring-Boot开发环境&quot; class=&quot;headerlink&quot; title=&quot;简单搭建Spring Boot开发环境&quot;&gt;&lt;/a&gt;简单搭建Spring Boot开发环境&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="http://yoursite.com/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记v2</title>
    <link href="http://yoursite.com/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/"/>
    <id>http://yoursite.com/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/</id>
    <published>2020-01-21T13:51:24.000Z</published>
    <updated>2020-01-27T11:41:45.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网页无法访问GitHub网站的解决办法:</strong></p><p>进入Window下目录：C：\ Windows \ System32 \ drivers \ etc</p><p>notepad++打开hosts文件,在末尾添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#github </span><br><span class="line">192.30.253.113 github.com </span><br><span class="line">192.30.253.113 github.com </span><br><span class="line">192.30.253.118 gist.github.com </span><br><span class="line">192.30.253.119 gist.github.com</span><br></pre></td></tr></table></figure><p><em>此方法来自博客:</em> <a href="https://blog.csdn.net/weixin_39087263/article/details/84493188" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39087263/article/details/84493188</a></p><h2 id="如何使用ssh密钥"><a href="#如何使用ssh密钥" class="headerlink" title="如何使用ssh密钥"></a>如何使用ssh密钥</h2><p>初次使用git的用户要使用git协议大概需要三个步骤:</p><ul><li><p>生成密钥对</p><ol><li><p>ssh公钥默认存储在账户的主目录下的~/.ssh目录，查看:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd~&#x2F;.ssh</span><br><span class="line">$ ls</span><br><span class="line"> authorized_leys2 id_dsaknown_hosts configid_dsa.pub</span><br></pre></td></tr></table></figure><p>查看是否存在id_rsa和id_rsa.pub(id_dsa和id_dsa.pub之类成对的文件.)。</p><p><code>.pub</code>后缀的文件为公钥，另一个文件时密钥。</p></li><li><p>如果没有上述文件，没有.ssh目录，可以使用ssh-keygen创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;email@email.com&quot;</span><br><span class="line"></span><br><span class="line">Creates a new ssh key using the provided email # Generating public&#x2F;private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure><p>直接enter，然后输入密码。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121232408.png" alt="输入密码"></p></li></ol></li><li><p>设置远程仓库上的公钥</p><ol><li><p>查看生成的公钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDBGTYBoVSyZsK0FyYuL3u5ATxwaETtplLsejKsj76G9ca1Bx519YLZCzY6zFnaD&#x2F;2jYEZv1&#x2F;IUjNxHWWRqP47zWTdQvdvSfPOheIp1j+mbA0HWPtCIi4c8vX3XWSv90uDoyzllMT3Qwi1XAn3TdcthLxIXKIb0v70ZdmXcl5t3t68BQfhrB&#x2F;ykL4m6Nji0qPdTOtYwNYT0FH&#x2F;n8Wvb7wBd8w1BJ6YNUZzyWkWLHFcF+hvXpaM4w5A0P7M880xsYROnyMB57WSejp1Dcp69KAp0WpjV5CPXsMgyvwEQ&#x2F;aYKTYw06EAVUMavDTDTOZ9&#x2F;I08P0R9X07HG+V99pB2r74f7AC2vvuglTLC4OT0hc3ZuyGYX3ATasv4og46sJJY46q65WUEyVvfNF6+QVRV8j9scy&#x2F;OyjzrEQqXOjFVaxx7RE7LgcVvLhNRnartavD7Ll+4wMNDdiWqD88EBe8p3nbtl4&#x2F;5Eu5w35BWm0AJg3jSykT643lOD0LJVSXIzyHkXST0&#x3D; 462083214@qq.com</span><br></pre></td></tr></table></figure></li><li><p>登录GitHub账户，点击头像，Settings–SSH and GPG kets–New SSH key。</p></li><li><p>把命令行查看的密钥复制粘贴进去，记得要把前面的<code>ssh-rsa</code>一块复制进去，title随便填，最后点击Add key。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121233114.png" alt="pic"></p></li><li><p>验证key是否正常工作</p></li></ol></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Attempts to ssh to github</span><br></pre></td></tr></table></figure>这里可能会让你输入密码。最后，如果看到`Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.`则代表已经设置成功！</code></pre><ul><li><p>把git的remote url修改为git协议</p><ol><li><p>使用命令git remote -v查看当前remote url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;someaccount&#x2F;someproject.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;someaccount&#x2F;someproject.git (push)</span><br></pre></td></tr></table></figure><p>若是以上结果说明此项目是使用https协议进行访问的.(如果地址是git开头则表示是git协议).且只有是SSH URL的链接我们才能推送数据上去。</p></li><li><p>使用命令<code>git remote set-url</code>来调整url</p><p><code>git remote set-url origin git@github.com:planeswalker1205/newRepository.git</code></p><p>最后再使用<code>git remote -v查看</code></p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121233712.png" alt="ssh地址"></p></li></ol></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>添加远程仓库</strong></p><ol><li><p>登录GitHub，创建一个新的仓库，仓库名称叫newRepository。</p></li><li><p>本地仓库运行如下命令:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.com:planewalker1205&#x2F;newRepository.git</span><br></pre></td></tr></table></figure><blockquote><p>以上命令中:<strong>gitrep</strong>：远程仓库名称，默认可以叫origin，一看就可以知道是远程仓库，<strong>planewalker1205</strong>是你的GitHub用户名名称，<strong>newRepository.git</strong>是GitHub上创建的仓库的名称。再次强调只有SSH URL的链接(也就是git开头)我们才可以推送数据上去。</p></blockquote><ol start="3"><li>将本地数据推送到远程仓库</li></ol><p><code>$ git push -u origin master</code></p><blockquote><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了-u参数。Git不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。<code>$ git push origin master</code></p></blockquote><p><strong>删除指定的远程仓库</strong></p><p><code>git remote rm origin</code></p><h2 id="分支的创建与合并"><a href="#分支的创建与合并" class="headerlink" title="分支的创建与合并"></a>分支的创建与合并</h2><p>注意:</p><blockquote><p>在使用分支时要注意，各分支之间工作区与暂存区是公共的，所以在一个分支的工作区修改的内容如果未add或commit就切换到另一个分支那么这些修改的内容也会被带到另一个分支。只有在一个分支中把内容提交另一个分支的工作区的内容才会更改回原来的状态。如果一个分支的内容已经作出修改并提交，而在另一个分支的工作区修改内容，再从另一个分支切换到已经修改并提交的分支时是不允许的。可以使用git stash命令处理相关问题。</p></blockquote><p>即:</p><blockquote><p>当前创建了a分支，a分支有文件a.txt，然后创建并切换到b分支，同样的b分支会自动生成a.txt，那么此时如果在b分支修改a.txt的内容，然后切换到a分支，b分支修改后的内容会带到a分区，在然后无论是提交修改后的a分支的内容还是提交修改后的b分支的内容，最终没被提交的哪一个分支的内容会自动回退到被修改之前的状态。</p></blockquote><blockquote><p>接上。如果a分支或者b分支的对应文件内容作出了修改并且提交，那么无论是在a分支还是在b分支修改工作区的对应文件的内容并且不commit，那么切换到另一个分支（a或者b）都是Git不允许的。反之，如果没有修改分支的对应文件的内容而只是新建了其他的文件，那么切换分支参考上一个tips。</p></blockquote><p><strong>对于刚创建的新分支，只有两个分支都有修改才提交后才判断同一个文件作出不同的修改操作的冲突。而对于新创建一个分支b只修改其中一个分支a/b并且提交，那么在另一个分支a合并(修改并提交的分支)b，另一个分支a会被(修改并提交的分支)b覆盖。</strong></p><ul><li>创建分支</li></ul><p><code>$ git checkout -b dev</code></p><blockquote><p>上述命令表示创建并切换到分支dev，等同下列命令:</p></blockquote><p><code>$ git branch dev</code></p><p><code>$ git checkout dev</code></p><p>使用<code>$ git branch</code>查看当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><blockquote><p>*号表示当前在哪个分支。</p></blockquote><ul><li>合并分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  dev</span><br></pre></td></tr></table></figure><p><code>$ git merge dev</code></p><blockquote><p>表示把dev分支合并到master分支上</p></blockquote><p>合并完成后，就可以删除dev分支:</p><p><code>$ git branch -d dev</code></p><p>如果报错的话可能是因为当前的分支还没有合并提示你并不能删除。此时，如果想要强制删除的话可以使用大写的D</p><p><code>$ git branch -D dev</code></p><p>再次查看分支，可以看到只剩下<code>master</code>分支了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li>switch切换分支</li></ul><p><code>$ git switch -c dev</code>等同于<code>$ git checkout -b dev</code></p><p><code>$ git switch master</code>等同于<code>$ git checkout master</code></p><p><strong>解决冲突</strong></p><ol><li>创建dev分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure><ol start="2"><li>修改test.txt内容并提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line"></span><br><span class="line">dev test.txt</span><br><span class="line"></span><br><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;dev commit&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>切换到master分支，修改test.txt内容并提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line"></span><br><span class="line">master test.txt</span><br><span class="line"></span><br><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;master commit&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>合并dev分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line"></span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><blockquote><p>可以看到如果两个分支的同一个文件的不同位置都有修改且提交的话，再次合并就会发生冲突。必须手动解决冲突后才能提交。</p></blockquote><hr><p>合并分支默认会使用<code>Fast forward</code>模式，该模式下如果删除分支会丢失分支信息。如果要禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit。</p><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p>使用<code>git log</code>查看分支历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|&#x2F;  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure><p>在不使用<code>Fast forward</code>模式，merge后就会像这样。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/0.png" alt="0"></p><p>如果你在一个分支dev上工作许久，此时需要紧急切换到另一个分支，但你还并不想提交当前工作的分支的内容，那么你就可以使用<code>stash</code>命令，把当前工作现场”储藏”起来，等以后恢复现场后继续工作。</p><p><code>$ git stash</code></p><p>现在，用<code>git status</code>查看工作区，就是干净的。可以放心创建或者切换到别的分支而不受本分支的影响。</p><p>当你处理完别的分支上的事情，切换到了之前工作并使用<code>stash</code>命令储藏工作内容的dev分支上。使用<code>git stash list</code>命令查看储藏起来的工作现场。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>想要恢复工作现场。有两种办法。</p><ol><li><p>使用<code>git stash apply</code>命令。使用此命令在恢复后stash内容并不会删除。需要使用<code>git stash drop</code>命令来删除。</p></li><li><p>使用<code>git stash pop</code>，使用此命令在恢复的同时也会把stash的内容删除。</p></li></ol><p>再使用<code>git stash list</code>命令就看不到任何stash内容了。</p><blockquote><p>当你在master分支上修复了bug后，由于dev分支时早期从master分支分出来的，所以，此bug也存在于dev分支。如果想在dev分支上修复同样的bug，除了可以重复操作一次再提交外。还有一种方法，只需要把在master上<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支上。注意，此处是复制，而不是merge合并。</p></blockquote><p><code>$ git cheery-pick 4c805e2</code> </p><p>此时，Git自动给dev分支做了一次提交。而这次提交的commitID是<code>1d4b803</code>，虽然它们的改动相同，但提交的commitID不同。</p><p><strong>多人协作</strong></p><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p><p>要查看远程库的信息，用git remote：.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>或者，使用<code>git remote -v</code>查看更详细的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:planewalker1205&#x2F;newRepository.git (fetch)</span><br><span class="line">origin  git@github.com:planewalker1205&#x2F;newRepository.git (push)</span><br></pre></td></tr></table></figure><p>上面显示的是可以抓取的<code>origin</code>的地址，如果没有推送权限的话，是看不到push的地址的。</p><ul><li>推送分支</li></ul><p><code>$ git push origin master</code></p><ul><li>推送其他分支</li></ul><p><code>$ git push origin dev</code></p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ol><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p></li><li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p></li><li><p><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p></li><li><p><code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p></li></ol><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><ul><li>抓取分支</li></ul><ol><li>先向远程仓库的目录克隆</li></ol><p><code>$ git clone git@github.com:planewalker1205/newRepository.git</code></p><p>默认情况是只能看到本地的<code>master</code>分支。</p><ol start="2"><li>若想要在<code>dev</code>分支上开发，那么就必须创建远程<code>origin</code>的<code>dev</code>分支到本地:</li></ol><p><code>$ git checkout -b dev origin/dev</code></p><blockquote><p>在此之前，如果远程仓库没有dev分支，可以使用<code>$ git push origin dev:dev</code>创建远程分支.也就相当于把本地分支push到远程服务器.可以同名也可以随意取名.</p></blockquote><p>这样,就可以在<code>dev</code>上修改并且<code>push</code>到远程.</p><ol start="3"><li><p>此时,又有其他人clone了远程仓库,并作出了修改且试图推送,推送失败,原因是其他人的推送提交与你之前的推送提交有冲突,解决办法是<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，与本地合并，解决冲突，重新推送。</p></li><li><p>此时，<code>git pull</code>也失败了，原因是他没有指定本地的<code>dev</code>分支与远程<code>origin/dev</code>分支链接</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line">Branch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure><p>再重新<code>pull</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add&#x2F;add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>此时，会提示与本地合并有冲突，手动解决后，提交，<code>push</code></p><p><strong>跟踪分支</strong></p><blockquote><p>如果从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”，它跟踪的分支叫做“上游分支”，跟踪分支是与远程分支有直接关系的本地分支。如果在一个分支上输入<code>pull</code>，Git能自动识别去哪个服务器上抓取，合并到哪个分支。</p></blockquote><p>比如:</p><p><code>$ git checkout -b [branch] [remotename]/[branch]</code></p><p><code>$ git branch -u origin/serverfix</code></p><p><code>$ git branch --set-upstream-to=origin/dev dev</code></p><p>如果想要查看设置的所有跟踪分支，可以使用 <code>git branch</code> 的 <code>-vv</code> 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p><p>相关学习地址:</p><p><a href="https://blog.csdn.net/u012701023/article/details/79222731" target="_blank" rel="noopener" title="创建远程分支">https://blog.csdn.net/u012701023/article/details/79222731</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF" target="_blank" rel="noopener" title="远程分支">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></p><h2 id="本章命令总结"><a href="#本章命令总结" class="headerlink" title="本章命令总结"></a>本章命令总结</h2><ul><li>创建并切换分支</li></ul><p><code>$ git checkout -b dev</code></p><p><code>$ git switch -c dev</code></p><ul><li>创建分支</li></ul><p><code>$ git branch dev</code></p><ul><li>切换分支</li></ul><p><code>$ git checkout dev</code></p><p><code>$ git switch dev</code></p><ul><li>查看分支</li></ul><p><code>$ git branch</code></p><ul><li>合并分支</li></ul><p><code>$ git merge dev</code></p><ul><li>删除分支</li></ul><p><code>$ git branch -d dev</code></p><ul><li>强制删除分支</li></ul><p><code>$ git branch -D dev</code></p><ul><li>合并分支时禁用Fast forward模式</li></ul><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><ul><li>查看分支历史</li></ul><p><code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><ul><li>“储藏”当前分支</li></ul><p><code>$ git stash</code></p><ul><li>查看“储藏起来的分支”</li></ul><p><code>$ git stash list</code></p><ul><li>恢复“储藏”起来的工作分支</li></ul><p><code>$ git stash apply</code></p><ul><li>删除stash的内容</li></ul><p><code>$ git stash drop</code></p><ul><li>恢复并删除“储藏”起来的工作分支</li></ul><p><code>$ git stash pop</code></p><ul><li>复制另一条分支提交的内容到本分支</li></ul><p><code>$ git cheery-pick 4c805e2</code></p><ul><li>添加远程仓库</li></ul><p><code>$ git remote add origin git@git.com:planewalker1205/newRepository.git</code></p><ul><li>查看远程仓库</li></ul><p><code>$ git remote</code></p><p><code>$ git remote -v</code></p><ul><li><strong>将本地数据推送到远程仓库（-u表示联系到远程仓库的master分支）</strong></li></ul><p><code>$ git push -u origin master</code></p><ul><li>删除指定的远程仓库</li></ul><p><code>$ git remote rm origin</code></p><ul><li>推送master分支</li></ul><p><code>$ git push origin master</code></p><ul><li>推送dev分支</li></ul><p><code>$ git push origin dev</code></p><ul><li>远程仓库克隆</li></ul><p><code>$ git clone git@github.com:planewalker1205/newRepository.git</code></p><ul><li>远程仓库创建分支(前提是本地有此分支)</li></ul><p><code>$ git push origin dev:dev</code></p><ul><li><strong>本地创建dev分支并联系到远程仓库的dev分支</strong></li></ul><p><code>$ git checkout -b dev origin/dev</code></p><ul><li>从远程仓库拉去最新提交（前提是指定本地分支与远程仓库分支的链接）</li></ul><p><code>$ git pull</code></p><ul><li>抓取远程仓库有而本地没有的数据</li></ul><p><code>$ git fetch origin</code></p><ul><li>将刚刚抓取到的内容合并到当前分支(注意，下列dev表示远程仓库的分支)</li></ul><p><code>$ git merge origin/dev</code></p><ul><li><strong>指定本地的dev分支与远程origin/dev分支链接</strong></li></ul><p><code>$ git branch --set-upstream-to=origin/dev dev</code></p><ul><li>查看设置的所有的跟踪分支</li></ul><p><code>$ git branch -vv</code></p><ul><li>删除远程分支</li></ul><p><code>$ git push origin --delete dev</code></p><ul><li>删除远程分支(推送一个空分支到远程分支)</li></ul><p><code>$ git push origin:dev</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;网页无法访问GitHub网站的解决办法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入Window下目录：C：\ Windows \ System32 \ drivers \ etc&lt;/p&gt;
&lt;p&gt;notepad++打开hosts文件,在末尾添加如下代码:&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记1</title>
    <link href="http://yoursite.com/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-15T14:46:24.000Z</published>
    <updated>2020-01-25T07:06:19.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h3 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h3><p>首先，您可以试着输入<code>git</code>，看看系统有没有安装Git:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program <span class="string">'git'</span> is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>如果您碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成</p><p>Git的安装。老一点的eDebian或者Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code></p><h3 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h3><ol><li>安装homebrew，然后通过homebrew安装Git，具体方法参考homebrew的文档:http://<br>brew.sh/</li><li>直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜<br>单”Xcode”-&gt;”Preferences”,在弹出窗口找到”Downloads”，选择”Command Line Tools”,<br>点”Install”就可以完成安装。</li></ol><h3 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h3><p>可以直接从Git官网直接下载安装程序。默认下一步即可。</p><p>在开始菜单里找到”Git”-&gt;”Git Bash”，蹦出一个类似命令行的窗口。就说明Git安装成功！</p><p><strong>安装成功后，还需要最后一步设置:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>由于Git是分布式版本控制系统，所以，每个机器都必须自报家门:你的名字和email地址。</p><blockquote><p><code>--global</code>参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址.</p></blockquote><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><blockquote><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单的理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都可以跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以”还原”.</p></blockquote><ol><li>首先，选择一个合适的地方，创建一个空目录:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;Users&#x2F;michael&#x2F;learngit</span><br></pre></td></tr></table></figure><code>pwd</code>命令用于显示当前目录，从上可以看出，这个仓库位于<code>/Users/michael/learngit</code></li></ol><blockquote><p>如果您使用的是Windows系统，为了避免遇到各种各样莫名其妙的问题，请确保目录名(包括父目录)不包含中文。</p></blockquote><ol start="2"><li>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in &#x2F;Users&#x2F;michael&#x2F;learngit&#x2F;. git&#x2F;</span><br></pre></td></tr></table></figure><p>瞬间Git就把仓库创建好了，而且告诉你是一个空的仓库(empty Git repository),自动生成的一个.git目录千万不要乱动！.git目录默认是隐藏的，使用’ls -ah’命令就可以看到.</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ol><li>编写一个<code>readme.txt</code>文件:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system</span><br><span class="line">Git is free softwware</span><br></pre></td></tr></table></figure><blockquote><p>注:一定要放到创建的<code>learngit</code>目录下(子目录也可以)，因为这是一个Git仓库，放到其他地方Git是不会找到这个恩建的。而把一个文件放到Git仓库只需要两步。</p></blockquote></li></ol><ul><li>使用命令<code>git add</code>告诉Git，要把文件添加到仓库:</li></ul><p><code>git add readme.txt</code></p><p>执行上面的命令，不会有任何显示。这就对了，Unix的哲学:“没有消息就是好消息”，这说明添加成功。</p><ul><li>使用命令<code>git commit</code>告诉Git，把文件提交到仓库:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><blockquote><p>为什么将文件提交到仓库需要两步呢，因为<code>git add &lt;file&gt;</code>的命令可以多次使用，最后再<code>git commit</code>一次性提交，非常方便。</p></blockquote><p><strong>当命令出现end结束后，无法退出时，可以直接按q结束</strong></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在Git中，我们可以使用<code>git log</code>命令来查看我们提交过的具体版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><code>git log</code>命令显示从最近到最远的提交日志。如果嫌输出信息听太多，可以加上<code>--pretty=oneline</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><blockquote><p>以上输出信息中<code>1094abd...</code>的东西是<code>commid id</code>（版本号）.在Git中，用’HEAD’表示当前版本，也就是最新的提交<code>1094adb...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>,也可以写成<code>HEAD~100</code>，表示第100个版本。</p></blockquote><p>如果想要回退版本，那么可以使用<code>git reset --hard HEAD^</code></p><p>查看版本是否被还原 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">aaaaaaaa</span><br><span class="line">bbbbbbbb</span><br></pre></td></tr></table></figure><p>再用<code>git log</code>命令查看版本库的状态，可以看到最新的版本已经看不到了。</p><p>如果你想回退的版本已经没有了，那么只要命令行中还存在<code>1094abd</code>之类的版本号，那么依旧可以回退。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reset --hard 1094a</span><br></pre></td></tr></table></figure><p>如果你的命令行重新打开了，却还想要回退到之前的某个版本，那么使用命令<code>$ git reflog</code>用来记录你的每一次命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>Git中存在着暂存区的概念。</p><p><strong>工作区</strong>指的就是你在电脑里能看到的目录，比如创建的包含<code>.git</code>的文件夹就是一个工作区。</p><p><strong>版本库</strong>工作区中有一个隐藏的目录<code>.git</code>，他不算是工作区，而是Git的版本库。Git的版本库中存放了很多东西，其中，最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的 第一个分支<code>master</code>，以及指向<code>master</code>的一个指针<code>HEAD</code><br><img src="/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%9A%82%E7%BC%93%E5%8C%BA.jpg" alt="示意图"></p><p>可以用命令试着去比较一下工作区，暂缓区和版本库之间的区别。</p><p><strong>git diff的命令只会比较两区域都存在的文件,如果工作区存在a文件,暂存区不存在a文件,其他都相同,那么git diff也不会打印出任何东西.这是可以使用git status命令比较查看.</strong></p><p><code>git status</code> —查看状态。</p><p><code>git diff</code> —-查看工作区和暂存区差异</p><p><code>git diff --cached</code> —-查看暂存区和仓库的差异</p><p><code>git diff HEAD</code> —-查看工作区和仓库的差异</p><p><code>git add</code>的反向命令<code>git checkout --file</code>，撤销工作区修改，如果修改后还没有放到暂存区，那么就是仓库的最新版本转至工作区。如果已经添加到暂存区，又做了修改，那么撤销修改就是回到添加到暂存区后的状态。</p><p><code>git commit</code>的反向命令<code>git reset HEAD</code>,就是把仓库最新版本转移至暂存区。    </p><blockquote><p><code>git checkout --file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了’切换到另一分支’的命令。</p></blockquote><p>当你不小心把工作区的内容添加到了暂缓区，那么就可以使用<code>git reset HEAD&lt;file&gt;</code>命令把暂存区的修改回退到工作区。当我们使用<code>HEAD</code>时，表示最新的版本。</p><p><code>git reset</code>命令个既可以回退版本。也可以把暂存区的修改回退到工作区。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>一般情况下，通常直接删除没用的文件，或者使用<code>rm</code>命令删了:</p><p><code>$ rm test.txt</code></p><p>这种时候，工作区和版本库就不一致了。可以<code>git status</code>命令 查看状态。</p><p>现在，如果你想要从版本库中删除该文件，那么就是用命令<code>git rm</code>删掉，然后<code>git commit</code></p><p>还有一种情况是删错了，那么直接<code>$ git checkout --test.txt</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>git checkout file</code>和<code>git reset HEAD file</code></p><ol><li>当你只是单纯的修改了工作区的内容，当发现修改的内容错误时，就可以使用<code>git checkout file</code>回退工作区的内容。</li></ol><blockquote><p>当你的暂存区有对应文件的话，那么回退得版本是暂存区的版本，当暂存区已经提交或没有存在的话，那么回退的版本就是版本库最近一次的版本。(据我自己试验可得，此命令就是把暂存区的内容回退到工作区.)</p></blockquote><ol start="2"><li>当你已经把工作区的内容添加到了暂存区，那么你想撤销掉暂存区的内容，就可以使用<code>git reset HEAD file</code>命令，把暂存区的内容撤回到版本库最近一次的版本，然后再使用<code>git checkout file</code>命令把工作区的版本回退到暂存区的最近一次版本。</li></ol><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p></blockquote><ol start="3"><li>当你把错误的文件提交到版本库时，参考上面的回退版本。</li></ol><p><strong>本节命令</strong></p><ul><li><p>git设置用户名邮箱:  </p><p>  <code>$ git config --flobal user.name &quot;Your Name&quot;</code></p><p>  <code>$ git config --global user.email &quot;email@ex.com&quot;</code></p></li><li><p>本地创建空目录:</p><p>  <code>$ mkdir emptyPro</code></p></li><li><p>进入创建的目录</p><p>  <code>$ cd emptyPro</code></p></li><li><p>查看当前所在目录</p><p>  <code>$ pwd</code></p></li><li><p>初始化空目录使之成为可以被Git管理的仓库（注意是要在这个目录下）</p><p>  <code>$ git init</code></p></li><li><p>把编写的文件添加到暂存区</p><p>  <code>$ git add one.txt</code></p><p>  <code>$ git add two.txt</code></p></li><li><p>把添加到暂存区的文件全部提交到仓库</p><p>  <code>$ git commit -m &quot;tips&quot;</code></p></li><li><p>查看提交过的版本</p><p>  <code>$ git log</code></p></li><li><p>查看格式化后的版本</p><p>  <code>$ git log --pretty=oneline</code></p></li><li><p>工作区的内容回退一个版本(hard表示HEAD指向目标版本，且工作区和暂存区的内容都要回退到目标版本。)</p><p>  <code>$ git reset --hard HEAD^</code></p></li></ul><ul><li><p>回退两个版本</p><p>  <code>$ git reset --hard HEAD^</code></p></li><li><p>回退到第n个版本</p><p>  <code>$ git reset --hard HEAD~n</code></p></li><li><p>查看文件内容</p><p>  <code>$ cat one.txt</code></p></li><li><p>查看所有变更记录的版本号</p><p>  <code>$ git reglog</code></p></li><li><p>查看状态</p><p>  <code>$ git status</code></p></li><li><p>查看工作区和暂存区差异</p><p>  <code>$ git diff</code></p></li><li><p>查看暂存区和仓库差异</p><p>  <code>$ git diff --cached</code></p></li><li><p>查看工作区和仓库差异</p><p>  <code>$ git diff HEAD</code></p></li><li><p>删除工作区文件</p><p>  <code>$ rm one.txt</code></p></li><li><p>删除暂存区文件夹</p><p>  <code>git rm -r testPro</code></p></li><li><p>删除暂存区文件</p><p>  <code>$ git rm one.txt</code></p></li><li><p>撤销工作区的修改</p><p>  <code>$ git checkout file</code></p></li><li><p>如果有多个分支的话撤销工作区的修改（表示撤销当前工作分支的工作区的修改）</p><p>  <code>$ git checkout HEAD file</code></p></li><li><p>撤销暂存区的修改</p><p>  <code>$ git reset HEAD file</code></p></li><li><p>查看暂存区内容</p><p>  <code>$ git ls-files --stage</code></p></li><li><p>清空(删除)暂存区</p><p>  <code>$ rm .git/index</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h2&gt;&lt;h3 id=&quot;在Linux上安装Git&quot;&gt;&lt;a href=&quot;#在Linux上安装Git&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>IDEA基础设置及操作</title>
    <link href="http://yoursite.com/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/</id>
    <published>2020-01-11T14:28:36.000Z</published>
    <updated>2020-03-15T13:01:03.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键操作："><a href="#快捷键操作：" class="headerlink" title="快捷键操作："></a>快捷键操作：</h3><p><a href="http://blog.zhaojishun.cn/articles/2020/01/27/1580092173752.html" target="_blank" rel="noopener" title="IDEA高频快捷键">http://blog.zhaojishun.cn/articles/2020/01/27/1580092173752.html</a></p><ol><li><p>弹出代码修改提示:<code>alt+enter</code></p></li><li><p>代码补全:<code>ctrl+space</code>(如果没用可能是快捷键冲突)</p></li><li><p>输出快捷键:<code>sout</code></p></li><li><p>get/set生成:<code>alt+insert</code></p></li><li><p>Alt+回车 导入包,自动修正</p></li><li><p>Ctrl+N  查找类</p></li><li><p>Ctrl+Shift+N 查找文件</p></li><li><p>Ctrl+Alt+L  格式化代码</p></li><li><p>Ctrl+Alt+O 优化导入的类和包</p></li><li><p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p></li><li><p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p></li><li><p>Ctrl+R 替换文本</p></li><li><p>Ctrl+F 查找文本</p></li><li><p>Ctrl+Shift+Space 自动补全代码</p></li><li><p>Ctrl+空格 代码提示</p></li><li><p>Ctrl+Alt+Space 类名或接口名提示</p></li><li><p>Ctrl+P 方法参数提示</p></li><li><p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p></li><li><p>Alt+Shift+C 对比最近修改的代码</p></li><li><p>Shift+F6  重构-重命名</p></li><li><p>Ctrl+Shift+先上键</p></li><li><p>Ctrl+X 删除行</p></li><li><p>Ctrl+D 复制行</p></li><li><p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）</p></li><li><p>Ctrl+J  自动代码</p></li><li><p>Ctrl+E 最近打开的文件</p></li><li><p>Ctrl+H 显示类结构图</p></li><li><p>Ctrl+Q 显示注释文档</p></li><li><p>Alt+F1 查找代码所在位置</p></li><li><p>Alt+1 快速打开或隐藏工程面板</p></li><li><p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p></li><li><p>Alt+ left/right 切换代码视图</p></li><li><p>Alt+ Up/Down 在方法间快速移动定位</p></li><li><p>Ctrl+Shift+Up/Down 代码向上/下移动。</p></li><li><p>F2 或Shift+F2 高亮错误或警告快速定位</p></li><li><p>代码标签输入完成后，按Tab，生成代码。</p></li><li><p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p></li><li><p>Ctrl+W 选中代码，连续按会有其他效果</p></li><li><p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p></li><li><p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p></li><li><p>Ctrl+B 快速打开光标处的类或方法</p></li><li><p>ctrl+z 撤销</p></li><li><p>ctrl+shift+z 反撤销</p></li></ol><p>最常用快捷键</p><ol><li><p>Ctrl＋E，可以显示最近编辑的文件列表</p></li><li><p>Shift＋Click可以关闭文件</p></li><li><p>Ctrl＋[或]可以跳到大括号的开头结尾</p></li><li><p>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p></li><li><p>Ctrl＋F12，可以显示当前文件的结构</p></li><li><p>Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</p></li><li><p>Ctrl＋N，可以快速打开类</p></li><li><p>Ctrl＋Shift＋N，可以快速打开文件</p></li><li><p>Alt＋Q可以看到当前方法的声明</p></li><li><p>Ctrl＋W可以选择单词继而语句继而行继而函数</p></li><li><p>Alt＋F1可以将正在编辑的元素在各个面板中定位</p></li><li><p>Ctrl＋P，可以显示参数信息</p></li><li><p>Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</p></li><li><p>Alt＋Insert可以生成构造器/Getter/Setter等</p></li><li><p>Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</p></li><li><p>Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</p></li><li><p>Alt＋Up and Alt＋Down可在方法间快速移动</p></li><li><p>在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”</p></li><li><p>Ctrl＋Shift＋Alt＋N可以快速打开符号</p></li><li><p>Ctrl＋Shift＋Space在很多时候都能够给出Smart提示</p></li><li><p>Alt＋F3可以快速寻找</p></li><li><p>Ctrl＋/和Ctrl＋Shift＋/可以注释代码</p></li><li><p>Ctrl＋Alt＋B可以跳转到抽象方法的实现</p></li><li><p>Ctrl＋O可以选择父类的方法进行重写</p></li><li><p>Ctrl＋Q可以看JavaDoc</p></li><li><p>Ctrl＋Alt＋Space是类名自动完成</p></li><li><p>快速打开类/文件/符号时，可以使用通配符，也可以使用缩写</p></li><li><p>Live Templates! Ctrl＋J</p></li><li><p>Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用</p></li><li><p>Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果</p></li><li><p>Ctrl＋Shift＋J可以整合两行</p></li><li><p>Alt＋F8是计算变量值</p></li></ol><p><a href="https://www.cnblogs.com/jx17/p/6244491.html" target="_blank" rel="noopener">https://www.cnblogs.com/jx17/p/6244491.html</a></p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><ol><li>代码提示不区分大小写:File-&gt;settings-&gt;Editor-&gt;General-&gt;Code Completion下:</li></ol><p><img src="/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/code%E6%8F%90%E7%A4%BA.png" alt="codeCase"></p><ol start="2"><li>清理缓存并重启IDEA:File–&gt;invalidate caches/restart</li></ol><h3 id="日常问题"><a href="#日常问题" class="headerlink" title="日常问题"></a>日常问题</h3><ol><li>当代码没有自动补全可查看File-&gt;Power Save mode自动省电是否开启</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快捷键操作：&quot;&gt;&lt;a href=&quot;#快捷键操作：&quot; class=&quot;headerlink&quot; title=&quot;快捷键操作：&quot;&gt;&lt;/a&gt;快捷键操作：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.zhaojishun.cn/articles/2020/01/27
      
    
    </summary>
    
    
    
      <category term="Intellij IDEA" scheme="http://yoursite.com/tags/Intellij-IDEA/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客网站</title>
    <link href="http://yoursite.com/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2020-01-08T15:57:16.000Z</published>
    <updated>2020-01-22T15:09:05.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境-Windows-10-64bit"><a href="#环境-Windows-10-64bit" class="headerlink" title="环境:Windows 10 64bit"></a>环境:Windows 10 64bit</h4><h4 id="工具-node-js-Git"><a href="#工具-node-js-Git" class="headerlink" title="工具:node.js     Git"></a>工具:node.js     Git</h4><h4 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h4><p><strong>1.安装Node.js</strong></p><p>打开官网:<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p><strong>2.安装Git</strong></p><p>打开官网:<a href="https://git-scm.com/donloads" target="_blank" rel="noopener">https://git-scm.com/donloads</a></p><p><strong>3.管理员权限打开命令行</strong></p><p><strong>4.</strong><code>node -v</code><strong>查看node版本</strong></p><p><code>npm -v</code><strong>npm包管理器版本</strong></p><p><strong>5.利用npm安装cnpm:</strong></p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><strong>6.查看cnpm版本</strong><code>cnpm</code></p><p><strong>7.安装hexo:</strong><code>cnpm install -g hexo-cli</code></p><p>验证:<code>hexo -v</code></p><p><strong>8.创建一个文件夹</strong></p><p>创建blog文件夹，关于个人博客的操作都是在此文件夹中进行。</p><p>命令行到该文件夹下:<code>hexo init</code>，linux系统可使用命令<code>sudo hexo init</code></p><p><strong>9.完成</strong></p><p>可访问本地<code>localhost:4000</code>访问个人博客页面。如果要部署可使用GitHub，deploy到远程库中</p><ol><li><p>在GitHub上创建仓库，注意仓库名称是要<code>用户名.github.io</code></p></li><li><p>config.yml中添加相关属性。</p></li></ol><p>repo:创建的GitHub仓库地址。</p><ol start="3"><li>命令:<code>hexo d(eploy)</code></li></ol><p>至于为什么仓库名称要是用户名:</p><p><img src="/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/360%E6%88%AA%E5%9B%BE20200122230657234.jpg" alt="名称"></p><p><u>注:</u></p><p><u>在写博客文章的时候要记得在头部冒号后加上空格 ，再填写内容.</u></p><p><strong>#遇到的问题及解决方案:</strong></p><p>1.引入图片:</p><ul><li><p>找到<code>Hexo</code>下的<code>_config.yml</code>文件里的post_asset_folder，修改诶<code>true</code></p></li><li><p>在博客目录下打开<code>Git Bash Here</code>，执行一个下载上传图片插件的命令:<code>npm install hexo-asset-image --save</code>,也可以<code>cnpm install hexo-asset-image --save</code></p></li><li><p>再次新建博客.md文件时，就会自动产生一个与博客同名的文件夹，这时候只需要把图片放入这个文件夹，在博客中引用图片的时候使用此文件夹的路径就可以了。</p></li><li><p>但有时候可能出现引用图片不成功的问题，那么这时候需要修改<code>/node_modules/hexo-asset-image/</code>下的indedx.js文件，打开并将其修改:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line">   <span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-       in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">   <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">   <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">   link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">     <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line">     <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">       ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">       xmlMode: <span class="literal">false</span>,</span><br><span class="line">       lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">       decodeEntities: <span class="literal">false</span></span><br><span class="line">     &#125;);</span><br><span class="line">     $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     data[key] = $.html();</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考地址:<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p><h3 id="MarkdownPad设置及操作"><a href="#MarkdownPad设置及操作" class="headerlink" title="#MarkdownPad设置及操作"></a>#MarkdownPad设置及操作</h3><ol><li><p>代码块: </p><ul><li><p>可使用 <code>&lt;pre\&gt; &lt;/pre\&gt;</code>标签实现代码块,不过这里要在Tools-&gt;options-&gt;Markdown-&gt;Markdown Processor–&gt;设置为Markdown</p></li><li><p>使用格式为``` 内容  ```，但如果想实现代码之间的换行同样要设置:Tools-&gt;options-&gt;Markdown-&gt;Markdown Processor–&gt;设置为CommonMark</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境-Windows-10-64bit&quot;&gt;&lt;a href=&quot;#环境-Windows-10-64bit&quot; class=&quot;headerlink&quot; title=&quot;环境:Windows 10 64bit&quot;&gt;&lt;/a&gt;环境:Windows 10 64bit&lt;/h4&gt;&lt;h4 i
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
