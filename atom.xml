<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>旅法师Ori</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-28T14:21:40.234Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot学习v1</title>
    <link href="http://yoursite.com/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/"/>
    <id>http://yoursite.com/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/</id>
    <published>2020-01-28T07:55:03.000Z</published>
    <updated>2020-01-28T14:21:40.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单搭建Spring-Boot开发环境"><a href="#简单搭建Spring-Boot开发环境" class="headerlink" title="简单搭建Spring Boot开发环境"></a>简单搭建Spring Boot开发环境</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><p>启动Intellij IDEA，选择Create New Project，看到了一个新的窗口之后，选择Spring Initializr，将JDK切换为你想要的版本。</p></li><li><p>点击Next，进行一定的配置</p></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128160719.png" alt="config1"></p><ol start="3"><li><p>点击Next，可以根据自己的需要选择对应的starter进行依赖。</p></li><li><p>建好后，工程目录可以看到一个已经建好的类Spbotdemo1Application、ServletInitializer和Maven的pom.xml文件。运行Spbotdemo1Application就可以启动Spring Boot的工程，而pom.xml则配置好了你选中的starter依赖，这样就能够基于Intellij IDEA开发Spring Boot工程了。</p></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128161252.png" alt="config1"></p><ol start="5"><li>自定义配置:在新建的工程中可以看到一个属性文件application.properties文件，通过它可以根据自己的需要实现自定义。如图:</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128161536.png" alt="config1"></p><h3 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h3><ol><li>新增JSP和JSTL的Maven依赖配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.0.24&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>application.properties文件定义视图前后缀</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8090</span><br><span class="line">spring.mvc.view.prefix&#x3D;&#x2F;WEB-INF&#x2F;jsp&#x2F;</span><br><span class="line">spring.mvc.view.suffix&#x3D;.jsp</span><br></pre></td></tr></table></figure><ol start="3"><li>开发控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>开发视图</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">acer</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">1</span>/<span class="attr">28</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">15:07</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsp文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试视图解析器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>运行application文件，打开浏览器访问<code>http://localhost:8090/index</code></li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128162325.png" alt="config1"></p><p><strong>注:Application启动类要放在最外侧，即包含所有的子包。因为Spring Boot会自动加载启动类所在包下及其子包下的所有组件</strong></p><h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><p>定义：<strong>在Spring中把每一个需要管理的对象成为Spring Bean(简称Bean)，而Spring管理这些Bean的容器，被我们成为Spring IoC容器(简称IoC容器)。</strong></p><blockquote><p>Spring IoC容器是一个管理Bean的容器，在Spring的定义中，所有的IoC容器都需要实现接口BeanFactory，它是顶级容器接口。而由于BeanFactory的功能还不够强大，因此Spring在BeanFactory的基础上，还设计了更为高级的接口ApplicationContext，它是BeanFactory的子接口之一，在现实中我们使用的大部分Spring IoC容器是ApplicationContext接口的实现类。</p></blockquote><p>以下示例是基于注解的IoC容器AnnotationConfigApplicationContext。</p><ul><li><strong>第一个装配Bean的方法</strong></li></ul><ol><li>定义User实体</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128210557.png" alt="User"></p><ol start="2"><li>定义Java配置文件</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128210935.png" alt="config"></p><blockquote><p>注解<code>@Configuration</code>代表这是一个Java配置文件，Spring的容器会根据它来生成IoC容器去装配Bean；<code>@Bean</code>代表将initUser方法返回的pojo装配到IoC容器中，属性name表示这个Bean的名称，如果没有配置它，默认是方法名称”initUser”.</p></blockquote><ol start="3"><li>使用AnnotationConfigApplicationContext构建IoC容器。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128211358.png" alt="config"></p><ul><li><strong>通过扫描装配Bean</strong></li></ul><blockquote><p>如果Bean使用注解<code>@Bean</code>一个个注入到IoC容器中，将使一个非常麻烦的事情。Spring允许我们进行扫描装配Bean到IoC容器中。对于扫描装配而言使用的注解是<code>@Component</code>和<code>@ComponentScan</code>。<code>@Component</code>是表明哪个类被扫描进入Spring IoC容器，而<code>@ComponentScan</code>是标明采用何种策略去扫描装配Bean。</p></blockquote><ol><li>首先移动User类到conf包下，这是因为注解了<code>@ComponentScan</code>的类默认扫描该类所在的当前包和其子包。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128212945.png" alt="config"></p><ol start="2"><li>User类加入注解@Component</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"016"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"LWX"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"note1"</span>)</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//GET&amp;SET...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Component</code>表示这个类将被Spring IoC容器扫描装配，“user”是作为Bean的名称，不配置“user”的话默认会把类名的第一个字母作为小写，其他不变作为Bean名称放入到IoC容器中。<code>@Value</code>指具体的值。</p></blockquote><ol start="3"><li>AppConfig类加入注解<code>@ComponentScan</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.conf;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appconfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解<code>@ComponentScan</code>表示它会进行扫描，且默认知会扫描类Appconfig所在的当前包以及子包。</p></blockquote><ol start="4"><li>测试扫描</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sbtest.onespbot.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.sbtest.onespbot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoCTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(IoCTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Appconfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        logger.info(<span class="string">"用户的id是:"</span>+user.getId());</span><br><span class="line">        logger.info(<span class="string">"用户姓名是:"</span>+user.getUserName());</span><br><span class="line">        logger.info(<span class="string">"便签是:"</span>+user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，可以正常输出日志信息。</p><p>上述方法2为了能使User类能够被扫描而把它迁移到了其他的包中，这显然是不合理的，为了更加合理，<code>@ComponentScan</code>允许我们自定义扫描的包。</p><ul><li><strong>自定义扫描包</strong></li></ul><p>可以通过配置项<strong>basePackages</strong>定义扫描的包名，其中还有<strong>includeFilters</strong>和<strong>excludeFilters</strong>。前者是定义满足过滤器条件的Bean才去扫描，后者则是排除过滤器条件的Bean</p><ol><li>重新把类User放到pojo包下。</li></ol><p><img src="/2020/01/28/Spring-Boot%E5%AD%A6%E4%B9%A0v1/QQ%E6%88%AA%E5%9B%BE20200128214250.png" alt="diyBean"></p><ol start="2"><li>把Appconfig中的注解修改为:</li></ol><p>(1)<code>@ComponentScan(&quot;com.example.sbtest.onespbot.pojo&quot;)</code>或<code>@ComponentScan(&quot;com.example.sbtest.onespbot.*&quot;)</code></p><p>这样就可以扫描到pojo包下的类或者是onespbot下所有的包。注意，这里的地址不能直接写到类的位置。</p><p>(2) <code>@ComponentScan(basePackages={&quot;com.example.sbtest.onespbot.pojo&quot;})</code></p><p>(3) <code>@ComponentScan(basePackageClasses = {User.class})</code></p><blockquote><p>当你扫描的包下面包含了标注了<code>@Service</code>(该标准注入了@Component，默认情况下会被Spring扫描装配到IoC容器中)的服务类而你又不想服务类被扫描装配的话，需要把扫描策略修改为:</p></blockquote><p><code>@ComponentScan(basePackages = &quot;com.example.sbtest.onespbot.*&quot;,excludeFilters = {@Filter(classes = {UserService.class})})</code>。</p><p>这样，就可以把服务类UserService排除到SpringIoC容器之外了。事实上，之前的Spring Boot注解<code>@SpringBootApplication</code>也注入了<code>@ComponentScan</code>。所以如果标注了<code>@Component</code>的pojo类在标注了<code>@SpringBootApplication</code>的类所在的包或子包下，可以不用在类上标注<code>@ComponentScan</code>(OnespbotApplication是标注了@SpringBootApplication的启动类。):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(OnespbotApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        logger.info(<span class="string">"用户的id是:"</span>+user.getId());</span><br><span class="line">        logger.info(<span class="string">"用户姓名是:"</span>+user.getUserName());</span><br><span class="line">        logger.info(<span class="string">"便签是:"</span>+user.getNote());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以被</strong><code>@ComponentScan</code><strong>扫描到的类的标注有:</strong></p><p><code>@Controller</code>，<code>@Repository</code>，<code>@Service</code>或<code>@Component</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单搭建Spring-Boot开发环境&quot;&gt;&lt;a href=&quot;#简单搭建Spring-Boot开发环境&quot; class=&quot;headerlink&quot; title=&quot;简单搭建Spring Boot开发环境&quot;&gt;&lt;/a&gt;简单搭建Spring Boot开发环境&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="IntelliJ IDEA" scheme="http://yoursite.com/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记v2</title>
    <link href="http://yoursite.com/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/"/>
    <id>http://yoursite.com/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/</id>
    <published>2020-01-21T13:51:24.000Z</published>
    <updated>2020-01-27T11:41:45.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网页无法访问GitHub网站的解决办法:</strong></p><p>进入Window下目录：C：\ Windows \ System32 \ drivers \ etc</p><p>notepad++打开hosts文件,在末尾添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#github </span><br><span class="line">192.30.253.113 github.com </span><br><span class="line">192.30.253.113 github.com </span><br><span class="line">192.30.253.118 gist.github.com </span><br><span class="line">192.30.253.119 gist.github.com</span><br></pre></td></tr></table></figure><p><em>此方法来自博客:</em> <a href="https://blog.csdn.net/weixin_39087263/article/details/84493188" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39087263/article/details/84493188</a></p><h2 id="如何使用ssh密钥"><a href="#如何使用ssh密钥" class="headerlink" title="如何使用ssh密钥"></a>如何使用ssh密钥</h2><p>初次使用git的用户要使用git协议大概需要三个步骤:</p><ul><li><p>生成密钥对</p><ol><li><p>ssh公钥默认存储在账户的主目录下的~/.ssh目录，查看:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd~&#x2F;.ssh</span><br><span class="line">$ ls</span><br><span class="line"> authorized_leys2 id_dsaknown_hosts configid_dsa.pub</span><br></pre></td></tr></table></figure><p>查看是否存在id_rsa和id_rsa.pub(id_dsa和id_dsa.pub之类成对的文件.)。</p><p><code>.pub</code>后缀的文件为公钥，另一个文件时密钥。</p></li><li><p>如果没有上述文件，没有.ssh目录，可以使用ssh-keygen创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;email@email.com&quot;</span><br><span class="line"></span><br><span class="line">Creates a new ssh key using the provided email # Generating public&#x2F;private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure><p>直接enter，然后输入密码。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121232408.png" alt="输入密码"></p></li></ol></li><li><p>设置远程仓库上的公钥</p><ol><li><p>查看生成的公钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDBGTYBoVSyZsK0FyYuL3u5ATxwaETtplLsejKsj76G9ca1Bx519YLZCzY6zFnaD&#x2F;2jYEZv1&#x2F;IUjNxHWWRqP47zWTdQvdvSfPOheIp1j+mbA0HWPtCIi4c8vX3XWSv90uDoyzllMT3Qwi1XAn3TdcthLxIXKIb0v70ZdmXcl5t3t68BQfhrB&#x2F;ykL4m6Nji0qPdTOtYwNYT0FH&#x2F;n8Wvb7wBd8w1BJ6YNUZzyWkWLHFcF+hvXpaM4w5A0P7M880xsYROnyMB57WSejp1Dcp69KAp0WpjV5CPXsMgyvwEQ&#x2F;aYKTYw06EAVUMavDTDTOZ9&#x2F;I08P0R9X07HG+V99pB2r74f7AC2vvuglTLC4OT0hc3ZuyGYX3ATasv4og46sJJY46q65WUEyVvfNF6+QVRV8j9scy&#x2F;OyjzrEQqXOjFVaxx7RE7LgcVvLhNRnartavD7Ll+4wMNDdiWqD88EBe8p3nbtl4&#x2F;5Eu5w35BWm0AJg3jSykT643lOD0LJVSXIzyHkXST0&#x3D; 462083214@qq.com</span><br></pre></td></tr></table></figure></li><li><p>登录GitHub账户，点击头像，Settings–SSH and GPG kets–New SSH key。</p></li><li><p>把命令行查看的密钥复制粘贴进去，记得要把前面的<code>ssh-rsa</code>一块复制进去，title随便填，最后点击Add key。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121233114.png" alt="pic"></p></li><li><p>验证key是否正常工作</p></li></ol></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Attempts to ssh to github</span><br></pre></td></tr></table></figure>这里可能会让你输入密码。最后，如果看到`Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.`则代表已经设置成功！</code></pre><ul><li><p>把git的remote url修改为git协议</p><ol><li><p>使用命令git remote -v查看当前remote url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;someaccount&#x2F;someproject.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;someaccount&#x2F;someproject.git (push)</span><br></pre></td></tr></table></figure><p>若是以上结果说明此项目是使用https协议进行访问的.(如果地址是git开头则表示是git协议).且只有是SSH URL的链接我们才能推送数据上去。</p></li><li><p>使用命令<code>git remote set-url</code>来调整url</p><p><code>git remote set-url origin git@github.com:planeswalker1205/newRepository.git</code></p><p>最后再使用<code>git remote -v查看</code></p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/QQ%E6%88%AA%E5%9B%BE20200121233712.png" alt="ssh地址"></p></li></ol></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>添加远程仓库</strong></p><ol><li><p>登录GitHub，创建一个新的仓库，仓库名称叫newRepository。</p></li><li><p>本地仓库运行如下命令:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.com:planewalker1205&#x2F;newRepository.git</span><br></pre></td></tr></table></figure><blockquote><p>以上命令中:<strong>gitrep</strong>：远程仓库名称，默认可以叫origin，一看就可以知道是远程仓库，<strong>planewalker1205</strong>是你的GitHub用户名名称，<strong>newRepository.git</strong>是GitHub上创建的仓库的名称。再次强调只有SSH URL的链接(也就是git开头)我们才可以推送数据上去。</p></blockquote><ol start="3"><li>将本地数据推送到远程仓库</li></ol><p><code>$ git push -u origin master</code></p><blockquote><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了-u参数。Git不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。<code>$ git push origin master</code></p></blockquote><p><strong>删除指定的远程仓库</strong></p><p><code>git remote rm origin</code></p><h2 id="分支的创建与合并"><a href="#分支的创建与合并" class="headerlink" title="分支的创建与合并"></a>分支的创建与合并</h2><p>注意:</p><blockquote><p>在使用分支时要注意，各分支之间工作区与暂存区是公共的，所以在一个分支的工作区修改的内容如果未add或commit就切换到另一个分支那么这些修改的内容也会被带到另一个分支。只有在一个分支中把内容提交另一个分支的工作区的内容才会更改回原来的状态。如果一个分支的内容已经作出修改并提交，而在另一个分支的工作区修改内容，再从另一个分支切换到已经修改并提交的分支时是不允许的。可以使用git stash命令处理相关问题。</p></blockquote><p>即:</p><blockquote><p>当前创建了a分支，a分支有文件a.txt，然后创建并切换到b分支，同样的b分支会自动生成a.txt，那么此时如果在b分支修改a.txt的内容，然后切换到a分支，b分支修改后的内容会带到a分区，在然后无论是提交修改后的a分支的内容还是提交修改后的b分支的内容，最终没被提交的哪一个分支的内容会自动回退到被修改之前的状态。</p></blockquote><blockquote><p>接上。如果a分支或者b分支的对应文件内容作出了修改并且提交，那么无论是在a分支还是在b分支修改工作区的对应文件的内容并且不commit，那么切换到另一个分支（a或者b）都是Git不允许的。反之，如果没有修改分支的对应文件的内容而只是新建了其他的文件，那么切换分支参考上一个tips。</p></blockquote><p><strong>对于刚创建的新分支，只有两个分支都有修改才提交后才判断同一个文件作出不同的修改操作的冲突。而对于新创建一个分支b只修改其中一个分支a/b并且提交，那么在另一个分支a合并(修改并提交的分支)b，另一个分支a会被(修改并提交的分支)b覆盖。</strong></p><ul><li>创建分支</li></ul><p><code>$ git checkout -b dev</code></p><blockquote><p>上述命令表示创建并切换到分支dev，等同下列命令:</p></blockquote><p><code>$ git branch dev</code></p><p><code>$ git checkout dev</code></p><p>使用<code>$ git branch</code>查看当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><blockquote><p>*号表示当前在哪个分支。</p></blockquote><ul><li>合并分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  dev</span><br></pre></td></tr></table></figure><p><code>$ git merge dev</code></p><blockquote><p>表示把dev分支合并到master分支上</p></blockquote><p>合并完成后，就可以删除dev分支:</p><p><code>$ git branch -d dev</code></p><p>如果报错的话可能是因为当前的分支还没有合并提示你并不能删除。此时，如果想要强制删除的话可以使用大写的D</p><p><code>$ git branch -D dev</code></p><p>再次查看分支，可以看到只剩下<code>master</code>分支了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li>switch切换分支</li></ul><p><code>$ git switch -c dev</code>等同于<code>$ git checkout -b dev</code></p><p><code>$ git switch master</code>等同于<code>$ git checkout master</code></p><p><strong>解决冲突</strong></p><ol><li>创建dev分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure><ol start="2"><li>修改test.txt内容并提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line"></span><br><span class="line">dev test.txt</span><br><span class="line"></span><br><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;dev commit&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>切换到master分支，修改test.txt内容并提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line"></span><br><span class="line">master test.txt</span><br><span class="line"></span><br><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;master commit&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>合并dev分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line"></span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><blockquote><p>可以看到如果两个分支的同一个文件的不同位置都有修改且提交的话，再次合并就会发生冲突。必须手动解决冲突后才能提交。</p></blockquote><hr><p>合并分支默认会使用<code>Fast forward</code>模式，该模式下如果删除分支会丢失分支信息。如果要禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit。</p><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p>使用<code>git log</code>查看分支历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|&#x2F;  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure><p>在不使用<code>Fast forward</code>模式，merge后就会像这样。</p><p><img src="/2020/01/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0v2/0.png" alt="0"></p><p>如果你在一个分支dev上工作许久，此时需要紧急切换到另一个分支，但你还并不想提交当前工作的分支的内容，那么你就可以使用<code>stash</code>命令，把当前工作现场”储藏”起来，等以后恢复现场后继续工作。</p><p><code>$ git stash</code></p><p>现在，用<code>git status</code>查看工作区，就是干净的。可以放心创建或者切换到别的分支而不受本分支的影响。</p><p>当你处理完别的分支上的事情，切换到了之前工作并使用<code>stash</code>命令储藏工作内容的dev分支上。使用<code>git stash list</code>命令查看储藏起来的工作现场。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>想要恢复工作现场。有两种办法。</p><ol><li><p>使用<code>git stash apply</code>命令。使用此命令在恢复后stash内容并不会删除。需要使用<code>git stash drop</code>命令来删除。</p></li><li><p>使用<code>git stash pop</code>，使用此命令在恢复的同时也会把stash的内容删除。</p></li></ol><p>再使用<code>git stash list</code>命令就看不到任何stash内容了。</p><blockquote><p>当你在master分支上修复了bug后，由于dev分支时早期从master分支分出来的，所以，此bug也存在于dev分支。如果想在dev分支上修复同样的bug，除了可以重复操作一次再提交外。还有一种方法，只需要把在master上<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支上。注意，此处是复制，而不是merge合并。</p></blockquote><p><code>$ git cheery-pick 4c805e2</code> </p><p>此时，Git自动给dev分支做了一次提交。而这次提交的commitID是<code>1d4b803</code>，虽然它们的改动相同，但提交的commitID不同。</p><p><strong>多人协作</strong></p><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p><p>要查看远程库的信息，用git remote：.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>或者，使用<code>git remote -v</code>查看更详细的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:planewalker1205&#x2F;newRepository.git (fetch)</span><br><span class="line">origin  git@github.com:planewalker1205&#x2F;newRepository.git (push)</span><br></pre></td></tr></table></figure><p>上面显示的是可以抓取的<code>origin</code>的地址，如果没有推送权限的话，是看不到push的地址的。</p><ul><li>推送分支</li></ul><p><code>$ git push origin master</code></p><ul><li>推送其他分支</li></ul><p><code>$ git push origin dev</code></p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ol><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p></li><li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p></li><li><p><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p></li><li><p><code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p></li></ol><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><ul><li>抓取分支</li></ul><ol><li>先向远程仓库的目录克隆</li></ol><p><code>$ git clone git@github.com:planewalker1205/newRepository.git</code></p><p>默认情况是只能看到本地的<code>master</code>分支。</p><ol start="2"><li>若想要在<code>dev</code>分支上开发，那么就必须创建远程<code>origin</code>的<code>dev</code>分支到本地:</li></ol><p><code>$ git checkout -b dev origin/dev</code></p><blockquote><p>在此之前，如果远程仓库没有dev分支，可以使用<code>$ git push origin dev:dev</code>创建远程分支.也就相当于把本地分支push到远程服务器.可以同名也可以随意取名.</p></blockquote><p>这样,就可以在<code>dev</code>上修改并且<code>push</code>到远程.</p><ol start="3"><li><p>此时,又有其他人clone了远程仓库,并作出了修改且试图推送,推送失败,原因是其他人的推送提交与你之前的推送提交有冲突,解决办法是<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，与本地合并，解决冲突，重新推送。</p></li><li><p>此时，<code>git pull</code>也失败了，原因是他没有指定本地的<code>dev</code>分支与远程<code>origin/dev</code>分支链接</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line">Branch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure><p>再重新<code>pull</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add&#x2F;add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>此时，会提示与本地合并有冲突，手动解决后，提交，<code>push</code></p><p><strong>跟踪分支</strong></p><blockquote><p>如果从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”，它跟踪的分支叫做“上游分支”，跟踪分支是与远程分支有直接关系的本地分支。如果在一个分支上输入<code>pull</code>，Git能自动识别去哪个服务器上抓取，合并到哪个分支。</p></blockquote><p>比如:</p><p><code>$ git checkout -b [branch] [remotename]/[branch]</code></p><p><code>$ git branch -u origin/serverfix</code></p><p><code>$ git branch --set-upstream-to=origin/dev dev</code></p><p>如果想要查看设置的所有跟踪分支，可以使用 <code>git branch</code> 的 <code>-vv</code> 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p><p>相关学习地址:</p><p><a href="https://blog.csdn.net/u012701023/article/details/79222731" target="_blank" rel="noopener" title="创建远程分支">https://blog.csdn.net/u012701023/article/details/79222731</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF" target="_blank" rel="noopener" title="远程分支">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></p><h2 id="本章命令总结"><a href="#本章命令总结" class="headerlink" title="本章命令总结"></a>本章命令总结</h2><ul><li>创建并切换分支</li></ul><p><code>$ git checkout -b dev</code></p><p><code>$ git switch -c dev</code></p><ul><li>创建分支</li></ul><p><code>$ git branch dev</code></p><ul><li>切换分支</li></ul><p><code>$ git checkout dev</code></p><p><code>$ git switch dev</code></p><ul><li>查看分支</li></ul><p><code>$ git branch</code></p><ul><li>合并分支</li></ul><p><code>$ git merge dev</code></p><ul><li>删除分支</li></ul><p><code>$ git branch -d dev</code></p><ul><li>强制删除分支</li></ul><p><code>$ git branch -D dev</code></p><ul><li>合并分支时禁用Fast forward模式</li></ul><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><ul><li>查看分支历史</li></ul><p><code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><ul><li>“储藏”当前分支</li></ul><p><code>$ git stash</code></p><ul><li>查看“储藏起来的分支”</li></ul><p><code>$ git stash list</code></p><ul><li>恢复“储藏”起来的工作分支</li></ul><p><code>$ git stash apply</code></p><ul><li>删除stash的内容</li></ul><p><code>$ git stash drop</code></p><ul><li>恢复并删除“储藏”起来的工作分支</li></ul><p><code>$ git stash pop</code></p><ul><li>复制另一条分支提交的内容到本分支</li></ul><p><code>$ git cheery-pick 4c805e2</code></p><ul><li>添加远程仓库</li></ul><p><code>$ git remote add origin git@git.com:planewalker1205/newRepository.git</code></p><ul><li>查看远程仓库</li></ul><p><code>$ git remote</code></p><p><code>$ git remote -v</code></p><ul><li><strong>将本地数据推送到远程仓库（-u表示联系到远程仓库的master分支）</strong></li></ul><p><code>$ git push -u origin master</code></p><ul><li>删除指定的远程仓库</li></ul><p><code>$ git remote rm origin</code></p><ul><li>推送master分支</li></ul><p><code>$ git push origin master</code></p><ul><li>推送dev分支</li></ul><p><code>$ git push origin dev</code></p><ul><li>远程仓库克隆</li></ul><p><code>$ git clone git@github.com:planewalker1205/newRepository.git</code></p><ul><li>远程仓库创建分支(前提是本地有此分支)</li></ul><p><code>$ git push origin dev:dev</code></p><ul><li><strong>本地创建dev分支并联系到远程仓库的dev分支</strong></li></ul><p><code>$ git checkout -b dev origin/dev</code></p><ul><li>从远程仓库拉去最新提交（前提是指定本地分支与远程仓库分支的链接）</li></ul><p><code>$ git pull</code></p><ul><li>抓取远程仓库有而本地没有的数据</li></ul><p><code>$ git fetch origin</code></p><ul><li>将刚刚抓取到的内容合并到当前分支(注意，下列dev表示远程仓库的分支)</li></ul><p><code>$ git merge origin/dev</code></p><ul><li><strong>指定本地的dev分支与远程origin/dev分支链接</strong></li></ul><p><code>$ git branch --set-upstream-to=origin/dev dev</code></p><ul><li>查看设置的所有的跟踪分支</li></ul><p><code>$ git branch -vv</code></p><ul><li>删除远程分支</li></ul><p><code>$ git push origin --delete dev</code></p><ul><li>删除远程分支(推送一个空分支到远程分支)</li></ul><p><code>$ git push origin:dev</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;网页无法访问GitHub网站的解决办法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入Window下目录：C：\ Windows \ System32 \ drivers \ etc&lt;/p&gt;
&lt;p&gt;notepad++打开hosts文件,在末尾添加如下代码:&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记1</title>
    <link href="http://yoursite.com/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-15T14:46:24.000Z</published>
    <updated>2020-01-25T07:06:19.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h3 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h3><p>首先，您可以试着输入<code>git</code>，看看系统有没有安装Git:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program <span class="string">'git'</span> is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>如果您碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成</p><p>Git的安装。老一点的eDebian或者Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code></p><h3 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h3><ol><li>安装homebrew，然后通过homebrew安装Git，具体方法参考homebrew的文档:http://<br>brew.sh/</li><li>直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜<br>单”Xcode”-&gt;”Preferences”,在弹出窗口找到”Downloads”，选择”Command Line Tools”,<br>点”Install”就可以完成安装。</li></ol><h3 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h3><p>可以直接从Git官网直接下载安装程序。默认下一步即可。</p><p>在开始菜单里找到”Git”-&gt;”Git Bash”，蹦出一个类似命令行的窗口。就说明Git安装成功！</p><p><strong>安装成功后，还需要最后一步设置:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>由于Git是分布式版本控制系统，所以，每个机器都必须自报家门:你的名字和email地址。</p><blockquote><p><code>--global</code>参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址.</p></blockquote><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><blockquote><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单的理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都可以跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以”还原”.</p></blockquote><ol><li>首先，选择一个合适的地方，创建一个空目录:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;Users&#x2F;michael&#x2F;learngit</span><br></pre></td></tr></table></figure><code>pwd</code>命令用于显示当前目录，从上可以看出，这个仓库位于<code>/Users/michael/learngit</code></li></ol><blockquote><p>如果您使用的是Windows系统，为了避免遇到各种各样莫名其妙的问题，请确保目录名(包括父目录)不包含中文。</p></blockquote><ol start="2"><li>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in &#x2F;Users&#x2F;michael&#x2F;learngit&#x2F;. git&#x2F;</span><br></pre></td></tr></table></figure><p>瞬间Git就把仓库创建好了，而且告诉你是一个空的仓库(empty Git repository),自动生成的一个.git目录千万不要乱动！.git目录默认是隐藏的，使用’ls -ah’命令就可以看到.</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ol><li>编写一个<code>readme.txt</code>文件:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system</span><br><span class="line">Git is free softwware</span><br></pre></td></tr></table></figure><blockquote><p>注:一定要放到创建的<code>learngit</code>目录下(子目录也可以)，因为这是一个Git仓库，放到其他地方Git是不会找到这个恩建的。而把一个文件放到Git仓库只需要两步。</p></blockquote></li></ol><ul><li>使用命令<code>git add</code>告诉Git，要把文件添加到仓库:</li></ul><p><code>git add readme.txt</code></p><p>执行上面的命令，不会有任何显示。这就对了，Unix的哲学:“没有消息就是好消息”，这说明添加成功。</p><ul><li>使用命令<code>git commit</code>告诉Git，把文件提交到仓库:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><blockquote><p>为什么将文件提交到仓库需要两步呢，因为<code>git add &lt;file&gt;</code>的命令可以多次使用，最后再<code>git commit</code>一次性提交，非常方便。</p></blockquote><p><strong>当命令出现end结束后，无法退出时，可以直接按q结束</strong></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在Git中，我们可以使用<code>git log</code>命令来查看我们提交过的具体版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><code>git log</code>命令显示从最近到最远的提交日志。如果嫌输出信息听太多，可以加上<code>--pretty=oneline</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><blockquote><p>以上输出信息中<code>1094abd...</code>的东西是<code>commid id</code>（版本号）.在Git中，用’HEAD’表示当前版本，也就是最新的提交<code>1094adb...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>,也可以写成<code>HEAD~100</code>，表示第100个版本。</p></blockquote><p>如果想要回退版本，那么可以使用<code>git reset --hard HEAD^</code></p><p>查看版本是否被还原 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">aaaaaaaa</span><br><span class="line">bbbbbbbb</span><br></pre></td></tr></table></figure><p>再用<code>git log</code>命令查看版本库的状态，可以看到最新的版本已经看不到了。</p><p>如果你想回退的版本已经没有了，那么只要命令行中还存在<code>1094abd</code>之类的版本号，那么依旧可以回退。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reset --hard 1094a</span><br></pre></td></tr></table></figure><p>如果你的命令行重新打开了，却还想要回退到之前的某个版本，那么使用命令<code>$ git reflog</code>用来记录你的每一次命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>Git中存在着暂存区的概念。</p><p><strong>工作区</strong>指的就是你在电脑里能看到的目录，比如创建的包含<code>.git</code>的文件夹就是一个工作区。</p><p><strong>版本库</strong>工作区中有一个隐藏的目录<code>.git</code>，他不算是工作区，而是Git的版本库。Git的版本库中存放了很多东西，其中，最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的 第一个分支<code>master</code>，以及指向<code>master</code>的一个指针<code>HEAD</code><br><img src="/2020/01/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%9A%82%E7%BC%93%E5%8C%BA.jpg" alt="示意图"></p><p>可以用命令试着去比较一下工作区，暂缓区和版本库之间的区别。</p><p><strong>git diff的命令只会比较两区域都存在的文件,如果工作区存在a文件,暂存区不存在a文件,其他都相同,那么git diff也不会打印出任何东西.这是可以使用git status命令比较查看.</strong></p><p><code>git status</code> —查看状态。</p><p><code>git diff</code> —-查看工作区和暂存区差异</p><p><code>git diff --cached</code> —-查看暂存区和仓库的差异</p><p><code>git diff HEAD</code> —-查看工作区和仓库的差异</p><p><code>git add</code>的反向命令<code>git checkout --file</code>，撤销工作区修改，如果修改后还没有放到暂存区，那么就是仓库的最新版本转至工作区。如果已经添加到暂存区，又做了修改，那么撤销修改就是回到添加到暂存区后的状态。</p><p><code>git commit</code>的反向命令<code>git reset HEAD</code>,就是把仓库最新版本转移至暂存区。    </p><blockquote><p><code>git checkout --file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了’切换到另一分支’的命令。</p></blockquote><p>当你不小心把工作区的内容添加到了暂缓区，那么就可以使用<code>git reset HEAD&lt;file&gt;</code>命令把暂存区的修改回退到工作区。当我们使用<code>HEAD</code>时，表示最新的版本。</p><p><code>git reset</code>命令个既可以回退版本。也可以把暂存区的修改回退到工作区。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>一般情况下，通常直接删除没用的文件，或者使用<code>rm</code>命令删了:</p><p><code>$ rm test.txt</code></p><p>这种时候，工作区和版本库就不一致了。可以<code>git status</code>命令 查看状态。</p><p>现在，如果你想要从版本库中删除该文件，那么就是用命令<code>git rm</code>删掉，然后<code>git commit</code></p><p>还有一种情况是删错了，那么直接<code>$ git checkout --test.txt</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>git checkout file</code>和<code>git reset HEAD file</code></p><ol><li>当你只是单纯的修改了工作区的内容，当发现修改的内容错误时，就可以使用<code>git checkout file</code>回退工作区的内容。</li></ol><blockquote><p>当你的暂存区有对应文件的话，那么回退得版本是暂存区的版本，当暂存区已经提交或没有存在的话，那么回退的版本就是版本库最近一次的版本。(据我自己试验可得，此命令就是把暂存区的内容回退到工作区.)</p></blockquote><ol start="2"><li>当你已经把工作区的内容添加到了暂存区，那么你想撤销掉暂存区的内容，就可以使用<code>git reset HEAD file</code>命令，把暂存区的内容撤回到版本库最近一次的版本，然后再使用<code>git checkout file</code>命令把工作区的版本回退到暂存区的最近一次版本。</li></ol><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p></blockquote><ol start="3"><li>当你把错误的文件提交到版本库时，参考上面的回退版本。</li></ol><p><strong>本节命令</strong></p><ul><li><p>git设置用户名邮箱:  </p><p>  <code>$ git config --flobal user.name &quot;Your Name&quot;</code></p><p>  <code>$ git config --global user.email &quot;email@ex.com&quot;</code></p></li><li><p>本地创建空目录:</p><p>  <code>$ mkdir emptyPro</code></p></li><li><p>进入创建的目录</p><p>  <code>$ cd emptyPro</code></p></li><li><p>查看当前所在目录</p><p>  <code>$ pwd</code></p></li><li><p>初始化空目录使之成为可以被Git管理的仓库（注意是要在这个目录下）</p><p>  <code>$ git init</code></p></li><li><p>把编写的文件添加到暂存区</p><p>  <code>$ git add one.txt</code></p><p>  <code>$ git add two.txt</code></p></li><li><p>把添加到暂存区的文件全部提交到仓库</p><p>  <code>$ git commit -m &quot;tips&quot;</code></p></li><li><p>查看提交过的版本</p><p>  <code>$ git log</code></p></li><li><p>查看格式化后的版本</p><p>  <code>$ git log --pretty=oneline</code></p></li><li><p>工作区的内容回退一个版本(hard表示HEAD指向目标版本，且工作区和暂存区的内容都要回退到目标版本。)</p><p>  <code>$ git reset --hard HEAD^</code></p></li></ul><ul><li><p>回退两个版本</p><p>  <code>$ git reset --hard HEAD^</code></p></li><li><p>回退到第n个版本</p><p>  <code>$ git reset --hard HEAD~n</code></p></li><li><p>查看文件内容</p><p>  <code>$ cat one.txt</code></p></li><li><p>查看所有变更记录的版本号</p><p>  <code>$ git reglog</code></p></li><li><p>查看状态</p><p>  <code>$ git status</code></p></li><li><p>查看工作区和暂存区差异</p><p>  <code>$ git diff</code></p></li><li><p>查看暂存区和仓库差异</p><p>  <code>$ git diff --cached</code></p></li><li><p>查看工作区和仓库差异</p><p>  <code>$ git diff HEAD</code></p></li><li><p>删除工作区文件</p><p>  <code>$ rm one.txt</code></p></li><li><p>删除暂存区文件夹</p><p>  <code>git rm -r testPro</code></p></li><li><p>删除暂存区文件</p><p>  <code>$ git rm one.txt</code></p></li><li><p>撤销工作区的修改</p><p>  <code>$ git checkout file</code></p></li><li><p>如果有多个分支的话撤销工作区的修改（表示撤销当前工作分支的工作区的修改）</p><p>  <code>$ git checkout HEAD file</code></p></li><li><p>撤销暂存区的修改</p><p>  <code>$ git reset HEAD file</code></p></li><li><p>查看暂存区内容</p><p>  <code>$ git ls-files --stage</code></p></li><li><p>清空(删除)暂存区</p><p>  <code>$ rm .git/index</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h2&gt;&lt;h3 id=&quot;在Linux上安装Git&quot;&gt;&lt;a href=&quot;#在Linux上安装Git&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>IDEA基础设置及操作</title>
    <link href="http://yoursite.com/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/</id>
    <published>2020-01-11T14:28:36.000Z</published>
    <updated>2020-01-28T12:44:40.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键操作："><a href="#快捷键操作：" class="headerlink" title="快捷键操作："></a>快捷键操作：</h3><ol><li><p>弹出代码修改提示:<code>alt+enter</code></p></li><li><p>代码补全:<code>ctrl+space</code></p></li><li><p>输出快捷键:<code>sout</code></p></li><li><p>get/set生成:<code>alt+insert</code></p></li></ol><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>1.代码提示不区分大小写:File-&gt;settings-&gt;Editor-&gt;General-&gt;Code Completion下:</p><p><img src="/2020/01/11/IDEA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/code%E6%8F%90%E7%A4%BA.png" alt="codeCase"></p><h3 id="日常问题"><a href="#日常问题" class="headerlink" title="日常问题"></a>日常问题</h3><p>1.当代码没有自动补全可查看File-&gt;Power Save mode自动省电是否开启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快捷键操作：&quot;&gt;&lt;a href=&quot;#快捷键操作：&quot; class=&quot;headerlink&quot; title=&quot;快捷键操作：&quot;&gt;&lt;/a&gt;快捷键操作：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;弹出代码修改提示:&lt;code&gt;alt+enter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
    
      <category term="Intellij IDEA" scheme="http://yoursite.com/tags/Intellij-IDEA/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客网站</title>
    <link href="http://yoursite.com/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2020-01-08T15:57:16.000Z</published>
    <updated>2020-01-22T15:09:05.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境-Windows-10-64bit"><a href="#环境-Windows-10-64bit" class="headerlink" title="环境:Windows 10 64bit"></a>环境:Windows 10 64bit</h4><h4 id="工具-node-js-Git"><a href="#工具-node-js-Git" class="headerlink" title="工具:node.js     Git"></a>工具:node.js     Git</h4><h4 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h4><p><strong>1.安装Node.js</strong></p><p>打开官网:<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p><strong>2.安装Git</strong></p><p>打开官网:<a href="https://git-scm.com/donloads" target="_blank" rel="noopener">https://git-scm.com/donloads</a></p><p><strong>3.管理员权限打开命令行</strong></p><p><strong>4.</strong><code>node -v</code><strong>查看node版本</strong></p><p><code>npm -v</code><strong>npm包管理器版本</strong></p><p><strong>5.利用npm安装cnpm:</strong></p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><strong>6.查看cnpm版本</strong><code>cnpm</code></p><p><strong>7.安装hexo:</strong><code>cnpm install -g hexo-cli</code></p><p>验证:<code>hexo -v</code></p><p><strong>8.创建一个文件夹</strong></p><p>创建blog文件夹，关于个人博客的操作都是在此文件夹中进行。</p><p>命令行到该文件夹下:<code>hexo init</code>，linux系统可使用命令<code>sudo hexo init</code></p><p><strong>9.完成</strong></p><p>可访问本地<code>localhost:4000</code>访问个人博客页面。如果要部署可使用GitHub，deploy到远程库中</p><ol><li><p>在GitHub上创建仓库，注意仓库名称是要<code>用户名.github.io</code></p></li><li><p>config.yml中添加相关属性。</p></li></ol><p>repo:创建的GitHub仓库地址。</p><ol start="3"><li>命令:<code>hexo d(eploy)</code></li></ol><p>至于为什么仓库名称要是用户名:</p><p><img src="/2020/01/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/360%E6%88%AA%E5%9B%BE20200122230657234.jpg" alt="名称"></p><p><u>注:</u></p><p><u>在写博客文章的时候要记得在头部冒号后加上空格 ，再填写内容.</u></p><p><strong>#遇到的问题及解决方案:</strong></p><p>1.引入图片:</p><ul><li><p>找到<code>Hexo</code>下的<code>_config.yml</code>文件里的post_asset_folder，修改诶<code>true</code></p></li><li><p>在博客目录下打开<code>Git Bash Here</code>，执行一个下载上传图片插件的命令:<code>npm install hexo-asset-image --save</code>,也可以<code>cnpm install hexo-asset-image --save</code></p></li><li><p>再次新建博客.md文件时，就会自动产生一个与博客同名的文件夹，这时候只需要把图片放入这个文件夹，在博客中引用图片的时候使用此文件夹的路径就可以了。</p></li><li><p>但有时候可能出现引用图片不成功的问题，那么这时候需要修改<code>/node_modules/hexo-asset-image/</code>下的indedx.js文件，打开并将其修改:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line">   <span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-       in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">   <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">   <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">   link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">     <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line">     <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">       ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">       xmlMode: <span class="literal">false</span>,</span><br><span class="line">       lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">       decodeEntities: <span class="literal">false</span></span><br><span class="line">     &#125;);</span><br><span class="line">     $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     data[key] = $.html();</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考地址:<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p><h3 id="MarkdownPad设置及操作"><a href="#MarkdownPad设置及操作" class="headerlink" title="#MarkdownPad设置及操作"></a>#MarkdownPad设置及操作</h3><ol><li><p>代码块: </p><ul><li><p>可使用 <code>&lt;pre\&gt; &lt;/pre\&gt;</code>标签实现代码块,不过这里要在Tools-&gt;options-&gt;Markdown-&gt;Markdown Processor–&gt;设置为Markdown</p></li><li><p>使用格式为``` 内容  ```，但如果想实现代码之间的换行同样要设置:Tools-&gt;options-&gt;Markdown-&gt;Markdown Processor–&gt;设置为CommonMark</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境-Windows-10-64bit&quot;&gt;&lt;a href=&quot;#环境-Windows-10-64bit&quot; class=&quot;headerlink&quot; title=&quot;环境:Windows 10 64bit&quot;&gt;&lt;/a&gt;环境:Windows 10 64bit&lt;/h4&gt;&lt;h4 i
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
